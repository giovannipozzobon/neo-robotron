
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Wed Apr 24 09:56:10 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_GRUNT = 2
=3					TP_ELECTRODE = 3
=4					TP_MUM = 4
=5					TP_DAD = 5
=6					TP_CHILD = 6
=7					TP_HULK = 7
=8					TP_BRAIN = 8
=9					TP_SPHERE = 9
=10					TP_QUARK = 10
=11					TP_PROG = 11
=12					TP_ESPARK = 12
=13					TP_ENFORCER = 13
=14					TP_SHELL = 14
=15					TP_TANK = 15
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=7					OBH_RANDOM_MASK = 7 						; reduce random to mask
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_PROG = 22 								; Prog (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 8f c1	jmp $c18f			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c 8b c7	jmp $c78b			jmp 	MainLoop 					; $C006 main loop code.

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 18		beq $c038			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 10		beq $c038			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 07		cmp #$07			cmp 	#TP_CHILD+1
.c02e	b0 04		bcs $c034			bcs 	_CONotHuman
.c030	c9 04		cmp #$04			cmp 	#TP_MUM
.c032	b0 04		bcs $c038			bcs 	_COLoop
.c034					_CONotHuman:
.c034	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c036	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c038					_COLoop:
.c038	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c03b	30 05		bmi $c042			bmi 	_COFound
.c03d	e8		inx				inx
.c03e	88		dey				dey
.c03f	d0 f7		bne $c038			bne 	_COLoop
.c041	60		rts				rts  								; cannot create, exit.
.c042					_COFound:
.c042	8e c7 c0	stx $c0c7			stx 	NewObject 					; remember the new object
.c045	9e e8 e5	stz $e5e8,x			stz 	OBObjectData1,x 			; zero object OBObjectData1
.c048	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c04b	0a		asl a				asl 	a 							; double -> Y
.c04c	a8		tay				tay
.c04d	b9 95 c7	lda $c795,y			lda 	HandlerTable,y  			; put the handler address in.
.c050	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c053	b9 96 c7	lda $c796,y			lda 	HandlerTable+1,y
.c056	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c059					_COPos1:
.c059	20 5f c2	jsr $c25f			jsr 	Random8Bit  				; value is 0-151
.c05c	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c05e	b0 f9		bcs $c059			bcs 	_COPos1
.c060	69 04		adc #$04			adc 	#PF_LEFT
.c062	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c065					_COPos2:
.c065	20 5f c2	jsr $c25f			jsr 	Random8Bit 					; value is 0-103
.c068	29 7f		and #$7f			and 	#$7F
.c06a	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c06c	b0 f7		bcs $c065			bcs 	_COPos2
.c06e	69 04		adc #$04			adc 	#PF_TOP
.c070	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c073	38		sec				sec   								; check Y centre offset
.c074	e9 34		sbc #$34			sbc 	#52
.c076	20 bf c0	jsr $c0bf			jsr 	_COAbsolute
.c079	c9 27		cmp #$27			cmp 	#39
.c07b	b0 0d		bcs $c08a			bcs 	_COIsOkay
.c07d	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c080	38		sec				sec
.c081	e9 4b		sbc #$4b			sbc 	#75
.c083	20 bf c0	jsr $c0bf			jsr 	_COAbsolute
.c086	c9 37		cmp #$37			cmp 	#55
.c088	90 cf		bcc $c059			bcc 	_COPos1
.c08a					_COIsOkay:
.c08a	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c08c	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c08f	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c092	a9 ff		lda #$ff			lda 	#$FF
.c094	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c097	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c09a	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c09b	29 07		and #$07			and 	#7
.c09d	1a		inc a				inc 	a
.c09e	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c0a1	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0a4	a9 01		lda #$01			lda 	#1
.c0a6	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0a9	a9 0a		lda #$0a			lda 	#10
.c0ab	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0ae	20 10 c2	jsr $c210			jsr 	ChooseRandomDirection
.c0b1	a9 01		lda #$01			lda 	#MSG_INIT
.c0b3	20 77 c2	jsr $c277			jsr 	SendObjectMessage
.c0b6	90 03		bcc $c0bb			bcc 	_1
.c0b8	20 d0 c2	jsr $c2d0			jsr 	DefaultHandler
.c0bb					_1:
.c0bb	20 b4 c1	jsr $c1b4			jsr 	RedrawObject
.c0be	60		rts				rts
.c0bf					_COAbsolute:
.c0bf	c9 00		cmp #$00			cmp 	#0
.c0c1	10 03		bpl $c0c6			bpl 	_COAExit
.c0c3	49 ff		eor #$ff			eor 	#$FF
.c0c5	1a		inc a				inc 	a
.c0c6					_COAExit:
.c0c6	60		rts				rts
.c0c7					NewObject:
>c0c7	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0c8					MoveObjects:
.c0c8	ee 4b c1	inc $c14b			inc 	FrameCount
.c0cb	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0cd					_MOLoop:
.c0cd	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0d0	30 03		bmi $c0d5			bmi 	_MONoObject
.c0d2	20 db c0	jsr $c0db			jsr 	_MoveOneObject
.c0d5					_MONoObject:
.c0d5	e8		inx				inx
.c0d6	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0d8	d0 f3		bne $c0cd			bne 	_MOLoop
.c0da	60		rts				rts  								; cannot create, exit.
.c0db					_MoveOneObject:
.c0db	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0de	d0 5f		bne $c13f			bne 	_MONotMove
.c0e0	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0e3	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0e6	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0e9	d0 10		bne $c0fb			bne 	_MONoProcess
.c0eb	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0ee	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0f1	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0f3	20 77 c2	jsr $c277			jsr 	SendObjectMessage
.c0f6	90 03		bcc $c0fb			bcc 	_1
.c0f8	20 d0 c2	jsr $c2d0			jsr 	DefaultHandler
.c0fb					_1:
.c0fb					_MONoProcess:
.c0fb	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0fe	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c101	4a		lsr a				lsr 	a
.c102	90 01		bcc $c105			bcc 	_MONotLeft
.c104	88		dey				dey
.c105					_MONotLeft:
.c105	4a		lsr a				lsr 	a
.c106	90 01		bcc $c109			bcc 	_MONotRight
.c108	c8		iny				iny
.c109					_MONotRight:
.c109	5a		phy				phy 								; new Y position on stack
.c10a	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c10d	4a		lsr a				lsr 	a
.c10e	90 01		bcc $c111			bcc 	_MONotUp
.c110	88		dey				dey
.c111					_MONotUp:
.c111	4a		lsr a				lsr 	a
.c112	90 01		bcc $c115			bcc 	_MONotDown
.c114	c8		iny				iny
.c115					_MONotDown:
.c115	68		pla				pla 								; (A,Y) are new coordinates.
.c116	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c118	90 26		bcc $c140			bcc 	_MOHitWall
.c11a	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c11c	b0 22		bcs $c140			bcs 	_MOHitWall
.c11e	c0 04		cpy #$04			cpy 	#PF_TOP
.c120	90 1e		bcc $c140			bcc 	_MOHitWall
.c122	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c124	b0 1a		bcs $c140			bcs 	_MOHitWall
.c126	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c129	98		tya				tya
.c12a	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c12d	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c12f	20 77 c2	jsr $c277			jsr 	SendObjectMessage
.c132	90 03		bcc $c137			bcc 	_1
.c134	20 d0 c2	jsr $c2d0			jsr 	DefaultHandler
.c137					_1:
.c137	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c13a	30 03		bmi $c13f			bmi 	_MONotMove
.c13c	20 b4 c1	jsr $c1b4			jsr 	RedrawObject 				; repaint.
.c13f					_MONotMove:
.c13f	60		rts				rts
.c140					_MOHitWall:
.c140	a9 04		lda #$04			lda 	#MSG_HITWALL
.c142	20 77 c2	jsr $c277			jsr 	SendObjectMessage
.c145	90 03		bcc $c14a			bcc 	_1
.c147	20 d0 c2	jsr $c2d0			jsr 	DefaultHandler
.c14a					_1:
.c14a	60		rts				rts
.c14b					FrameCount:
>c14b	00						.byte 	0
.c14c					ClockDelay:
.c14c	da		phx				phx
.c14d	5a		phy				phy
.c14e	ae 5a c1	ldx $c15a			ldx 	MoveSpeed
.c151					_MLDelay:
.c151	88		dey				dey
.c152	d0 fd		bne $c151			bne 	_MLDelay
.c154	ca		dex				dex
.c155	d0 fa		bne $c151			bne 	_MLDelay
.c157	7a		ply				ply
.c158	fa		plx				plx
.c159	60		rts				rts
.c15a					MoveSpeed:
>c15a	28						.byte 	40

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c15b					AnimatePalette:
.c15b	ad 00 ff	lda $ff00			lda 	APICommand
.c15e	d0 fb		bne $c15b			bne 	AnimatePalette
.c160	ee 8e c1	inc $c18e			inc 	_APCount
.c163	ad 8e c1	lda $c18e			lda 	_APCount
.c166	4a		lsr a				lsr 	a
.c167	a0 01		ldy #$01			ldy 	#1
.c169	20 82 c1	jsr $c182			jsr 	_APBit
.c16c	20 82 c1	jsr $c182			jsr 	_APBit
.c16f	20 82 c1	jsr $c182			jsr 	_APBit
.c172	a9 e0		lda #$e0			lda 	#14*16
.c174	8d 04 ff	sta $ff04			sta 	APIParams
.c177	a9 20		lda #$20			lda 	#32
.c179	8d 01 ff	sta $ff01			sta 	APIFunction
.c17c	a9 05		lda #$05			lda 	#5
.c17e	8d 00 ff	sta $ff00			sta 	APICommand
.c181	60		rts				rts
.c182					_APBit:
.c182	4a		lsr a				lsr 	a
.c183	48		pha				pha
.c184	a9 00		lda #$00			lda 	#0
.c186	e9 00		sbc #$00			sbc 	#0
.c188	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c18b	c8		iny				iny
.c18c	68		pla				pla
.c18d	60		rts				rts
.c18e					_APCount:
>c18e	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c18f					ResetObjects:
.c18f	a2 00		ldx #$00			ldx 	#0
.c191					_RSLoop:
.c191	a9 ff		lda #$ff			lda 	#$FF
.c193	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c196	e8		inx				inx
.c197	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c199	d0 f6		bne $c191			bne 	_RSLoop
.c19b	60		rts				rts
.c19c					KillObject:
.c19c	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c19f	d0 fb		bne $c19c			bne 	KillObject
.c1a1	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c1a3	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1a6	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c1a9	a9 03		lda #$03			lda 	#3  						; and hide it.
.c1ab	8d 01 ff	sta $ff01			sta 	APIFunction
.c1ae	a9 06		lda #$06			lda 	#6
.c1b0	8d 00 ff	sta $ff00			sta 	APICommand
.c1b3	60		rts				rts
.c1b4					RedrawObject:
.c1b4	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1b7	d0 fb		bne $c1b4			bne 	RedrawObject
.c1b9	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1bc	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1bf	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1c2	0a		asl a				asl 	a
.c1c3	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1c6	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1c9	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1cc	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1cf	0a		asl a				asl 	a
.c1d0	69 08		adc #$08			adc 	#8 							; allow for top area
.c1d2	8d 07 ff	sta $ff07			sta 	APIParams+3
.c1d5	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c1d8	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c1db	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c1dd	f0 0e		beq $c1ed			beq 	_ROUseSprite2
.c1df	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c1e1	d0 03		bne $c1e6			bne 	_ROHasHorizonMovement
.c1e3	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c1e6					_ROHasHorizonMovement:
.c1e6	98		tya				tya 								; put bit 1 into carry.
.c1e7	4a		lsr a				lsr 	a
.c1e8	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c1eb	90 03		bcc $c1f0			bcc 	_ROUseSprite
.c1ed					_ROUseSprite2:
.c1ed	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c1f0					_ROUseSprite:
.c1f0	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1f3	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1f6	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1f8	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1fb					_RONotLeft:
.c1fb	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1fd	20 77 c2	jsr $c277			jsr 	SendObjectMessage
.c200	90 03		bcc $c205			bcc 	_1
.c202	20 d0 c2	jsr $c2d0			jsr 	DefaultHandler
.c205					_1:
.c205	a9 02		lda #$02			lda 	#2  						; and draw it.
.c207	8d 01 ff	sta $ff01			sta 	APIFunction
.c20a	a9 06		lda #$06			lda 	#6
.c20c	8d 00 ff	sta $ff00			sta 	APICommand
.c20f	60		rts				rts
.c210					ChooseRandomDirection:
.c210	20 5f c2	jsr $c25f			jsr 	Random8Bit 					; get valid random direction
.c213	29 0f		and #$0f			and 	#15
.c215	f0 f9		beq $c210			beq 	ChooseRandomDirection 		; stationary (0)
.c217	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c21a	29 03		and #$03			and 	#3 							; check LR not both on.
.c21c	c9 03		cmp #$03			cmp 	#3
.c21e	f0 f0		beq $c210			beq 	ChooseRandomDirection
.c220	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c223	29 0c		and #$0c			and 	#12
.c225	c9 0c		cmp #$0c			cmp 	#12
.c227	f0 e7		beq $c210			beq 	ChooseRandomDirection
.c229	60		rts				rts
.c22a					NoControlEffect:
.c22a	60		rts				rts
.c22b					ChaseObject:
.c22b	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c22e	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c231	20 4a c2	jsr $c24a			jsr 	_ChaseCalculate
.c234	8d 49 c2	sta $c249			sta 	_ChaseTemp
.c237	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c23a	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c23d	20 4a c2	jsr $c24a			jsr 	_ChaseCalculate
.c240	0a		asl a				asl 	a
.c241	0a		asl a				asl 	a
.c242	0d 49 c2	ora $c249			ora 	_ChaseTemp
.c245	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c248	60		rts				rts
.c249					_ChaseTemp:
>c249	00						.byte 	0
.c24a					_ChaseCalculate:
.c24a	f0 08		beq $c254			beq 	_CCNoMove
.c24c	90 03		bcc $c251			bcc 	_CCMoveRight
.c24e	a9 02		lda #$02			lda 	#2
.c250	60		rts				rts
.c251					_CCMoveRight:
.c251	a9 01		lda #$01			lda 	#1
.c253	60		rts				rts
.c254					_CCNoMove:
.c254	a9 00		lda #$00			lda 	#0
.c256	60		rts				rts
.c257					ChasePlayer:
.c257	5a		phy				phy
.c258	a0 00		ldy #$00			ldy 	#0
.c25a	20 2b c2	jsr $c22b			jsr 	ChaseObject
.c25d	7a		ply				ply
.c25e	60		rts				rts
.c25f					Random8Bit:
.c25f	5a		phy				phy
.c260	a0 08		ldy #$08			ldy 	#8
.c262	ad 75 c2	lda $c275			lda 	_R8SeedValue+0
.c265					_R8RandomLoop
.c265	0a		asl a				asl     a
.c266	2e 76 c2	rol $c276			rol 	_R8SeedValue+1
.c269	90 02		bcc $c26d			bcc 	_R8NotSet
.c26b	49 39		eor #$39			eor 	#$39
.c26d					_R8NotSet:
.c26d	88		dey				dey
.c26e	d0 f5		bne $c265			bne 	_R8RandomLoop
.c270	8d 75 c2	sta $c275			sta 	_R8SeedValue+0
.c273	7a		ply				ply
.c274	60		rts				rts
.c275					_R8SeedValue
>c275	cd ab						.word 	$ABCD
.c277					SendObjectMessage:
.c277	48		pha				pha
.c278	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c27b	8d 86 c2	sta $c286			sta 	_SMCall+1
.c27e	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c281	8d 87 c2	sta $c287			sta 	_SMCall+2
.c284	68		pla				pla
.c285					_SMCall:
.c285	4c 00 00	jmp $0000			jmp 	$0000
.c288					SetObjectGraphic:
.c288	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c28b	1a		inc a				inc 	a
.c28c	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c28f	60		rts				rts
.c290					CreateSingleObject:
.c290	da		phx				phx 								; create player missile object.
.c291	5a		phy				phy
.c292	20 18 c0	jsr $c018			jsr 	CreateObject
.c295	7a		ply				ply
.c296	fa		plx				plx
.c297	60		rts				rts
.c298					CopyStartPosition:
.c298	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c29b	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c29e	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2a1	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2a4	60		rts				rts
.c2a5					ChasePlayerY:
.c2a5	da		phx				phx
.c2a6	98		tya				tya
.c2a7	aa		tax				tax
.c2a8	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c2ab	fa		plx				plx
.c2ac	60		rts				rts
.c2ad					CheckCollision:
.c2ad	38		sec				sec
.c2ae	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2b1	f9 6c e0	sbc $e06c,y			sbc 	OBXPos,y
.c2b4	10 03		bpl $c2b9			bpl 	_1
.c2b6	49 ff		eor #$ff			eor 	#$FF
.c2b8	1a		inc a				inc 	a
.c2b9					_1
.c2b9	c9 04		cmp #$04			cmp 	#4
.c2bb	b0 11		bcs $c2ce			bcs 	_CCFail
.c2bd	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2c0	f9 d8 e0	sbc $e0d8,y			sbc 	OBYPos,y
.c2c3	10 03		bpl $c2c8			bpl 	_1
.c2c5	49 ff		eor #$ff			eor 	#$FF
.c2c7	1a		inc a				inc 	a
.c2c8					_1
.c2c8	c9 04		cmp #$04			cmp 	#4
.c2ca	b0 02		bcs $c2ce			bcs 	_CCFail
.c2cc	38		sec				sec
.c2cd	60		rts				rts
.c2ce					_CCFail:
.c2ce	18		clc				clc
.c2cf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c2d0					DefaultHandler:
.c2d0	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c2d2	d0 05		bne $c2d9			bne 	_1
.c2d4	20 e4 c2	jsr $c2e4			jsr 	DefaultControl
.c2d7	18		clc				clc
.c2d8	60		rts				rts
.c2d9					_1:
.c2d9	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c2db	d0 05		bne $c2e2			bne 	_1
.c2dd	20 e7 c2	jsr $c2e7			jsr 	DefaultHitWall
.c2e0	18		clc				clc
.c2e1	60		rts				rts
.c2e2					_1:
.c2e2	38		sec				sec
.c2e3	60		rts				rts
.c2e4					DefaultControl:
.c2e4	4c 10 c2	jmp $c210			jmp 	ChooseRandomDirection
.c2e7					DefaultHitWall:
.c2e7	4c 10 c2	jmp $c210			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c2ea					OHPlayer:
.c2ea	c9 01		cmp #$01			cmp 	#MSG_INIT
.c2ec	d0 05		bne $c2f3			bne 	_1
.c2ee	20 07 c3	jsr $c307			jsr 	OHPInitHandler
.c2f1	18		clc				clc
.c2f2	60		rts				rts
.c2f3					_1:
.c2f3	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c2f5	d0 05		bne $c2fc			bne 	_1
.c2f7	20 1c c3	jsr $c31c			jsr 	OHPRepaintHandler
.c2fa	18		clc				clc
.c2fb	60		rts				rts
.c2fc					_1:
.c2fc	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c2fe	d0 05		bne $c305			bne 	_1
.c300	20 4b c3	jsr $c34b			jsr 	OHPControlHandler
.c303	18		clc				clc
.c304	60		rts				rts
.c305					_1:
.c305	38		sec				sec
.c306	60		rts				rts
.c307					OHPInitHandler:
.c307	a9 50		lda #$50			lda 	#160/2
.c309	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c30c	a9 40		lda #$40			lda 	#128/2
.c30e	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c311	a9 02		lda #$02			lda 	#2
.c313	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c316	a9 01		lda #$01			lda 	#1
.c318	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c31b	60		rts				rts
.c31c					OHPRepaintHandler:
.c31c	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c31f	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c322	29 03		and #$03			and 	#3
.c324	d0 03		bne $c329			bne 	_OHPUseVertical
.c326	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c329					_OHPUseVertical:
.c329	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c32c	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c32f	98		tya				tya
.c330	29 10		and #$10			and 	#16
.c332	f0 03		beq $c337			beq 	_OHPNoAlternate
.c334	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c337					_OHPNoAlternate:
.c337	60		rts				rts
.c338					OHPSetGraphic:
.c338	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c33b	29 03		and #$03			and 	#3
.c33d	d0 06		bne $c345			bne 	_OHPRHorizontal
.c33f	a9 02		lda #$02			lda 	#GR_PLAYERV
.c341	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c344	60		rts				rts
.c345					_OHPRHorizontal:
.c345	a9 00		lda #$00			lda 	#GR_PLAYERH
.c347	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c34a	60		rts				rts
.c34b					OHPControlHandler:
.c34b	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c34e	d0 fb		bne $c34b			bne 	OHPControlHandler
.c350	a9 01		lda #$01			lda 	#1  						; and draw it.
.c352	8d 01 ff	sta $ff01			sta 	APIFunction
.c355	a9 07		lda #$07			lda 	#7
.c357	8d 00 ff	sta $ff00			sta 	APICommand
.c35a					_OHPWait
.c35a	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c35d	d0 fb		bne $c35a			bne 	_OHPWait
.c35f	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c362	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c364	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c367	f0 0d		beq $c376			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c369	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c36c	29 f0		and #$f0			and 	#$F0
.c36e	d0 06		bne $c376			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c370	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c373	8d 89 c3	sta $c389			sta 	OHPLastDirection
.c376					_OHPNoSetLast:
.c376	ee 8a c3	inc $c38a			inc 	OHPFireCount 				; fire one time in 15
.c379	ad 8a c3	lda $c38a			lda 	OHPFireCount
.c37c	29 0f		and #$0f			and 	#15
.c37e	d0 05		bne $c385			bne 	_OHPNoFire
.c380	a9 01		lda #$01			lda 	#1
.c382	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c385					_OHPNoFire:
.c385	20 38 c3	jsr $c338			jsr 	OHPSetGraphic
.c388	60		rts				rts
.c389					OHPLastDirection:
>c389	02						.byte 	2
.c38a					OHPFireCount:
>c38a	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c38b					OHMissile:
.c38b	c9 01		cmp #$01			cmp 	#MSG_INIT
.c38d	d0 05		bne $c394			bne 	_1
.c38f	20 b1 c3	jsr $c3b1			jsr 	OHMInitHandler
.c392	18		clc				clc
.c393	60		rts				rts
.c394					_1:
.c394	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c396	d0 05		bne $c39d			bne 	_1
.c398	20 c9 c3	jsr $c3c9			jsr 	OHMRepaintHandler
.c39b	18		clc				clc
.c39c	60		rts				rts
.c39d					_1:
.c39d	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c39f	d0 05		bne $c3a6			bne 	_1
.c3a1	20 e9 c3	jsr $c3e9			jsr 	OHMControl
.c3a4	18		clc				clc
.c3a5	60		rts				rts
.c3a6					_1:
.c3a6	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c3a8	d0 05		bne $c3af			bne 	_1
.c3aa	20 ea c3	jsr $c3ea			jsr 	OHMHitWall
.c3ad	18		clc				clc
.c3ae	60		rts				rts
.c3af					_1:
.c3af	38		sec				sec
.c3b0	60		rts				rts
.c3b1					OHMInitHandler:
.c3b1	a9 01		lda #$01			lda 	#1
.c3b3	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3b6	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c3b9	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c3bc	ad d8 e0	lda $e0d8			lda 	OBYPos
.c3bf	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c3c2	ad 89 c3	lda $c389			lda 	OHPLastDirection 			; copy direction
.c3c5	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c3c8	60		rts				rts
.c3c9					OHMRepaintHandler:
.c3c9	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c3cc	b9 d9 c3	lda $c3d9,y			lda 	OHMGraphic,y 				; set graphic.
.c3cf	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c3d2	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c3d5	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c3d8	60		rts				rts
.c3d9					OHMGraphic:
>c3d9	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c3dd	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c3e1	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c3e5	00 00 00 00					.byte 	0,0,0,0
.c3e9					OHMControl:
.c3e9	60		rts				rts
.c3ea					OHMHitWall:
.c3ea	20 9c c1	jsr $c19c			jsr 	KillObject
.c3ed	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c3ee					OHHuman1:
.c3ee	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3f0	d0 05		bne $c3f7			bne 	_1
.c3f2	20 1a c4	jsr $c41a			jsr 	OHHInitHandler1
.c3f5	18		clc				clc
.c3f6	60		rts				rts
.c3f7					_1:
.c3f7	38		sec				sec
.c3f8	60		rts				rts
.c3f9					OHHuman2:
.c3f9	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3fb	d0 05		bne $c402			bne 	_1
.c3fd	20 21 c4	jsr $c421			jsr 	OHHInitHandler2
.c400	18		clc				clc
.c401	60		rts				rts
.c402					_1:
.c402	38		sec				sec
.c403	60		rts				rts
.c404					OHHuman3:
.c404	c9 01		cmp #$01			cmp 	#MSG_INIT
.c406	d0 05		bne $c40d			bne 	_1
.c408	20 28 c4	jsr $c428			jsr 	OHHInitHandler3
.c40b	18		clc				clc
.c40c	60		rts				rts
.c40d					_1:
.c40d	38		sec				sec
.c40e	60		rts				rts
.c40f					OHHInitHandlerMain:
.c40f	a9 1e		lda #$1e			lda 	#30
.c411	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c414	a9 0f		lda #$0f			lda 	#15
.c416	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c419	60		rts				rts
.c41a					OHHInitHandler1:
.c41a	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c41c	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c41f	80 ee		bra $c40f			bra 	OHHInitHandlerMain
.c421					OHHInitHandler2:
.c421	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c423	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c426	80 e7		bra $c40f			bra 	OHHInitHandlerMain
.c428					OHHInitHandler3:
.c428	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c42a	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c42d	80 e0		bra $c40f			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c42f					OHGrunt:
.c42f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c431	d0 05		bne $c438			bne 	_1
.c433	20 43 c4	jsr $c443			jsr 	OHGInitHandler
.c436	18		clc				clc
.c437	60		rts				rts
.c438					_1:
.c438	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c43a	d0 05		bne $c441			bne 	_1
.c43c	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c43f	18		clc				clc
.c440	60		rts				rts
.c441					_1:
.c441	38		sec				sec
.c442	60		rts				rts
.c443					OHGInitHandler:
.c443	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c445	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c448	a9 20		lda #$20			lda 	#32
.c44a	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c44d	a9 01		lda #$01			lda 	#1
.c44f	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c452	a9 00		lda #$00			lda 	#($100 & 255)
.c454	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c457	a9 01		lda #$01			lda 	#($100 >> 8)
.c459	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c45c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c45d					OHHulk:
.c45d	c9 01		cmp #$01			cmp 	#MSG_INIT
.c45f	d0 05		bne $c466			bne 	_1
.c461	20 71 c4	jsr $c471			jsr 	OHHUInitHandler
.c464	18		clc				clc
.c465	60		rts				rts
.c466					_1:
.c466	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c468	d0 05		bne $c46f			bne 	_1
.c46a	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c46d	18		clc				clc
.c46e	60		rts				rts
.c46f					_1:
.c46f	38		sec				sec
.c470	60		rts				rts
.c471					OHHUInitHandler:
.c471	a9 0a		lda #$0a			lda 	#GR_HULK
.c473	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c476	a9 40		lda #$40			lda 	#64
.c478	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c47b	a9 01		lda #$01			lda 	#1
.c47d	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c480	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c481					OHSphere:
.c481	c9 01		cmp #$01			cmp 	#MSG_INIT
.c483	d0 05		bne $c48a			bne 	_1
.c485	20 a7 c4	jsr $c4a7			jsr 	OHSInitHandler
.c488	18		clc				clc
.c489	60		rts				rts
.c48a					_1:
.c48a	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c48c	d0 05		bne $c493			bne 	_1
.c48e	20 c9 c4	jsr $c4c9			jsr 	OHSControl
.c491	18		clc				clc
.c492	60		rts				rts
.c493					_1:
.c493	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c495	d0 05		bne $c49c			bne 	_1
.c497	20 d6 c4	jsr $c4d6			jsr 	OHSCheckFire
.c49a	18		clc				clc
.c49b	60		rts				rts
.c49c					_1:
.c49c	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c49e	d0 05		bne $c4a5			bne 	_1
.c4a0	20 ea c4	jsr $c4ea			jsr 	OHSRepaint
.c4a3	18		clc				clc
.c4a4	60		rts				rts
.c4a5					_1:
.c4a5	38		sec				sec
.c4a6	60		rts				rts
.c4a7					OHSInitHandler:
.c4a7	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c4a9	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c4ac	a9 08		lda #$08			lda 	#8
.c4ae	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c4b1	a9 28		lda #$28			lda 	#40
.c4b3	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c4b6	a9 00		lda #$00			lda 	#($1000 & 255)
.c4b8	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c4bb	a9 10		lda #$10			lda 	#($1000 >> 8)
.c4bd	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c4c0	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c4c3	29 3f		and #$3f			and 	#63
.c4c5	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c4c8	60		rts				rts
.c4c9					OHSControl:
.c4c9	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c4cc	d0 04		bne $c4d2			bne 	_OHSNoMove
.c4ce	20 10 c2	jsr $c210			jsr		ChooseRandomDirection
.c4d1	60		rts				rts
.c4d2					_OHSNoMove:
.c4d2	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c4d5	60		rts				rts
.c4d6					OHSCheckFire:
.c4d6	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c4d9	29 1f		and #$1f			and 	#31
.c4db	d0 0c		bne $c4e9			bne 	_OHSCFExit
.c4dd	a9 0d		lda #$0d			lda 	#TP_ENFORCER
.c4df	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c4e2	ac c7 c0	ldy $c0c7			ldy 	NewObject
.c4e5	20 98 c2	jsr $c298			jsr 	CopyStartPosition
.c4e8	60		rts				rts
.c4e9					_OHSCFExit:
.c4e9	60		rts				rts
.c4ea					OHSRepaint:
.c4ea	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c4ed	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c4f0	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c4f3	4a		lsr a				lsr 	a
.c4f4	2e 09 ff	rol $ff09			rol 	APIParams+5
.c4f7	60		rts				rts
.c4f8					OHEnforcer:
.c4f8	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4fa	d0 05		bne $c501			bne 	_1
.c4fc	20 15 c5	jsr $c515			jsr 	OHENInitHandler
.c4ff	18		clc				clc
.c500	60		rts				rts
.c501					_1:
.c501	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c503	d0 05		bne $c50a			bne 	_1
.c505	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c508	18		clc				clc
.c509	60		rts				rts
.c50a					_1:
.c50a	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c50c	d0 05		bne $c513			bne 	_1
.c50e	20 32 c5	jsr $c532			jsr 	OHENCheckFire
.c511	18		clc				clc
.c512	60		rts				rts
.c513					_1:
.c513	38		sec				sec
.c514	60		rts				rts
.c515					OHENInitHandler:
.c515	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c517	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c51a	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c51d	a9 0f		lda #$0f			lda 	#15
.c51f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c522	a9 1e		lda #$1e			lda 	#30
.c524	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c527	a9 50		lda #$50			lda 	#($150 & 255)
.c529	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c52c	a9 01		lda #$01			lda 	#($150 >> 8)
.c52e	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c531	60		rts				rts
.c532					OHENCheckFire:
.c532	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c535	29 1f		and #$1f			and 	#31
.c537	d0 0f		bne $c548			bne 	_OHENCFExit
.c539	a9 0c		lda #$0c			lda 	#TP_ESPARK
.c53b	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c53e	ac c7 c0	ldy $c0c7			ldy 	NewObject
.c541	20 98 c2	jsr $c298			jsr 	CopyStartPosition
.c544	20 a5 c2	jsr $c2a5			jsr 	ChasePlayerY
.c547	60		rts				rts
.c548					_OHENCFExit:
.c548	60		rts				rts
.c549					OHESpark:
.c549	c9 01		cmp #$01			cmp 	#MSG_INIT
.c54b	d0 05		bne $c552			bne 	_1
.c54d	20 66 c5	jsr $c566			jsr 	OHESInitHandler
.c550	18		clc				clc
.c551	60		rts				rts
.c552					_1:
.c552	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c554	d0 05		bne $c55b			bne 	_1
.c556	20 9c c1	jsr $c19c			jsr 	KillObject
.c559	18		clc				clc
.c55a	60		rts				rts
.c55b					_1:
.c55b	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c55d	d0 05		bne $c564			bne 	_1
.c55f	20 2a c2	jsr $c22a			jsr 	NoControlEffect
.c562	18		clc				clc
.c563	60		rts				rts
.c564					_1:
.c564	38		sec				sec
.c565	60		rts				rts
.c566					OHESInitHandler:
.c566	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c569	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c56b	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c56e	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c571	a9 07		lda #$07			lda 	#7
.c573	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c576	a9 ff		lda #$ff			lda 	#255
.c578	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c57b	a9 25		lda #$25			lda 	#($25 & 255)
.c57d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c580	a9 00		lda #$00			lda 	#($25 >> 8)
.c582	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c585	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c586					OHQuark:
.c586	c9 01		cmp #$01			cmp 	#MSG_INIT
.c588	d0 05		bne $c58f			bne 	_1
.c58a	20 9a c5	jsr $c59a			jsr 	OHQInitHandler
.c58d	18		clc				clc
.c58e	60		rts				rts
.c58f					_1:
.c58f	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c591	d0 05		bne $c598			bne 	_1
.c593	20 bf c5	jsr $c5bf			jsr 	OHQCheckFire
.c596	18		clc				clc
.c597	60		rts				rts
.c598					_1:
.c598	38		sec				sec
.c599	60		rts				rts
.c59a					OHQInitHandler:
.c59a	a9 11		lda #$11			lda 	#GR1_QUARK
.c59c	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c59f	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c5a2	a9 0a		lda #$0a			lda 	#10
.c5a4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c5a7	a9 1e		lda #$1e			lda 	#30
.c5a9	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c5ac	a9 00		lda #$00			lda 	#($1000 & 255)
.c5ae	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c5b1	a9 10		lda #$10			lda 	#($1000 >> 8)
.c5b3	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c5b6	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c5b9	29 3f		and #$3f			and 	#63
.c5bb	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c5be	60		rts				rts
.c5bf					OHQCheckFire:
.c5bf	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c5c2	29 1f		and #$1f			and 	#31
.c5c4	d0 0c		bne $c5d2			bne 	_OHQCFExit
.c5c6	a9 0f		lda #$0f			lda 	#TP_TANK
.c5c8	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c5cb	ac c7 c0	ldy $c0c7			ldy 	NewObject
.c5ce	20 98 c2	jsr $c298			jsr 	CopyStartPosition
.c5d1	60		rts				rts
.c5d2					_OHQCFExit:
.c5d2	60		rts				rts
.c5d3					OHTank:
.c5d3	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5d5	d0 05		bne $c5dc			bne 	_1
.c5d7	20 e7 c5	jsr $c5e7			jsr 	OHTNInitHandler
.c5da	18		clc				clc
.c5db	60		rts				rts
.c5dc					_1:
.c5dc	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c5de	d0 05		bne $c5e5			bne 	_1
.c5e0	20 01 c6	jsr $c601			jsr 	OHTNCheckFire
.c5e3	18		clc				clc
.c5e4	60		rts				rts
.c5e5					_1:
.c5e5	38		sec				sec
.c5e6	60		rts				rts
.c5e7					OHTNInitHandler:
.c5e7	a9 12		lda #$12			lda 	#GR_TANK
.c5e9	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c5ec	a9 0f		lda #$0f			lda 	#15
.c5ee	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c5f1	a9 1e		lda #$1e			lda 	#30
.c5f3	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c5f6	a9 00		lda #$00			lda 	#($200 & 255)
.c5f8	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c5fb	a9 02		lda #$02			lda 	#($200 >> 8)
.c5fd	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c600	60		rts				rts
.c601					OHTNCheckFire:
.c601	20 5f c2	jsr $c25f			jsr 	Random8Bit
.c604	29 1f		and #$1f			and 	#31
.c606	d0 0f		bne $c617			bne 	_OHTNCFExit
.c608	a9 0e		lda #$0e			lda 	#TP_SHELL
.c60a	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c60d	ac c7 c0	ldy $c0c7			ldy 	NewObject
.c610	20 98 c2	jsr $c298			jsr 	CopyStartPosition
.c613	20 a5 c2	jsr $c2a5			jsr 	ChasePlayerY
.c616	60		rts				rts
.c617					_OHTNCFExit:
.c617	60		rts				rts
.c618					OHShell:
.c618	c9 01		cmp #$01			cmp 	#MSG_INIT
.c61a	d0 05		bne $c621			bne 	_1
.c61c	20 47 c6	jsr $c647			jsr 	OHSHInitHandler
.c61f	18		clc				clc
.c620	60		rts				rts
.c621					_1:
.c621	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c623	d0 05		bne $c62a			bne 	_1
.c625	20 6c c6	jsr $c66c			jsr 	OHSHHitWall
.c628	18		clc				clc
.c629	60		rts				rts
.c62a					_1:
.c62a	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c62c	d0 05		bne $c633			bne 	_1
.c62e	20 2a c2	jsr $c22a			jsr 	NoControlEffect
.c631	18		clc				clc
.c632	60		rts				rts
.c633					_1:
.c633	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c635	d0 05		bne $c63c			bne 	_1
.c637	20 3e c6	jsr $c63e			jsr 	OHSHCheckLife
.c63a	18		clc				clc
.c63b	60		rts				rts
.c63c					_1:
.c63c	38		sec				sec
.c63d	60		rts				rts
.c63e					OHSHCheckLife:
.c63e	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c641	d0 03		bne $c646			bne 	_OHSHCLExit
.c643	20 9c c1	jsr $c19c			jsr 	KillObject
.c646					_OHSHCLExit:
.c646	60		rts				rts
.c647					OHSHInitHandler:
.c647	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c64a	a9 1f		lda #$1f			lda 	#GR1_MISSILE1
.c64c	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c64f	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c652	a9 05		lda #$05			lda 	#5
.c654	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c657	a9 ff		lda #$ff			lda 	#255
.c659	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c65c	a9 50		lda #$50			lda 	#($50 & 255)
.c65e	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c661	a9 00		lda #$00			lda 	#($50 >> 8)
.c663	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c666	a9 c8		lda #$c8			lda 	#200
.c668	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c66b	60		rts				rts
.c66c					OHSHHitWall:
.c66c	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c66f	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c671	90 04		bcc $c677			bcc 	_OHSH1
.c673	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c675	90 08		bcc $c67f			bcc 	_OHSHCheckVertical
.c677					_OHSH1:
.c677	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c67a	49 03		eor #$03			eor 	#3
.c67c	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c67f					_OHSHCheckVertical:
.c67f	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c682	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c684	90 04		bcc $c68a			bcc 	_OHSH2
.c686	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c688	90 08		bcc $c692			bcc 	_OHSHExit
.c68a					_OHSH2:
.c68a	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c68d	49 0c		eor #$0c			eor 	#12
.c68f	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c692					_OHSHExit:
.c692	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c693					OHElectrode:
.c693	c9 01		cmp #$01			cmp 	#MSG_INIT
.c695	d0 05		bne $c69c			bne 	_1
.c697	20 a7 c6	jsr $c6a7			jsr 	OHELInitHandler
.c69a	18		clc				clc
.c69b	60		rts				rts
.c69c					_1:
.c69c	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c69e	d0 05		bne $c6a5			bne 	_1
.c6a0	20 c3 c6	jsr $c6c3			jsr 	OHELFreeze
.c6a3	18		clc				clc
.c6a4	60		rts				rts
.c6a5					_1:
.c6a5	38		sec				sec
.c6a6	60		rts				rts
.c6a7					OHELInitHandler:
.c6a7	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.c6a9	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c6ac	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c6af	a9 00		lda #$00			lda 	#0
.c6b1	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c6b4	a9 00		lda #$00			lda 	#0
.c6b6	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c6b9	a9 00		lda #$00			lda 	#($0 & 255)
.c6bb	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c6be	a9 00		lda #$00			lda 	#($0 >> 8)
.c6c0	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c6c3					OHELFreeze:
.c6c3	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c6c6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/brains.asm

.c6c7					OHBrain:
.c6c7	c9 01		cmp #$01			cmp 	#MSG_INIT
.c6c9	d0 05		bne $c6d0			bne 	_1
.c6cb	20 ed c6	jsr $c6ed			jsr 	OHBInitHandler
.c6ce	18		clc				clc
.c6cf	60		rts				rts
.c6d0					_1:
.c6d0	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c6d2	d0 05		bne $c6d9			bne 	_1
.c6d4	20 0a c7	jsr $c70a			jsr 	OHBCheckEat
.c6d7	18		clc				clc
.c6d8	60		rts				rts
.c6d9					_1:
.c6d9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c6db	d0 05		bne $c6e2			bne 	_1
.c6dd	20 33 c7	jsr $c733			jsr 	OHBChaseHuman
.c6e0	18		clc				clc
.c6e1	60		rts				rts
.c6e2					_1:
.c6e2	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c6e4	d0 05		bne $c6eb			bne 	_1
.c6e6	20 10 c2	jsr $c210			jsr 	ChooseRandomDirection
.c6e9	18		clc				clc
.c6ea	60		rts				rts
.c6eb					_1:
.c6eb	38		sec				sec
.c6ec	60		rts				rts
.c6ed					OHBInitHandler:
.c6ed	a9 14		lda #$14			lda 	#GR_BRAIN
.c6ef	20 88 c2	jsr $c288			jsr 	SetObjectGraphic
.c6f2	a9 18		lda #$18			lda 	#24
.c6f4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c6f7	a9 01		lda #$01			lda 	#1
.c6f9	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c6fc	a9 00		lda #$00			lda 	#($500 & 255)
.c6fe	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c701	a9 05		lda #$05			lda 	#($500 >> 8)
.c703	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c706	20 10 c2	jsr $c210			jsr 	ChooseRandomDirection
.c709	60		rts				rts
.c70a					OHBCheckEat:
.c70a	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; object being chased.
.c70d	f0 23		beq $c732			beq 	_OHBCEExit 					; none
.c70f	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; actual object
.c712	30 1e		bmi $c732			bmi 	_OHBCEExit 					; not existing.
.c714	20 ad c2	jsr $c2ad			jsr 	CheckCollision 				; are Y/X colliding ?
.c717	90 19		bcc $c732			bcc 	_OHBCEExit
.c719	da		phx				phx
.c71a	a9 0b		lda #$0b			lda 	#TP_PROG 					; create a PROG here
.c71c	20 90 c2	jsr $c290			jsr 	CreateSingleObject
.c71f	ac c7 c0	ldy $c0c7			ldy 	NewObject
.c722	20 98 c2	jsr $c298			jsr 	CopyStartPosition
.c725	fa		plx				plx
.c726	da		phx				phx
.c727	20 9c c1	jsr $c19c			jsr 	KillObject	 				; kill the parent object
.c72a	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x 			; and the thing it collided with, the human.
.c72d	aa		tax				tax
.c72e	20 9c c1	jsr $c19c			jsr 	KillObject
.c731	fa		plx				plx
.c732					_OHBCEExit:
.c732	60		rts				rts
.c733					OHBChaseHuman:
.c733	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; check chase
.c736	f0 05		beq $c73d			beq 	_OHBNewChoose
.c738	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; chased still alive ?
.c73b	10 16		bpl $c753			bpl 	_OHBChaseIt
.c73d					_OHBNewChoose:
.c73d	20 5f c2	jsr $c25f			jsr 	Random8Bit 					; no, keep randomly trying till found a live one.
.c740	29 07		and #$07			and 	#OBH_RANDOM_MASK
.c742	c9 06		cmp #$06			cmp 	#OBC_HUMANS
.c744	b0 f7		bcs $c73d			bcs 	_OHBNewChoose
.c746	69 05		adc #$05			adc 	#OB_HUMANS
.c748	a8		tay				tay
.c749	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y
.c74c	30 0b		bmi $c759			bmi 	_OHBExit
.c74e	98		tya				tya
.c74f	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c752	60		rts				rts
.c753					_OHBChaseIt:
.c753	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x
.c756	20 2b c2	jsr $c22b			jsr 	ChaseObject
.c759					_OHBExit:
.c759	60		rts				rts
.c75a					OHProg:
.c75a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c75c	d0 05		bne $c763			bne 	_1
.c75e	20 6e c7	jsr $c76e			jsr 	OHPRInitHandler
.c761	18		clc				clc
.c762	60		rts				rts
.c763					_1:
.c763	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c765	d0 05		bne $c76c			bne 	_1
.c767	20 57 c2	jsr $c257			jsr 	ChasePlayer
.c76a	18		clc				clc
.c76b	60		rts				rts
.c76c					_1:
.c76c	38		sec				sec
.c76d	60		rts				rts
.c76e					OHPRInitHandler:
.c76e	a9 16		lda #$16			lda 	#GR1_PROG
.c770	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c773	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c776	a9 04		lda #$04			lda 	#4
.c778	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c77b	a9 01		lda #$01			lda 	#1
.c77d	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c780	a9 00		lda #$00			lda 	#($100 & 255)
.c782	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c785	a9 01		lda #$01			lda 	#($100 >> 8)
.c787	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c78a	60		rts				rts

;******  Return to file: main.asm

.c78b					MainLoop:
.c78b	20 5b c1	jsr $c15b			jsr 	AnimatePalette 				; causes flashing effects
.c78e	20 c8 c0	jsr $c0c8			jsr 	MoveObjects 				; move all objects
.c791	20 4c c1	jsr $c14c			jsr 	ClockDelay 					; delay to stop it being insanely fast.
.c794	60		rts				rts
.c795					HandlerTable:
>c795	ea c2						.word 		OHPlayer 				; type 0 Player
>c797	8b c3						.word 		OHMissile 				; type 1 Player missile
>c799	2f c4						.word 		OHGrunt 				; type 2 Grunt
>c79b	93 c6						.word 		OHElectrode 			; type 3 Electrode
>c79d	ee c3						.word 		OHHuman1 				; type 4-6 Humans
>c79f	f9 c3						.word 		OHHuman2
>c7a1	04 c4						.word 		OHHuman3
>c7a3	5d c4						.word 		OHHulk 					; type 7 Hulk
>c7a5	c7 c6						.word 		OHBrain 				; type 8 Brain
>c7a7	81 c4						.word 		OHSphere 				; type 9 Sphere
>c7a9	86 c5						.word 		OHQuark 				; type 10 Quark
>c7ab	5a c7						.word 		OHProg 					; type 11 Prog
>c7ad	49 c5						.word 		OHESpark 				; type 12 Enforcer Sparks.
>c7af	f8 c4						.word 		OHEnforcer 				; type 13 Enforcer
>c7b1	18 c6						.word 		OHShell 				; type 14 Shell
>c7b3	d3 c5						.word 		OHTank 					; type 15 Tank

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
