
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Sat Apr 27 17:47:10 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_GRUNT = 2
=3					TP_ELECTRODE = 3
=4					TP_MUM = 4
=5					TP_DAD = 5
=6					TP_CHILD = 6
=7					TP_HULK = 7
=8					TP_BRAIN = 8
=9					TP_SPHERE = 9
=10					TP_QUARK = 10
=11					TP_PROG = 11
=12					TP_ESPARK = 12
=13					TP_ENFORCER = 13
=14					TP_SHELL = 14
=15					TP_TANK = 15
=16					TP_EXPLODE = 16
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=7					OBH_RANDOM_MASK = 7 						; reduce random to mask
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_PROG = 22 								; Prog (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.
=$06					MSG_SHOT = $06 								; What to do when shot

;******  Return to file: main.asm

.c000					Start:
.c000	4c b9 c1	jmp $c1b9			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 45 c0	jmp $c045			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c d1 cb	jmp $cbd1			jmp 	MainGame 					; $C006 main loop code, speed A
.c009	4c 27 c3	jmp $c327			jmp 	ResetScore 					; $C009 reset the score.
.c00c	4c e4 c3	jmp $c3e4			jmp 	SetWave 					; $C00C New Wave A
.c040					Result:
>c040	00						.byte 	0
.c041					Lives:
>c041	03						.byte 	3
.c042					DScore:
>c042	00 00 00					.byte 	0,0,0

;******  Processing file: create.asm

.c045					CreateObjects:
.c045	e0 00		cpx #$00			cpx 	#0
.c047	f0 0a		beq $c053			beq 	_COExit
.c049	da		phx				phx
.c04a	48		pha				pha
.c04b	20 54 c0	jsr $c054			jsr 	CreateObject
.c04e	68		pla				pla
.c04f	fa		plx				plx
.c050	ca		dex				dex
.c051	d0 f2		bne $c045			bne 	CreateObjects
.c053					_COExit:
.c053	60		rts				rts
.c054					CreateObject:
.c054	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c056	a0 01		ldy #$01			ldy 	#1
.c058	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c05a	f0 18		beq $c074			beq 	_COLoop
.c05c	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c05e	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c060	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c062	f0 10		beq $c074			beq 	_COLoop
.c064	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c066	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c068	c9 07		cmp #$07			cmp 	#TP_CHILD+1
.c06a	b0 04		bcs $c070			bcs 	_CONotHuman
.c06c	c9 04		cmp #$04			cmp 	#TP_MUM
.c06e	b0 04		bcs $c074			bcs 	_COLoop
.c070					_CONotHuman:
.c070	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c072	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c074					_COLoop:
.c074	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c077	30 05		bmi $c07e			bmi 	_COFound
.c079	e8		inx				inx
.c07a	88		dey				dey
.c07b	d0 f7		bne $c074			bne 	_COLoop
.c07d	60		rts				rts  								; cannot create, exit.
.c07e					_COFound:
.c07e	8e 03 c1	stx $c103			stx 	NewObject 					; remember the new object
.c081	9e e8 e5	stz $e5e8,x			stz 	OBObjectData1,x 			; zero object OBObjectData1
.c084	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c087	0a		asl a				asl 	a 							; double -> Y
.c088	a8		tay				tay
.c089	b9 2e cc	lda $cc2e,y			lda 	HandlerTable,y  			; put the handler address in.
.c08c	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c08f	b9 2f cc	lda $cc2f,y			lda 	HandlerTable+1,y
.c092	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c095					_COPos1:
.c095	20 8f c2	jsr $c28f			jsr 	Random8Bit  				; value is 0-151
.c098	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c09a	b0 f9		bcs $c095			bcs 	_COPos1
.c09c	69 04		adc #$04			adc 	#PF_LEFT
.c09e	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c0a1					_COPos2:
.c0a1	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; value is 0-103
.c0a4	29 7f		and #$7f			and 	#$7F
.c0a6	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c0a8	b0 f7		bcs $c0a1			bcs 	_COPos2
.c0aa	69 04		adc #$04			adc 	#PF_TOP
.c0ac	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c0af	38		sec				sec   								; check Y centre offset
.c0b0	e9 34		sbc #$34			sbc 	#52
.c0b2	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0b5	c9 27		cmp #$27			cmp 	#39
.c0b7	b0 0d		bcs $c0c6			bcs 	_COIsOkay
.c0b9	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c0bc	38		sec				sec
.c0bd	e9 4b		sbc #$4b			sbc 	#75
.c0bf	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0c2	c9 37		cmp #$37			cmp 	#55
.c0c4	90 cf		bcc $c095			bcc 	_COPos1
.c0c6					_COIsOkay:
.c0c6	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c0c8	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c0cb	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c0ce	a9 ff		lda #$ff			lda 	#$FF
.c0d0	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c0d3	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c0d6	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c0d7	29 07		and #$07			and 	#7
.c0d9	1a		inc a				inc 	a
.c0da	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c0dd	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0e0	a9 01		lda #$01			lda 	#1
.c0e2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0e5	a9 0a		lda #$0a			lda 	#10
.c0e7	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0ea	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.c0ed	a9 01		lda #$01			lda 	#MSG_INIT
.c0ef	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c0f2	90 03		bcc $c0f7			bcc 	_1
.c0f4	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.c0f7					_1:
.c0f7	20 e4 c1	jsr $c1e4			jsr 	RedrawObject
.c0fa	60		rts				rts
.c0fb					_COAbsolute:
.c0fb	c9 00		cmp #$00			cmp 	#0
.c0fd	10 03		bpl $c102			bpl 	_COAExit
.c0ff	49 ff		eor #$ff			eor 	#$FF
.c101	1a		inc a				inc 	a
.c102					_COAExit:
.c102	60		rts				rts
.c103					NewObject:
>c103	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c104					MoveObjects:
.c104	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c106					_MOLoop:
.c106	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c109	30 03		bmi $c10e			bmi 	_MONoObject
.c10b	20 14 c1	jsr $c114			jsr 	_MoveOneObject
.c10e					_MONoObject:
.c10e	e8		inx				inx
.c10f	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c111	d0 f3		bne $c106			bne 	_MOLoop
.c113	60		rts				rts  								; cannot create, exit.
.c114					_MoveOneObject:
.c114	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c117	d0 5f		bne $c178			bne 	_MONotMove
.c119	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c11c	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c11f	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c122	d0 10		bne $c134			bne 	_MONoProcess
.c124	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c127	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c12a	a9 03		lda #$03			lda 	#MSG_CONTROL
.c12c	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c12f	90 03		bcc $c134			bcc 	_1
.c131	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.c134					_1:
.c134					_MONoProcess:
.c134	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c137	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c13a	4a		lsr a				lsr 	a
.c13b	90 01		bcc $c13e			bcc 	_MONotLeft
.c13d	88		dey				dey
.c13e					_MONotLeft:
.c13e	4a		lsr a				lsr 	a
.c13f	90 01		bcc $c142			bcc 	_MONotRight
.c141	c8		iny				iny
.c142					_MONotRight:
.c142	5a		phy				phy 								; new Y position on stack
.c143	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c146	4a		lsr a				lsr 	a
.c147	90 01		bcc $c14a			bcc 	_MONotUp
.c149	88		dey				dey
.c14a					_MONotUp:
.c14a	4a		lsr a				lsr 	a
.c14b	90 01		bcc $c14e			bcc 	_MONotDown
.c14d	c8		iny				iny
.c14e					_MONotDown:
.c14e	68		pla				pla 								; (A,Y) are new coordinates.
.c14f	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c151	90 26		bcc $c179			bcc 	_MOHitWall
.c153	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c155	b0 22		bcs $c179			bcs 	_MOHitWall
.c157	c0 04		cpy #$04			cpy 	#PF_TOP
.c159	90 1e		bcc $c179			bcc 	_MOHitWall
.c15b	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c15d	b0 1a		bcs $c179			bcs 	_MOHitWall
.c15f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c162	98		tya				tya
.c163	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c166	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c168	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c16b	90 03		bcc $c170			bcc 	_1
.c16d	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.c170					_1:
.c170	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c173	30 03		bmi $c178			bmi 	_MONotMove
.c175	20 e4 c1	jsr $c1e4			jsr 	RedrawObject 				; repaint.
.c178					_MONotMove:
.c178	60		rts				rts
.c179					_MOHitWall:
.c179	a9 04		lda #$04			lda 	#MSG_HITWALL
.c17b	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c17e	90 03		bcc $c183			bcc 	_1
.c180	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.c183					_1:
.c183	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c184					AnimatePalette:
.c184	ad 00 ff	lda $ff00			lda 	APICommand
.c187	d0 fb		bne $c184			bne 	AnimatePalette
.c189	ee b8 c1	inc $c1b8			inc 	_APCount
.c18c	ad b8 c1	lda $c1b8			lda 	_APCount
.c18f	4a		lsr a				lsr 	a
.c190	4a		lsr a				lsr 	a
.c191	a0 01		ldy #$01			ldy 	#1
.c193	20 ac c1	jsr $c1ac			jsr 	_APBit
.c196	20 ac c1	jsr $c1ac			jsr 	_APBit
.c199	20 ac c1	jsr $c1ac			jsr 	_APBit
.c19c	a9 e0		lda #$e0			lda 	#14*16
.c19e	8d 04 ff	sta $ff04			sta 	APIParams
.c1a1	a9 20		lda #$20			lda 	#32
.c1a3	8d 01 ff	sta $ff01			sta 	APIFunction
.c1a6	a9 05		lda #$05			lda 	#5
.c1a8	8d 00 ff	sta $ff00			sta 	APICommand
.c1ab	60		rts				rts
.c1ac					_APBit:
.c1ac	4a		lsr a				lsr 	a
.c1ad	48		pha				pha
.c1ae	a9 00		lda #$00			lda 	#0
.c1b0	e9 00		sbc #$00			sbc 	#0
.c1b2	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c1b5	c8		iny				iny
.c1b6	68		pla				pla
.c1b7	60		rts				rts
.c1b8					_APCount:
>c1b8	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c1b9					ResetObjects:
.c1b9	a2 00		ldx #$00			ldx 	#0
.c1bb					_RSLoop:
.c1bb	a9 ff		lda #$ff			lda 	#$FF
.c1bd	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1c0	e8		inx				inx
.c1c1	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c1c3	d0 f6		bne $c1bb			bne 	_RSLoop
.c1c5	9c 54 cb	stz $cb54			stz 	CollectCount
.c1c8	60		rts				rts
.c1c9					KillObject:
.c1c9	20 36 c4	jsr $c436			jsr 	CensusUpdate 				; update the census.
.c1cc	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1cf	d0 f8		bne $c1c9			bne 	KillObject
.c1d1	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c1d3	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1d6	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c1d9	a9 03		lda #$03			lda 	#3  						; and hide it.
.c1db	8d 01 ff	sta $ff01			sta 	APIFunction
.c1de	a9 06		lda #$06			lda 	#6
.c1e0	8d 00 ff	sta $ff00			sta 	APICommand
.c1e3	60		rts				rts
.c1e4					RedrawObject:
.c1e4	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1e7	d0 fb		bne $c1e4			bne 	RedrawObject
.c1e9	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1ec	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1ef	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1f2	0a		asl a				asl 	a
.c1f3	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1f6	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1f9	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1fc	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1ff	0a		asl a				asl 	a
.c200	69 08		adc #$08			adc 	#8 							; allow for top area
.c202	8d 07 ff	sta $ff07			sta 	APIParams+3
.c205	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c208	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c20b	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c20d	f0 0e		beq $c21d			beq 	_ROUseSprite2
.c20f	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c211	d0 03		bne $c216			bne 	_ROHasHorizonMovement
.c213	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c216					_ROHasHorizonMovement:
.c216	98		tya				tya 								; put bit 1 into carry.
.c217	4a		lsr a				lsr 	a
.c218	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c21b	90 03		bcc $c220			bcc 	_ROUseSprite
.c21d					_ROUseSprite2:
.c21d	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c220					_ROUseSprite:
.c220	8d 09 ff	sta $ff09			sta 	APIParams+5
.c223	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c226	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c228	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c22b					_RONotLeft:
.c22b	a9 02		lda #$02			lda 	#MSG_REPAINT
.c22d	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c230	90 03		bcc $c235			bcc 	_1
.c232	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.c235					_1:
.c235	a9 02		lda #$02			lda 	#2  						; and draw it.
.c237	8d 01 ff	sta $ff01			sta 	APIFunction
.c23a	a9 06		lda #$06			lda 	#6
.c23c	8d 00 ff	sta $ff00			sta 	APICommand
.c23f	60		rts				rts
.c240					ChooseRandomDirection:
.c240	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; get valid random direction
.c243	29 0f		and #$0f			and 	#15
.c245	f0 f9		beq $c240			beq 	ChooseRandomDirection 		; stationary (0)
.c247	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c24a	29 03		and #$03			and 	#3 							; check LR not both on.
.c24c	c9 03		cmp #$03			cmp 	#3
.c24e	f0 f0		beq $c240			beq 	ChooseRandomDirection
.c250	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c253	29 0c		and #$0c			and 	#12
.c255	c9 0c		cmp #$0c			cmp 	#12
.c257	f0 e7		beq $c240			beq 	ChooseRandomDirection
.c259	60		rts				rts
.c25a					NoControlEffect:
.c25a	60		rts				rts
.c25b					ChaseObject:
.c25b	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c25e	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c261	20 7a c2	jsr $c27a			jsr 	_ChaseCalculate
.c264	8d 79 c2	sta $c279			sta 	_ChaseTemp
.c267	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c26a	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c26d	20 7a c2	jsr $c27a			jsr 	_ChaseCalculate
.c270	0a		asl a				asl 	a
.c271	0a		asl a				asl 	a
.c272	0d 79 c2	ora $c279			ora 	_ChaseTemp
.c275	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c278	60		rts				rts
.c279					_ChaseTemp:
>c279	00						.byte 	0
.c27a					_ChaseCalculate:
.c27a	f0 08		beq $c284			beq 	_CCNoMove
.c27c	90 03		bcc $c281			bcc 	_CCMoveRight
.c27e	a9 02		lda #$02			lda 	#2
.c280	60		rts				rts
.c281					_CCMoveRight:
.c281	a9 01		lda #$01			lda 	#1
.c283	60		rts				rts
.c284					_CCNoMove:
.c284	a9 00		lda #$00			lda 	#0
.c286	60		rts				rts
.c287					ChasePlayer:
.c287	5a		phy				phy
.c288	a0 00		ldy #$00			ldy 	#0
.c28a	20 5b c2	jsr $c25b			jsr 	ChaseObject
.c28d	7a		ply				ply
.c28e	60		rts				rts
.c28f					Random8Bit:
.c28f	5a		phy				phy
.c290	a0 08		ldy #$08			ldy 	#8
.c292	ad a5 c2	lda $c2a5			lda 	_R8SeedValue+0
.c295					_R8RandomLoop
.c295	0a		asl a				asl     a
.c296	2e a6 c2	rol $c2a6			rol 	_R8SeedValue+1
.c299	90 02		bcc $c29d			bcc 	_R8NotSet
.c29b	49 39		eor #$39			eor 	#$39
.c29d					_R8NotSet:
.c29d	88		dey				dey
.c29e	d0 f5		bne $c295			bne 	_R8RandomLoop
.c2a0	8d a5 c2	sta $c2a5			sta 	_R8SeedValue+0
.c2a3	7a		ply				ply
.c2a4	60		rts				rts
.c2a5					_R8SeedValue
>c2a5	cd ab						.word 	$ABCD
.c2a7					SendObjectMessage:
.c2a7	48		pha				pha
.c2a8	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c2ab	8d b6 c2	sta $c2b6			sta 	_SMCall+1
.c2ae	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c2b1	8d b7 c2	sta $c2b7			sta 	_SMCall+2
.c2b4	68		pla				pla
.c2b5					_SMCall:
.c2b5	4c 00 00	jmp $0000			jmp 	$0000
.c2b8					SetObjectGraphic:
.c2b8	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c2bb	1a		inc a				inc 	a
.c2bc	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c2bf	60		rts				rts
.c2c0					CreateSingleObject:
.c2c0	da		phx				phx 								; create player missile object.
.c2c1	5a		phy				phy
.c2c2	20 54 c0	jsr $c054			jsr 	CreateObject
.c2c5	7a		ply				ply
.c2c6	fa		plx				plx
.c2c7	60		rts				rts
.c2c8					CopyStartPosition:
.c2c8	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2cb	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c2ce	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2d1	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2d4	60		rts				rts
.c2d5					ChasePlayerY:
.c2d5	da		phx				phx
.c2d6	98		tya				tya
.c2d7	aa		tax				tax
.c2d8	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c2db	fa		plx				plx
.c2dc	60		rts				rts
.c2dd					CheckCollision:
.c2dd	38		sec				sec
.c2de	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2e1	f9 6c e0	sbc $e06c,y			sbc 	OBXPos,y
.c2e4	10 03		bpl $c2e9			bpl 	_1
.c2e6	49 ff		eor #$ff			eor 	#$FF
.c2e8	1a		inc a				inc 	a
.c2e9					_1
.c2e9	c9 04		cmp #$04			cmp 	#4
.c2eb	b0 11		bcs $c2fe			bcs 	_CCFail
.c2ed	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2f0	f9 d8 e0	sbc $e0d8,y			sbc 	OBYPos,y
.c2f3	10 03		bpl $c2f8			bpl 	_1
.c2f5	49 ff		eor #$ff			eor 	#$FF
.c2f7	1a		inc a				inc 	a
.c2f8					_1
.c2f8	c9 04		cmp #$04			cmp 	#4
.c2fa	b0 02		bcs $c2fe			bcs 	_CCFail
.c2fc	38		sec				sec
.c2fd	60		rts				rts
.c2fe					_CCFail:
.c2fe	18		clc				clc
.c2ff	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: score.asm

.c300					AddYAToScore:
.c300	da		phx				phx
.c301	18		clc				clc
.c302	f8		sed				sed
.c303	6d 42 c0	adc $c042			adc 	DScore+0
.c306	8d 42 c0	sta $c042			sta 	DScore+0
.c309	98		tya				tya
.c30a	6d 43 c0	adc $c043			adc 	DScore+1
.c30d	8d 43 c0	sta $c043			sta 	DScore+1
.c310	a9 00		lda #$00			lda 	#0
.c312	6d 44 c0	adc $c044			adc 	DScore+2
.c315	8d 44 c0	sta $c044			sta 	DScore+2
.c318	d8		cld				cld
.c319	4a		lsr a				lsr 	a 							; every 20k it's easier. So sue me.
.c31a	cd d9 c3	cmp $c3d9			cmp 	LastScore20k
.c31d	8d d9 c3	sta $c3d9			sta 	LastScore20k
.c320	f0 03		beq $c325			beq 	_NoExtraLife
.c322	ee 41 c0	inc $c041			inc 	Lives
.c325					_NoExtraLife:
.c325	fa		plx				plx
.c326	60		rts				rts
.c327					ResetScore:
.c327	9c 42 c0	stz $c042			stz 	DScore+0
.c32a	9c 43 c0	stz $c043			stz 	DScore+1
.c32d	9c 44 c0	stz $c044			stz 	DScore+2
.c330	9c d9 c3	stz $c3d9			stz 	LastScore20k
.c333	a9 03		lda #$03			lda 	#3
.c335	8d 41 c0	sta $c041			sta 	Lives
.c338	20 6a c3	jsr $c36a			jsr 	DrawScore
.c33b	60		rts				rts
.c33c					DrawWave:
.c33c	a2 18		ldx #$18			ldx 	#24
.c33e	a0 1d		ldy #$1d			ldy 	#29
.c340	20 a2 c3	jsr $c3a2			jsr 	MoveCursor
.c343	a9 81		lda #$81			lda 	#$81
.c345	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c348	20 61 c3	jsr $c361			jsr 	RSPrintWave
.c34b	a9 82		lda #$82			lda 	#$82
.c34d	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c350	a9 20		lda #$20			lda 	#32
.c352	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c355	a2 eb		ldx #$eb			ldx 	#235
.c357					_RSPrintWave:
.c357	8a		txa				txa
.c358	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c35b	e8		inx				inx
.c35c	e0 ef		cpx #$ef			cpx 	#239
.c35e	d0 f7		bne $c357			bne 	_RSPrintWave
.c360	60		rts				rts
.c361					RSPrintWave:
.c361	ad d8 c3	lda $c3d8			lda 	Wave
.c364	c9 10		cmp #$10			cmp 	#$10
.c366	b0 50		bcs $c3b8			bcs 	PrintByte
.c368	80 57		bra $c3c1			bra 	PrintNibble
.c36a					DrawScore:
.c36a	a2 04		ldx #$04			ldx 	#4
.c36c	a0 00		ldy #$00			ldy 	#0
.c36e	20 a2 c3	jsr $c3a2			jsr 	MoveCursor
.c371	a9 86		lda #$86			lda 	#$86
.c373	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c376	ad 44 c0	lda $c044			lda 	DScore+2
.c379	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c37c	ad 43 c0	lda $c043			lda 	DScore+1
.c37f	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c382	ad 42 c0	lda $c042			lda 	DScore+0
.c385	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c388	a9 20		lda #$20			lda 	#32
.c38a	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c38d	a9 83		lda #$83			lda		#$83
.c38f	ae 41 c0	ldx $c041			ldx 	Lives
.c392	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c395					_DSLoop:
.c395	e0 00		cpx #$00			cpx 	#0
.c397	f0 08		beq $c3a1			beq 	_DSExit
.c399	ca		dex				dex
.c39a	a9 ea		lda #$ea			lda 	#234
.c39c	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c39f	80 f4		bra $c395			bra 	_DSLoop
.c3a1					_DSExit:
.c3a1	60		rts				rts
.c3a2					MoveCursor:
.c3a2	ad 00 ff	lda $ff00			lda 	APICommand
.c3a5	d0 c3		bne $c36a			bne 	DrawScore
.c3a7	8c 05 ff	sty $ff05			sty 	APIParams+1
.c3aa	8e 04 ff	stx $ff04			stx 	APIParams+0
.c3ad	a9 07		lda #$07			lda 	#7
.c3af	8d 01 ff	sta $ff01			sta 	APIFunction
.c3b2	a9 02		lda #$02			lda 	#2
.c3b4	8d 00 ff	sta $ff00			sta 	APICommand
.c3b7	60		rts				rts
.c3b8					PrintByte:
.c3b8	48		pha				pha
.c3b9	4a		lsr a				lsr 	a
.c3ba	4a		lsr a				lsr 	a
.c3bb	4a		lsr a				lsr 	a
.c3bc	4a		lsr a				lsr 	a
.c3bd	20 c1 c3	jsr $c3c1			jsr 	PrintNibble
.c3c0	68		pla				pla
.c3c1					PrintNibble:
.c3c1	29 0f		and #$0f			and 	#15
.c3c3	09 e0		ora #$e0			ora 	#224
.c3c5					PrintCharacter:
.c3c5	ac 00 ff	ldy $ff00			ldy 	APICommand
.c3c8	d0 fb		bne $c3c5			bne 	PrintCharacter
.c3ca	8d 04 ff	sta $ff04			sta 	APIParams+0
.c3cd	a9 06		lda #$06			lda 	#6
.c3cf	8d 01 ff	sta $ff01			sta 	APIFunction
.c3d2	a9 02		lda #$02			lda 	#2
.c3d4	8d 00 ff	sta $ff00			sta 	APICommand
.c3d7	60		rts				rts
.c3d8					Wave:
>c3d8	00						.byte 	0
.c3d9					LastScore20k:
>c3d9	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: census.asm

.c3da					CurrentLevel:
>c3da	00 00 00 00 00 00 00 01			.byte 	0,0,0,0,0,0,0,1,0
>c3e2	00
.c3e3					WaveIndex:
>c3e3	00					.byte 	0
.c3e4					SetWave:
.c3e4	8d d8 c3	sta $c3d8			sta 	Wave
.c3e7	c9 00		cmp #$00			cmp 	#0 							; if 0, use the level data
.c3e9	f0 33		beq $c41e			beq 	_SWExit
.c3eb	3a		dec a				dec 	a 							; Wave starts from zero
.c3ec	a0 28		ldy #$28			ldy 	#40 						; this is the speed.
.c3ee					_SWGetSet:
.c3ee	c9 28		cmp #$28			cmp 	#40 						; is it in range 0..39 (e.g. waves 1-40)
.c3f0	90 11		bcc $c403			bcc 	_SWHaveWave
.c3f2	38		sec				sec  								; effectively doing mod 40 here.
.c3f3	e9 28		sbc #$28			sbc 	#40
.c3f5	88		dey				dey 								; speed up.
.c3f6	88		dey				dey
.c3f7	88		dey				dey
.c3f8	88		dey				dey
.c3f9	88		dey				dey
.c3fa	88		dey				dey
.c3fb	88		dey				dey
.c3fc	88		dey				dey
.c3fd	10 ef		bpl $c3ee			bpl 	_SWGetSet 					; no borrow
.c3ff	a0 00		ldy #$00			ldy 	#0 							; as fast as we can go
.c401	80 eb		bra $c3ee			bra 	_SWGetSet
.c403					_SWHaveWave:
.c403	8d e3 c3	sta $c3e3			sta 	WaveIndex					; 0-39 identifying the wave.
.c406	8c 2d cc	sty $cc2d			sty 	MoveSpeed 					; the move speed.
.c409	0a		asl a				asl 	a 							; multiply by 9.
.c40a	0a		asl a				asl 	a
.c40b	0a		asl a				asl 	a
.c40c	6d e3 c3	adc $c3e3			adc 	WaveIndex
.c40f	aa		tax				tax
.c410	a0 00		ldy #$00			ldy 	#0 							; copy the wave data in
.c412					_SWCopyCensus:
.c412	bd 48 c4	lda $c448,x			lda 	LevelData,x
.c415	99 da c3	sta $c3da,y			sta 	CurrentLevel,y
.c418	e8		inx				inx
.c419	c8		iny				iny
.c41a	c0 09		cpy #$09			cpy 	#9
.c41c	d0 f4		bne $c412			bne 	_SWCopyCensus
.c41e					_SWExit:
.c41e	60		rts				rts
.c41f					CreateCurrentObjects:
.c41f	a0 00		ldy #$00			ldy 	#0
.c421					_CreateLoop1:
.c421	b9 da c3	lda $c3da,y			lda 	CurrentLevel,y 				; how many of these
.c424	aa		tax				tax 								; into X
.c425	98		tya				tya 								; get object ID
.c426	18		clc				clc
.c427	69 02		adc #$02			adc 	#TP_GRUNT
.c429	da		phx				phx
.c42a	5a		phy				phy
.c42b	20 45 c0	jsr $c045			jsr 	CreateObjects
.c42e	7a		ply				ply
.c42f	fa		plx				plx
.c430	c8		iny				iny 								; do all 9 types
.c431	c0 09		cpy #$09			cpy 	#9
.c433	d0 ec		bne $c421			bne 	_CreateLoop1
.c435	60		rts				rts
.c436					CensusUpdate:
.c436	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; get the object ID
.c439	29 1f		and #$1f			and 	#$1F
.c43b	3a		dec a				dec 	a 							; in range for census objects 2-11
.c43c	3a		dec a				dec 	a
.c43d	c9 09		cmp #$09			cmp 	#9
.c43f	b0 06		bcs $c447			bcs 	_UCExit 					; not a census object
.c441	da		phx				phx 								; decrement that count so if we restart it is right
.c442	aa		tax				tax
.c443	de da c3	dec $c3da,x			dec 	CurrentLevel,x
.c446	fa		plx				plx
.c447					_UCExit:
.c447	60		rts				rts
.c448					LevelData:
>c448	0f 05 01 01 00 00 00 00			.byte	15,5,1,1,0,0,0,0,0
>c450	00
>c451	11 0f 01 01 01 05 00 01			.byte	17,15,1,1,1,5,0,1,0
>c459	00
>c45a	16 19 02 02 02 06 00 03			.byte	22,25,2,2,2,6,0,3,0
>c462	00
>c463	22 19 02 02 02 07 00 04			.byte	34,25,2,2,2,7,0,4,0
>c46b	00
>c46c	14 14 0f 00 01 00 0f 01			.byte	20,20,15,0,1,0,15,1,0
>c474	00
>c475	20 19 03 03 03 07 00 04			.byte	32,25,3,3,3,7,0,4,0
>c47d	00
>c47e	00 00 04 04 04 0c 00 00			.byte	0,0,4,4,4,12,0,0,10
>c486	0a
>c487	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c48f	00
>c490	3c 00 03 03 03 04 00 05			.byte	60,0,3,3,3,4,0,5,0
>c498	00
>c499	19 14 00 16 00 00 14 01			.byte	25,20,0,22,0,0,20,1,0
>c4a1	00
>c4a2	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4aa	00
>c4ab	00 00 03 03 03 0d 00 00			.byte	0,0,3,3,3,13,0,0,12
>c4b3	0c
>c4b4	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4bc	00
>c4bd	1b 05 05 05 05 14 00 02			.byte	27,5,5,5,5,20,0,2,0
>c4c5	00
>c4c6	19 14 00 00 16 02 14 01			.byte	25,20,0,0,22,2,20,1,0
>c4ce	00
>c4cf	23 19 03 03 03 03 00 05			.byte	35,25,3,3,3,3,0,5,0
>c4d7	00
>c4d8	00 00 03 03 03 0e 00 00			.byte	0,0,3,3,3,14,0,0,12
>c4e0	0c
>c4e1	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4e9	00
>c4ea	46 00 03 03 03 03 00 05			.byte	70,0,3,3,3,3,0,5,0
>c4f2	00
>c4f3	19 14 08 08 08 02 14 02			.byte	25,20,8,8,8,2,20,2,0
>c4fb	00
>c4fc	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c504	00
>c505	00 00 03 03 03 0f 00 00			.byte	0,0,3,3,3,15,0,0,12
>c50d	0c
>c50e	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c516	00
>c517	00 00 03 03 03 0d 00 06			.byte	0,0,3,3,3,13,0,6,7
>c51f	07
>c520	19 14 19 00 01 01 15 01			.byte	25,20,25,0,1,1,21,1,0
>c528	00
>c529	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c531	00
>c532	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,12
>c53a	0c
>c53b	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c543	01
>c544	4b 00 03 03 03 04 00 05			.byte	75,0,3,3,3,4,0,5,1
>c54c	01
>c54d	19 14 00 19 00 01 16 01			.byte	25,20,0,25,0,1,22,1,1
>c555	01
>c556	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c55e	01
>c55f	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,13
>c567	0d
>c568	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c570	01
>c571	1e 00 03 03 03 19 00 02			.byte	30,0,3,3,3,25,0,2,2
>c579	02
>c57a	1b 0f 00 00 19 02 17 01			.byte	27,15,0,0,25,2,23,1,2
>c582	02
>c583	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c58b	02
>c58c	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,14
>c594	0e
>c595	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c59d	02
>c59e	50 00 03 03 03 06 00 05			.byte	80,0,3,3,3,6,0,5,1
>c5a6	01
>c5a7	1e 0f 0a 0a 0a 02 19 01			.byte	30,15,10,10,10,2,25,1,1
>c5af	01

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c5b0					DefaultHandler:
.c5b0	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c5b2	d0 05		bne $c5b9			bne 	_1
.c5b4	20 cd c5	jsr $c5cd			jsr 	DefaultControl
.c5b7	18		clc				clc
.c5b8	60		rts				rts
.c5b9					_1:
.c5b9	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c5bb	d0 05		bne $c5c2			bne 	_1
.c5bd	20 d0 c5	jsr $c5d0			jsr 	DefaultHitWall
.c5c0	18		clc				clc
.c5c1	60		rts				rts
.c5c2					_1:
.c5c2	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c5c4	d0 05		bne $c5cb			bne 	_1
.c5c6	20 d3 c5	jsr $c5d3			jsr 	DefaultShot
.c5c9	18		clc				clc
.c5ca	60		rts				rts
.c5cb					_1:
.c5cb	38		sec				sec
.c5cc	60		rts				rts
.c5cd					DefaultControl:
.c5cd	4c 40 c2	jmp $c240			jmp 	ChooseRandomDirection
.c5d0					DefaultHitWall:
.c5d0	4c 40 c2	jmp $c240			jmp 	ChooseRandomDirection
.c5d3					DefaultShot:
.c5d3	a9 10		lda #$10			lda 	#TP_EXPLODE 				; spawn an explosion
.c5d5	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c5d8	ac 03 c1	ldy $c103			ldy 	NewObject
.c5db	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c5de	20 e2 c5	jsr $c5e2			jsr 	RemoveAndScoreObject 		; remove object and score it
.c5e1	60		rts				rts
.c5e2					RemoveAndScoreObject:
.c5e2	bd 10 e5	lda $e510,x			lda 	OBScoreLow,x 				; get score into YA
.c5e5	bc 7c e5	ldy $e57c,x			ldy 	OBScoreHigh,x
.c5e8	da		phx				phx
.c5e9	20 00 c3	jsr $c300			jsr 	AddYAToScore 				; add to score
.c5ec	fa		plx				plx
.c5ed	4c c9 c1	jmp $c1c9			jmp 	KillObject 					; delete the object

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c5f0					OHPlayer:
.c5f0	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5f2	d0 05		bne $c5f9			bne 	_1
.c5f4	20 0d c6	jsr $c60d			jsr 	OHPInitHandler
.c5f7	18		clc				clc
.c5f8	60		rts				rts
.c5f9					_1:
.c5f9	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c5fb	d0 05		bne $c602			bne 	_1
.c5fd	20 22 c6	jsr $c622			jsr 	OHPRepaintHandler
.c600	18		clc				clc
.c601	60		rts				rts
.c602					_1:
.c602	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c604	d0 05		bne $c60b			bne 	_1
.c606	20 51 c6	jsr $c651			jsr 	OHPControlHandler
.c609	18		clc				clc
.c60a	60		rts				rts
.c60b					_1:
.c60b	38		sec				sec
.c60c	60		rts				rts
.c60d					OHPInitHandler:
.c60d	a9 50		lda #$50			lda 	#160/2
.c60f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c612	a9 40		lda #$40			lda 	#128/2
.c614	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c617	a9 02		lda #$02			lda 	#2
.c619	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c61c	a9 01		lda #$01			lda 	#1
.c61e	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c621	60		rts				rts
.c622					OHPRepaintHandler:
.c622	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c625	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c628	29 03		and #$03			and 	#3
.c62a	d0 03		bne $c62f			bne 	_OHPUseVertical
.c62c	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c62f					_OHPUseVertical:
.c62f	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c632	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c635	98		tya				tya
.c636	29 10		and #$10			and 	#16
.c638	f0 03		beq $c63d			beq 	_OHPNoAlternate
.c63a	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c63d					_OHPNoAlternate:
.c63d	60		rts				rts
.c63e					OHPSetGraphic:
.c63e	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c641	29 03		and #$03			and 	#3
.c643	d0 06		bne $c64b			bne 	_OHPRHorizontal
.c645	a9 02		lda #$02			lda 	#GR_PLAYERV
.c647	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c64a	60		rts				rts
.c64b					_OHPRHorizontal:
.c64b	a9 00		lda #$00			lda 	#GR_PLAYERH
.c64d	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c650	60		rts				rts
.c651					OHPControlHandler:
.c651	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c654	d0 fb		bne $c651			bne 	OHPControlHandler
.c656	a9 01		lda #$01			lda 	#1  						; and draw it.
.c658	8d 01 ff	sta $ff01			sta 	APIFunction
.c65b	a9 07		lda #$07			lda 	#7
.c65d	8d 00 ff	sta $ff00			sta 	APICommand
.c660					_OHPWait
.c660	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c663	d0 fb		bne $c660			bne 	_OHPWait
.c665	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c668	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c66a	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c66d	f0 0d		beq $c67c			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c66f	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c672	29 f0		and #$f0			and 	#$F0
.c674	d0 06		bne $c67c			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c676	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c679	8d 8f c6	sta $c68f			sta 	OHPLastDirection
.c67c					_OHPNoSetLast:
.c67c	ee 90 c6	inc $c690			inc 	OHPFireCount 				; fire one time in 15
.c67f	ad 90 c6	lda $c690			lda 	OHPFireCount
.c682	29 0f		and #$0f			and 	#15
.c684	d0 05		bne $c68b			bne 	_OHPNoFire
.c686	a9 01		lda #$01			lda 	#1
.c688	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c68b					_OHPNoFire:
.c68b	20 3e c6	jsr $c63e			jsr 	OHPSetGraphic
.c68e	60		rts				rts
.c68f					OHPLastDirection:
>c68f	02						.byte 	2
.c690					OHPFireCount:
>c690	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c691					OHMissile:
.c691	c9 01		cmp #$01			cmp 	#MSG_INIT
.c693	d0 05		bne $c69a			bne 	_1
.c695	20 c0 c6	jsr $c6c0			jsr 	OHMInitHandler
.c698	18		clc				clc
.c699	60		rts				rts
.c69a					_1:
.c69a	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c69c	d0 05		bne $c6a3			bne 	_1
.c69e	20 dd c6	jsr $c6dd			jsr 	OHMRepaintHandler
.c6a1	18		clc				clc
.c6a2	60		rts				rts
.c6a3					_1:
.c6a3	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c6a5	d0 05		bne $c6ac			bne 	_1
.c6a7	20 fd c6	jsr $c6fd			jsr 	OHMControl
.c6aa	18		clc				clc
.c6ab	60		rts				rts
.c6ac					_1:
.c6ac	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c6ae	d0 05		bne $c6b5			bne 	_1
.c6b0	20 07 c7	jsr $c707			jsr 	OHMHitWall
.c6b3	18		clc				clc
.c6b4	60		rts				rts
.c6b5					_1:
.c6b5	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c6b7	d0 05		bne $c6be			bne 	_1
.c6b9	20 fe c6	jsr $c6fe			jsr 	OHMOnMove
.c6bc	18		clc				clc
.c6bd	60		rts				rts
.c6be					_1:
.c6be	38		sec				sec
.c6bf	60		rts				rts
.c6c0					OHMInitHandler:
.c6c0	a9 01		lda #$01			lda 	#1
.c6c2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c6c5	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c6c8	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c6cb	ad d8 e0	lda $e0d8			lda 	OBYPos
.c6ce	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c6d1	ad 8f c6	lda $c68f			lda 	OHPLastDirection 			; copy direction
.c6d4	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c6d7	a9 03		lda #$03			lda 	#3  						; stops collision testing straight after fire.
.c6d9	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c6dc	60		rts				rts
.c6dd					OHMRepaintHandler:
.c6dd	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c6e0	b9 ed c6	lda $c6ed,y			lda 	OHMGraphic,y 				; set graphic.
.c6e3	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c6e6	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c6e9	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c6ec	60		rts				rts
.c6ed					OHMGraphic:
>c6ed	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c6f1	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c6f5	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c6f9	00 00 00 00					.byte 	0,0,0,0
.c6fd					OHMControl:
.c6fd	60		rts				rts
.c6fe					OHMOnMove:
.c6fe	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c701	f0 03		beq $c706			beq 	_OHMExit
.c703	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c706					_OHMExit:
.c706	60		rts				rts
.c707					OHMHitWall:
.c707	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c70a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c70b					OHHuman1:
.c70b	c9 01		cmp #$01			cmp 	#MSG_INIT
.c70d	d0 05		bne $c714			bne 	_1
.c70f	20 37 c7	jsr $c737			jsr 	OHHInitHandler1
.c712	18		clc				clc
.c713	60		rts				rts
.c714					_1:
.c714	38		sec				sec
.c715	60		rts				rts
.c716					OHHuman2:
.c716	c9 01		cmp #$01			cmp 	#MSG_INIT
.c718	d0 05		bne $c71f			bne 	_1
.c71a	20 3e c7	jsr $c73e			jsr 	OHHInitHandler2
.c71d	18		clc				clc
.c71e	60		rts				rts
.c71f					_1:
.c71f	38		sec				sec
.c720	60		rts				rts
.c721					OHHuman3:
.c721	c9 01		cmp #$01			cmp 	#MSG_INIT
.c723	d0 05		bne $c72a			bne 	_1
.c725	20 45 c7	jsr $c745			jsr 	OHHInitHandler3
.c728	18		clc				clc
.c729	60		rts				rts
.c72a					_1:
.c72a	38		sec				sec
.c72b	60		rts				rts
.c72c					OHHInitHandlerMain:
.c72c	a9 1e		lda #$1e			lda 	#30
.c72e	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c731	a9 0f		lda #$0f			lda 	#15
.c733	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c736	60		rts				rts
.c737					OHHInitHandler1:
.c737	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c739	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c73c	80 ee		bra $c72c			bra 	OHHInitHandlerMain
.c73e					OHHInitHandler2:
.c73e	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c740	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c743	80 e7		bra $c72c			bra 	OHHInitHandlerMain
.c745					OHHInitHandler3:
.c745	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c747	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c74a	80 e0		bra $c72c			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c74c					OHGrunt:
.c74c	c9 01		cmp #$01			cmp 	#MSG_INIT
.c74e	d0 05		bne $c755			bne 	_1
.c750	20 60 c7	jsr $c760			jsr 	OHGInitHandler
.c753	18		clc				clc
.c754	60		rts				rts
.c755					_1:
.c755	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c757	d0 05		bne $c75e			bne 	_1
.c759	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c75c	18		clc				clc
.c75d	60		rts				rts
.c75e					_1:
.c75e	38		sec				sec
.c75f	60		rts				rts
.c760					OHGInitHandler:
.c760	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c762	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c765	a9 20		lda #$20			lda 	#32
.c767	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c76a	a9 01		lda #$01			lda 	#1
.c76c	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c76f	a9 00		lda #$00			lda 	#($100 & 255)
.c771	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c774	a9 01		lda #$01			lda 	#($100 >> 8)
.c776	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c779	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c77a					OHHulk:
.c77a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c77c	d0 05		bne $c783			bne 	_1
.c77e	20 97 c7	jsr $c797			jsr 	OHHUInitHandler
.c781	18		clc				clc
.c782	60		rts				rts
.c783					_1:
.c783	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c785	d0 05		bne $c78c			bne 	_1
.c787	20 9c c7	jsr $c79c			jsr 	OHHUControl
.c78a	18		clc				clc
.c78b	60		rts				rts
.c78c					_1:
.c78c	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c78e	d0 05		bne $c795			bne 	_1
.c790	20 aa c7	jsr $c7aa			jsr 	OHHUOnHit
.c793	18		clc				clc
.c794	60		rts				rts
.c795					_1:
.c795	38		sec				sec
.c796	60		rts				rts
.c797					OHHUInitHandler:
.c797	a9 0a		lda #$0a			lda 	#GR_HULK
.c799	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c79c					OHHUControl:
.c79c	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c79f	a9 40		lda #$40			lda 	#64
.c7a1	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7a4	a9 01		lda #$01			lda 	#1
.c7a6	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7a9	60		rts				rts
.c7aa					OHHUOnHit:
.c7aa	b9 1c e2	lda $e21c,y			lda 	OBDirection,y
.c7ad	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c7b0	a9 07		lda #$07			lda 	#7
.c7b2	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7b5	a9 03		lda #$03			lda 	#3
.c7b7	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7ba	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c7bb					OHSphere:
.c7bb	c9 01		cmp #$01			cmp 	#MSG_INIT
.c7bd	d0 05		bne $c7c4			bne 	_1
.c7bf	20 e1 c7	jsr $c7e1			jsr 	OHSInitHandler
.c7c2	18		clc				clc
.c7c3	60		rts				rts
.c7c4					_1:
.c7c4	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c7c6	d0 05		bne $c7cd			bne 	_1
.c7c8	20 03 c8	jsr $c803			jsr 	OHSControl
.c7cb	18		clc				clc
.c7cc	60		rts				rts
.c7cd					_1:
.c7cd	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c7cf	d0 05		bne $c7d6			bne 	_1
.c7d1	20 10 c8	jsr $c810			jsr 	OHSCheckFire
.c7d4	18		clc				clc
.c7d5	60		rts				rts
.c7d6					_1:
.c7d6	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c7d8	d0 05		bne $c7df			bne 	_1
.c7da	20 24 c8	jsr $c824			jsr 	OHSRepaint
.c7dd	18		clc				clc
.c7de	60		rts				rts
.c7df					_1:
.c7df	38		sec				sec
.c7e0	60		rts				rts
.c7e1					OHSInitHandler:
.c7e1	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c7e3	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c7e6	a9 08		lda #$08			lda 	#8
.c7e8	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7eb	a9 28		lda #$28			lda 	#40
.c7ed	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7f0	a9 00		lda #$00			lda 	#($1000 & 255)
.c7f2	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c7f5	a9 10		lda #$10			lda 	#($1000 >> 8)
.c7f7	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c7fa	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c7fd	29 3f		and #$3f			and 	#63
.c7ff	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c802	60		rts				rts
.c803					OHSControl:
.c803	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c806	d0 04		bne $c80c			bne 	_OHSNoMove
.c808	20 40 c2	jsr $c240			jsr		ChooseRandomDirection
.c80b	60		rts				rts
.c80c					_OHSNoMove:
.c80c	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c80f	60		rts				rts
.c810					OHSCheckFire:
.c810	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c813	29 3f		and #$3f			and 	#63
.c815	d0 0c		bne $c823			bne 	_OHSCFExit
.c817	a9 0d		lda #$0d			lda 	#TP_ENFORCER
.c819	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c81c	ac 03 c1	ldy $c103			ldy 	NewObject
.c81f	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c822	60		rts				rts
.c823					_OHSCFExit:
.c823	60		rts				rts
.c824					OHSRepaint:
.c824	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c827	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c82a	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c82d	4a		lsr a				lsr 	a
.c82e	2e 09 ff	rol $ff09			rol 	APIParams+5
.c831	60		rts				rts
.c832					OHEnforcer:
.c832	c9 01		cmp #$01			cmp 	#MSG_INIT
.c834	d0 05		bne $c83b			bne 	_1
.c836	20 4f c8	jsr $c84f			jsr 	OHENInitHandler
.c839	18		clc				clc
.c83a	60		rts				rts
.c83b					_1:
.c83b	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c83d	d0 05		bne $c844			bne 	_1
.c83f	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c842	18		clc				clc
.c843	60		rts				rts
.c844					_1:
.c844	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c846	d0 05		bne $c84d			bne 	_1
.c848	20 6c c8	jsr $c86c			jsr 	OHENCheckFire
.c84b	18		clc				clc
.c84c	60		rts				rts
.c84d					_1:
.c84d	38		sec				sec
.c84e	60		rts				rts
.c84f					OHENInitHandler:
.c84f	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c851	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c854	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c857	a9 0f		lda #$0f			lda 	#15
.c859	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c85c	a9 1e		lda #$1e			lda 	#30
.c85e	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c861	a9 50		lda #$50			lda 	#($150 & 255)
.c863	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c866	a9 01		lda #$01			lda 	#($150 >> 8)
.c868	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c86b	60		rts				rts
.c86c					OHENCheckFire:
.c86c	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c86f	29 1f		and #$1f			and 	#31
.c871	d0 0f		bne $c882			bne 	_OHENCFExit
.c873	a9 0c		lda #$0c			lda 	#TP_ESPARK
.c875	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c878	ac 03 c1	ldy $c103			ldy 	NewObject
.c87b	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c87e	20 d5 c2	jsr $c2d5			jsr 	ChasePlayerY
.c881	60		rts				rts
.c882					_OHENCFExit:
.c882	60		rts				rts
.c883					OHESpark:
.c883	c9 01		cmp #$01			cmp 	#MSG_INIT
.c885	d0 05		bne $c88c			bne 	_1
.c887	20 a0 c8	jsr $c8a0			jsr 	OHESInitHandler
.c88a	18		clc				clc
.c88b	60		rts				rts
.c88c					_1:
.c88c	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c88e	d0 05		bne $c895			bne 	_1
.c890	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c893	18		clc				clc
.c894	60		rts				rts
.c895					_1:
.c895	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c897	d0 05		bne $c89e			bne 	_1
.c899	20 5a c2	jsr $c25a			jsr 	NoControlEffect
.c89c	18		clc				clc
.c89d	60		rts				rts
.c89e					_1:
.c89e	38		sec				sec
.c89f	60		rts				rts
.c8a0					OHESInitHandler:
.c8a0	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c8a3	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c8a5	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c8a8	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c8ab	a9 07		lda #$07			lda 	#7
.c8ad	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c8b0	a9 ff		lda #$ff			lda 	#255
.c8b2	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c8b5	a9 25		lda #$25			lda 	#($25 & 255)
.c8b7	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c8ba	a9 00		lda #$00			lda 	#($25 >> 8)
.c8bc	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c8bf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c8c0					OHQuark:
.c8c0	c9 01		cmp #$01			cmp 	#MSG_INIT
.c8c2	d0 05		bne $c8c9			bne 	_1
.c8c4	20 d4 c8	jsr $c8d4			jsr 	OHQInitHandler
.c8c7	18		clc				clc
.c8c8	60		rts				rts
.c8c9					_1:
.c8c9	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c8cb	d0 05		bne $c8d2			bne 	_1
.c8cd	20 f9 c8	jsr $c8f9			jsr 	OHQCheckFire
.c8d0	18		clc				clc
.c8d1	60		rts				rts
.c8d2					_1:
.c8d2	38		sec				sec
.c8d3	60		rts				rts
.c8d4					OHQInitHandler:
.c8d4	a9 11		lda #$11			lda 	#GR1_QUARK
.c8d6	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c8d9	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c8dc	a9 0a		lda #$0a			lda 	#10
.c8de	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c8e1	a9 1e		lda #$1e			lda 	#30
.c8e3	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c8e6	a9 00		lda #$00			lda 	#($1000 & 255)
.c8e8	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c8eb	a9 10		lda #$10			lda 	#($1000 >> 8)
.c8ed	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c8f0	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c8f3	29 3f		and #$3f			and 	#63
.c8f5	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c8f8	60		rts				rts
.c8f9					OHQCheckFire:
.c8f9	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c8fc	29 3f		and #$3f			and 	#63
.c8fe	d0 0c		bne $c90c			bne 	_OHQCFExit
.c900	a9 0f		lda #$0f			lda 	#TP_TANK
.c902	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c905	ac 03 c1	ldy $c103			ldy 	NewObject
.c908	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c90b	60		rts				rts
.c90c					_OHQCFExit:
.c90c	60		rts				rts
.c90d					OHTank:
.c90d	c9 01		cmp #$01			cmp 	#MSG_INIT
.c90f	d0 05		bne $c916			bne 	_1
.c911	20 21 c9	jsr $c921			jsr 	OHTNInitHandler
.c914	18		clc				clc
.c915	60		rts				rts
.c916					_1:
.c916	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c918	d0 05		bne $c91f			bne 	_1
.c91a	20 3b c9	jsr $c93b			jsr 	OHTNCheckFire
.c91d	18		clc				clc
.c91e	60		rts				rts
.c91f					_1:
.c91f	38		sec				sec
.c920	60		rts				rts
.c921					OHTNInitHandler:
.c921	a9 12		lda #$12			lda 	#GR_TANK
.c923	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c926	a9 0f		lda #$0f			lda 	#15
.c928	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c92b	a9 1e		lda #$1e			lda 	#30
.c92d	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c930	a9 00		lda #$00			lda 	#($200 & 255)
.c932	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c935	a9 02		lda #$02			lda 	#($200 >> 8)
.c937	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c93a	60		rts				rts
.c93b					OHTNCheckFire:
.c93b	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c93e	29 1f		and #$1f			and 	#31
.c940	d0 0f		bne $c951			bne 	_OHTNCFExit
.c942	a9 0e		lda #$0e			lda 	#TP_SHELL
.c944	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c947	ac 03 c1	ldy $c103			ldy 	NewObject
.c94a	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c94d	20 d5 c2	jsr $c2d5			jsr 	ChasePlayerY
.c950	60		rts				rts
.c951					_OHTNCFExit:
.c951	60		rts				rts
.c952					OHShell:
.c952	c9 01		cmp #$01			cmp 	#MSG_INIT
.c954	d0 05		bne $c95b			bne 	_1
.c956	20 81 c9	jsr $c981			jsr 	OHSHInitHandler
.c959	18		clc				clc
.c95a	60		rts				rts
.c95b					_1:
.c95b	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c95d	d0 05		bne $c964			bne 	_1
.c95f	20 a6 c9	jsr $c9a6			jsr 	OHSHHitWall
.c962	18		clc				clc
.c963	60		rts				rts
.c964					_1:
.c964	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c966	d0 05		bne $c96d			bne 	_1
.c968	20 5a c2	jsr $c25a			jsr 	NoControlEffect
.c96b	18		clc				clc
.c96c	60		rts				rts
.c96d					_1:
.c96d	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c96f	d0 05		bne $c976			bne 	_1
.c971	20 78 c9	jsr $c978			jsr 	OHSHCheckLife
.c974	18		clc				clc
.c975	60		rts				rts
.c976					_1:
.c976	38		sec				sec
.c977	60		rts				rts
.c978					OHSHCheckLife:
.c978	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c97b	d0 03		bne $c980			bne 	_OHSHCLExit
.c97d	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c980					_OHSHCLExit:
.c980	60		rts				rts
.c981					OHSHInitHandler:
.c981	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c984	a9 1f		lda #$1f			lda 	#GR1_MISSILE1
.c986	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c989	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c98c	a9 05		lda #$05			lda 	#5
.c98e	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c991	a9 ff		lda #$ff			lda 	#255
.c993	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c996	a9 50		lda #$50			lda 	#($50 & 255)
.c998	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c99b	a9 00		lda #$00			lda 	#($50 >> 8)
.c99d	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c9a0	a9 c8		lda #$c8			lda 	#200
.c9a2	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c9a5	60		rts				rts
.c9a6					OHSHHitWall:
.c9a6	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c9a9	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c9ab	90 04		bcc $c9b1			bcc 	_OHSH1
.c9ad	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c9af	90 08		bcc $c9b9			bcc 	_OHSHCheckVertical
.c9b1					_OHSH1:
.c9b1	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c9b4	49 03		eor #$03			eor 	#3
.c9b6	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c9b9					_OHSHCheckVertical:
.c9b9	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c9bc	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c9be	90 04		bcc $c9c4			bcc 	_OHSH2
.c9c0	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c9c2	90 08		bcc $c9cc			bcc 	_OHSHExit
.c9c4					_OHSH2:
.c9c4	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c9c7	49 0c		eor #$0c			eor 	#12
.c9c9	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c9cc					_OHSHExit:
.c9cc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c9cd					OHElectrode:
.c9cd	c9 01		cmp #$01			cmp 	#MSG_INIT
.c9cf	d0 05		bne $c9d6			bne 	_1
.c9d1	20 ea c9	jsr $c9ea			jsr 	OHELInitHandler
.c9d4	18		clc				clc
.c9d5	60		rts				rts
.c9d6					_1:
.c9d6	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c9d8	d0 05		bne $c9df			bne 	_1
.c9da	20 06 ca	jsr $ca06			jsr 	OHELFreeze
.c9dd	18		clc				clc
.c9de	60		rts				rts
.c9df					_1:
.c9df	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c9e1	d0 05		bne $c9e8			bne 	_1
.c9e3	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c9e6	18		clc				clc
.c9e7	60		rts				rts
.c9e8					_1:
.c9e8	38		sec				sec
.c9e9	60		rts				rts
.c9ea					OHELInitHandler:
.c9ea	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.c9ec	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c9ef	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c9f2	a9 00		lda #$00			lda 	#0
.c9f4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c9f7	a9 00		lda #$00			lda 	#0
.c9f9	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c9fc	a9 00		lda #$00			lda 	#($0 & 255)
.c9fe	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.ca01	a9 00		lda #$00			lda 	#($0 >> 8)
.ca03	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca06					OHELFreeze:
.ca06	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.ca09	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/brains.asm

.ca0a					OHBrain:
.ca0a	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca0c	d0 05		bne $ca13			bne 	_1
.ca0e	20 30 ca	jsr $ca30			jsr 	OHBInitHandler
.ca11	18		clc				clc
.ca12	60		rts				rts
.ca13					_1:
.ca13	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.ca15	d0 05		bne $ca1c			bne 	_1
.ca17	20 4d ca	jsr $ca4d			jsr 	OHBCheckEat
.ca1a	18		clc				clc
.ca1b	60		rts				rts
.ca1c					_1:
.ca1c	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.ca1e	d0 05		bne $ca25			bne 	_1
.ca20	20 76 ca	jsr $ca76			jsr 	OHBChaseHuman
.ca23	18		clc				clc
.ca24	60		rts				rts
.ca25					_1:
.ca25	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.ca27	d0 05		bne $ca2e			bne 	_1
.ca29	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.ca2c	18		clc				clc
.ca2d	60		rts				rts
.ca2e					_1:
.ca2e	38		sec				sec
.ca2f	60		rts				rts
.ca30					OHBInitHandler:
.ca30	a9 14		lda #$14			lda 	#GR_BRAIN
.ca32	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.ca35	a9 18		lda #$18			lda 	#24
.ca37	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.ca3a	a9 01		lda #$01			lda 	#1
.ca3c	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.ca3f	a9 00		lda #$00			lda 	#($500 & 255)
.ca41	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.ca44	a9 05		lda #$05			lda 	#($500 >> 8)
.ca46	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca49	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.ca4c	60		rts				rts
.ca4d					OHBCheckEat:
.ca4d	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; object being chased.
.ca50	f0 23		beq $ca75			beq 	_OHBCEExit 					; none
.ca52	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; actual object
.ca55	30 1e		bmi $ca75			bmi 	_OHBCEExit 					; not existing.
.ca57	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; are Y/X colliding ?
.ca5a	90 19		bcc $ca75			bcc 	_OHBCEExit
.ca5c	da		phx				phx
.ca5d	a9 0b		lda #$0b			lda 	#TP_PROG 					; create a PROG here
.ca5f	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.ca62	ac 03 c1	ldy $c103			ldy 	NewObject
.ca65	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.ca68	fa		plx				plx
.ca69	da		phx				phx
.ca6a	20 c9 c1	jsr $c1c9			jsr 	KillObject	 				; kill the parent object
.ca6d	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x 			; and the thing it collided with, the human.
.ca70	aa		tax				tax
.ca71	20 c9 c1	jsr $c1c9			jsr 	KillObject
.ca74	fa		plx				plx
.ca75					_OHBCEExit:
.ca75	60		rts				rts
.ca76					OHBChaseHuman:
.ca76	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; check chase
.ca79	f0 05		beq $ca80			beq 	_OHBNewChoose
.ca7b	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; chased still alive ?
.ca7e	10 16		bpl $ca96			bpl 	_OHBChaseIt
.ca80					_OHBNewChoose:
.ca80	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; no, keep randomly trying till found a live one.
.ca83	29 07		and #$07			and 	#OBH_RANDOM_MASK
.ca85	c9 06		cmp #$06			cmp 	#OBC_HUMANS
.ca87	b0 f7		bcs $ca80			bcs 	_OHBNewChoose
.ca89	69 05		adc #$05			adc 	#OB_HUMANS
.ca8b	a8		tay				tay
.ca8c	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y
.ca8f	30 0b		bmi $ca9c			bmi 	_OHBExit
.ca91	98		tya				tya
.ca92	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.ca95	60		rts				rts
.ca96					_OHBChaseIt:
.ca96	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x
.ca99	20 5b c2	jsr $c25b			jsr 	ChaseObject
.ca9c					_OHBExit:
.ca9c	60		rts				rts
.ca9d					OHProg:
.ca9d	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca9f	d0 05		bne $caa6			bne 	_1
.caa1	20 b1 ca	jsr $cab1			jsr 	OHPRInitHandler
.caa4	18		clc				clc
.caa5	60		rts				rts
.caa6					_1:
.caa6	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.caa8	d0 05		bne $caaf			bne 	_1
.caaa	20 87 c2	jsr $c287			jsr 	ChasePlayer
.caad	18		clc				clc
.caae	60		rts				rts
.caaf					_1:
.caaf	38		sec				sec
.cab0	60		rts				rts
.cab1					OHPRInitHandler:
.cab1	a9 16		lda #$16			lda 	#GR1_PROG
.cab3	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cab6	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cab9	a9 04		lda #$04			lda 	#4
.cabb	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cabe	a9 01		lda #$01			lda 	#1
.cac0	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cac3	a9 00		lda #$00			lda 	#($100 & 255)
.cac5	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.cac8	a9 01		lda #$01			lda 	#($100 >> 8)
.caca	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.cacd	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/explode.asm

.cace					OHExplode:
.cace	c9 01		cmp #$01			cmp 	#MSG_INIT
.cad0	d0 05		bne $cad7			bne 	_1
.cad2	20 f4 ca	jsr $caf4			jsr 	OHXInitHandler
.cad5	18		clc				clc
.cad6	60		rts				rts
.cad7					_1:
.cad7	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.cad9	d0 05		bne $cae0			bne 	_1
.cadb	20 05 cb	jsr $cb05			jsr 	OHXOnMove
.cade	18		clc				clc
.cadf	60		rts				rts
.cae0					_1:
.cae0	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.cae2	d0 05		bne $cae9			bne 	_1
.cae4	20 01 cb	jsr $cb01			jsr 	OHXNoMove
.cae7	18		clc				clc
.cae8	60		rts				rts
.cae9					_1:
.cae9	c9 06		cmp #$06			cmp 	#MSG_SHOT
.caeb	d0 05		bne $caf2			bne 	_1
.caed	20 04 cb	jsr $cb04			jsr 	OHXNoHit
.caf0	18		clc				clc
.caf1	60		rts				rts
.caf2					_1:
.caf2	38		sec				sec
.caf3	60		rts				rts
.caf4					OHXInitHandler:
.caf4	20 1a cb	jsr $cb1a			jsr 	UpdateAnimation
.caf7	a9 08		lda #$08			lda 	#8
.caf9	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cafc	a9 ff		lda #$ff			lda 	#255
.cafe	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cb01					OHXNoMove:
.cb01	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb04					OHXNoHit:
.cb04	60		rts				rts
.cb05					OHXOnMove:
.cb05	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb08	c9 04		cmp #$04			cmp 	#4
.cb0a	f0 0a		beq $cb16			beq 	_OHXKill
.cb0c	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.cb0f	20 1a cb	jsr $cb1a			jsr 	UpdateAnimation
.cb12	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb15	60		rts				rts
.cb16					_OHXKill:
.cb16	20 c9 c1	jsr $c1c9			jsr 	KillObject
.cb19	60		rts				rts
.cb1a					UpdateAnimation:
.cb1a	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb1d	09 c0		ora #$c0			ora 	#$C0
.cb1f	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cb22	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cb25	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/human.asm

.cb26					CheckPlayerHuman:
.cb26	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; check player human collisions
.cb28					_CPHLoop:
.cb28	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check live
.cb2b	30 21		bmi $cb4e			bmi 	_CPHFail
.cb2d	a0 00		ldy #$00			ldy 	#0 							; check collision with player
.cb2f	20 dd c2	jsr $c2dd			jsr 	CheckCollision
.cb32	90 1a		bcc $cb4e			bcc 	_CPHFail
.cb34	20 c9 c1	jsr $c1c9			jsr 	KillObject 					; delete the human as collected
.cb37	ad 54 cb	lda $cb54			lda 	CollectCount 				; bump collect count, limit to 5
.cb3a	1a		inc a				inc 	a
.cb3b	c9 06		cmp #$06			cmp 	#6
.cb3d	90 02		bcc $cb41			bcc 	_CPHMax5
.cb3f	a9 05		lda #$05			lda 	#5
.cb41					_CPHMax5:
.cb41	8d 54 cb	sta $cb54			sta 	CollectCount
.cb44	0a		asl a				asl 	a 							; make to BCD x000
.cb45	0a		asl a				asl 	a
.cb46	0a		asl a				asl 	a
.cb47	0a		asl a				asl 	a
.cb48	a8		tay				tay
.cb49	a9 00		lda #$00			lda 	#0
.cb4b	20 00 c3	jsr $c300			jsr 	AddYAToScore
.cb4e					_CPHFail:
.cb4e	e8		inx				inx
.cb4f	e0 0c		cpx #$0c			cpx 	#OB_ENEMIES+1
.cb51	d0 d5		bne $cb28			bne 	_CPHLoop
.cb53	60		rts				rts
.cb54					CollectCount:
>cb54	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: checks/missiles.asm

.cb55					CheckHitRobots:
.cb55	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check enemies collide ?
.cb57					_CHRLoop1:
.cb57	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check enemy alive
.cb5a	30 2b		bmi $cb87			bmi 	_CHRNext1
.cb5c	a0 01		ldy #$01			ldy 	#OB_PLAYERMISSILE 			; check missiles
.cb5e					_CHRLoop2:
.cb5e	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; missile in use
.cb61	30 1f		bmi $cb82			bmi 	_CHRNext2
.cb63	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y 			; not immediately fired
.cb66	d0 1a		bne $cb82			bne 	_CHRNext2
.cb68	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; check collision.
.cb6b	90 15		bcc $cb82			bcc 	_CHRNext2
.cb6d	5a		phy				phy
.cb6e	a9 06		lda #$06			lda 	#MSG_SHOT
.cb70	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.cb73	90 03		bcc $cb78			bcc 	_1
.cb75	20 b0 c5	jsr $c5b0			jsr 	DefaultHandler
.cb78					_1:
.cb78	7a		ply				ply
.cb79	da		phx				phx 								; kill this missile.
.cb7a	98		tya				tya
.cb7b	aa		tax				tax
.cb7c	20 c9 c1	jsr $c1c9			jsr		KillObject
.cb7f	fa		plx				plx
.cb80	80 05		bra $cb87			bra 	_CHRNext1 					; go to check next human
.cb82					_CHRNext2:
.cb82	c8		iny				iny
.cb83	c0 05		cpy #$05			cpy		#OB_HUMANS 					; reached the end
.cb85	d0 d7		bne $cb5e			bne 	_CHRLoop2
.cb87					_CHRNext1:
.cb87	e8		inx				inx
.cb88	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cb8a	d0 cb		bne $cb57			bne 	_CHRLoop1
.cb8c	60		rts				rts
.cb8d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/complete.asm

.cb8e					CheckComplete:
.cb8e	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES
.cb90					_CheckLoop:
.cb90	bd 00 e0	lda $e000,x			lda 	OBFlags,x
.cb93	30 16		bmi $cbab			bmi 	_CheckNext 					; not in use
.cb95	29 1f		and #$1f			and 	#31 						; object ID
.cb97	c9 02		cmp #$02			cmp		#TP_GRUNT 					; must be none of these left.
.cb99	f0 17		beq $cbb2			beq		_CheckFail  				; don't have to destroy everything
.cb9b	c9 08		cmp #$08			cmp		#TP_BRAIN
.cb9d	f0 13		beq $cbb2			beq		_CheckFail
.cb9f	c9 09		cmp #$09			cmp		#TP_SPHERE
.cba1	f0 0f		beq $cbb2			beq		_CheckFail
.cba3	c9 0a		cmp #$0a			cmp		#TP_QUARK
.cba5	f0 0b		beq $cbb2			beq		_CheckFail
.cba7	c9 0b		cmp #$0b			cmp		#TP_PROG
.cba9	f0 07		beq $cbb2			beq		_CheckFail
.cbab					_CheckNext:
.cbab	e8		inx				inx
.cbac	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cbae	d0 e0		bne $cb90			bne 	_CheckLoop
.cbb0	38		sec				sec
.cbb1	60		rts				rts
.cbb2					_CheckFail:
.cbb2	18		clc				clc
.cbb3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/dead.asm

.cbb4					CheckDead:
.cbb4	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check enemies collide ?
.cbb6					_CDLoop1:
.cbb6	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check enemy alive
.cbb9	30 0d		bmi $cbc8			bmi 	_CDNext1
.cbbb	29 1f		and #$1f			and 	#$1F 						; object class, check if >= explosion animation
.cbbd	c9 10		cmp #$10			cmp 	#TP_EXPLODE
.cbbf	b0 07		bcs $cbc8			bcs 	_CDNext1
.cbc1	a0 00		ldy #$00			ldy 	#0 							; check hit player object
.cbc3	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; check collision.
.cbc6	b0 07		bcs $cbcf			bcs 	_CDDead 					; collision
.cbc8					_CDNext1:
.cbc8	e8		inx				inx 								; check next.
.cbc9	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cbcb	d0 e9		bne $cbb6			bne 	_CDLoop1
.cbcd	18		clc				clc
.cbce	60		rts				rts
.cbcf					_CDDead:
.cbcf	38		sec				sec
.cbd0	60		rts				rts

;******  Return to file: main.asm

.cbd1					MainGame:
.cbd1	20 b9 c1	jsr $c1b9			jsr 	ResetObjects 				; reset all game objects
.cbd4	a9 00		lda #$00			lda 	#0 							; create player
.cbd6	a2 01		ldx #$01			ldx 	#1
.cbd8	20 45 c0	jsr $c045			jsr 	CreateObjects
.cbdb	20 1f c4	jsr $c41f			jsr 	CreateCurrentObjects 		; create the objects expected.
.cbde	20 3c c3	jsr $c33c			jsr 	DrawWave
.cbe1	20 6a c3	jsr $c36a			jsr 	DrawScore
.cbe4					MainLoop:
.cbe4	ee 1c cc	inc $cc1c			inc 	FrameCount 					; bump frame counter
.cbe7	20 8e cb	jsr $cb8e			jsr 	CheckComplete 				; check completed first.
.cbea	b0 2c		bcs $cc18			bcs 	_MLComplete
.cbec	20 b4 cb	jsr $cbb4			jsr 	CheckDead 					; robot collision
.cbef	b0 1b		bcs $cc0c			bcs 	_MLKilled
.cbf1	20 84 c1	jsr $c184			jsr 	AnimatePalette 				; causes flashing effects
.cbf4	20 04 c1	jsr $c104			jsr 	MoveObjects 				; move all objects
.cbf7	20 1d cc	jsr $cc1d			jsr 	ClockDelay 					; delay to stop it being insanely fast.
.cbfa	20 26 cb	jsr $cb26			jsr 	CheckPlayerHuman 			; collect ?
.cbfd	20 55 cb	jsr $cb55			jsr 	CheckHitRobots 				; check if hit robot.
.cc00	ad 1c cc	lda $cc1c			lda 	FrameCount
.cc03	29 07		and #$07			and 	#7
.cc05	d0 03		bne $cc0a			bne 	_MainNoScore
.cc07	20 6a c3	jsr $c36a			jsr 	DrawScore
.cc0a					_MainNoScore:
.cc0a	80 d8		bra $cbe4			bra 	MainLoop
.cc0c					_MLKilled:
.cc0c	a9 01		lda #$01			lda 	#1
.cc0e	8d 40 c0	sta $c040			sta 	Result
.cc11	ce 41 c0	dec $c041			dec 	Lives
.cc14	20 6a c3	jsr $c36a			jsr 	DrawScore
.cc17	60		rts				rts
.cc18					_MLComplete:
.cc18	9c 40 c0	stz $c040			stz 	Result						; return 0 (level complete, not dead)
.cc1b	60		rts				rts
.cc1c					FrameCount:
>cc1c	00						.byte 	0
.cc1d					ClockDelay:
.cc1d	da		phx				phx
.cc1e	5a		phy				phy
.cc1f	ae 2d cc	ldx $cc2d			ldx 	MoveSpeed
.cc22	f0 06		beq $cc2a			beq 	_MLExit
.cc24					_MLDelay:
.cc24	88		dey				dey
.cc25	d0 fd		bne $cc24			bne 	_MLDelay
.cc27	ca		dex				dex
.cc28	d0 fa		bne $cc24			bne 	_MLDelay
.cc2a					_MLExit:
.cc2a	7a		ply				ply
.cc2b	fa		plx				plx
.cc2c	60		rts				rts
.cc2d					MoveSpeed:
>cc2d	28						.byte 	40
.cc2e					HandlerTable:
>cc2e	f0 c5						.word 		OHPlayer 				; type 0 Player
>cc30	91 c6						.word 		OHMissile 				; type 1 Player missile
>cc32	4c c7						.word 		OHGrunt 				; type 2 Grunt
>cc34	cd c9						.word 		OHElectrode 			; type 3 Electrode
>cc36	0b c7						.word 		OHHuman1 				; type 4-6 Humans
>cc38	16 c7						.word 		OHHuman2
>cc3a	21 c7						.word 		OHHuman3
>cc3c	7a c7						.word 		OHHulk 					; type 7 Hulk
>cc3e	0a ca						.word 		OHBrain 				; type 8 Brain
>cc40	bb c7						.word 		OHSphere 				; type 9 Sphere
>cc42	c0 c8						.word 		OHQuark 				; type 10 Quark
>cc44	9d ca						.word 		OHProg 					; type 11 Prog
>cc46	83 c8						.word 		OHESpark 				; type 12 Enforcer Sparks.
>cc48	32 c8						.word 		OHEnforcer 				; type 13 Enforcer
>cc4a	52 c9						.word 		OHShell 				; type 14 Shell
>cc4c	0d c9						.word 		OHTank 					; type 15 Tank
>cc4e	ce ca						.word 		OHExplode 				; type 16 Explosion Graphic

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
