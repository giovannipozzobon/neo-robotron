
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Tue Apr 23 13:39:03 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=5					TP_GRUNT = 5
=6					TP_HULK = 6
=7					TP_ESPARK = 7
=8					TP_ENFORCER = 8
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_HORIZFIRE = 22  						; Horizontal fire
=23					GR1_VERTFIRE = 23  							; Vertical fire
=24					GR1_SWNEFIRE = 24   						; / fire
=25					GR1_NWSEFIRE = 25  							; \ fire
=26					GR4_ELECTRODES = 26  						; Set of 3 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 3c c1	jmp $c13c			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c c1 c0	jmp $c0c1			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	8e c0 c0	stx $c0c0			stx 	NewObject 					; remember the new object
.c041	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c044	0a		asl a				asl 	a 							; double -> Y
.c045	a8		tay				tay
.c046	b9 99 c4	lda $c499,y			lda 	HandlerTable,y  			; put the handler address in.
.c049	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c04c	b9 9a c4	lda $c49a,y			lda 	HandlerTable+1,y
.c04f	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c052					_COPos1:
.c052	20 0c c2	jsr $c20c			jsr 	Random8Bit  				; value is 0-151
.c055	c9 98		cmp #$98			cmp 	#152
.c057	b0 f9		bcs $c052			bcs 	_COPos1
.c059	69 04		adc #$04			adc 	#4
.c05b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05e					_COPos2:
.c05e	20 0c c2	jsr $c20c			jsr 	Random8Bit 					; value is 0-103
.c061	29 7f		and #$7f			and 	#$7F
.c063	c9 68		cmp #$68			cmp 	#104
.c065	b0 f7		bcs $c05e			bcs 	_COPos2
.c067	69 04		adc #$04			adc 	#4
.c069	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c06c	38		sec				sec   								; check Y centre offset
.c06d	e9 34		sbc #$34			sbc 	#52
.c06f	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c072	c9 27		cmp #$27			cmp 	#39
.c074	b0 0d		bcs $c083			bcs 	_COIsOkay
.c076	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c079	38		sec				sec
.c07a	e9 4b		sbc #$4b			sbc 	#75
.c07c	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c07f	c9 37		cmp #$37			cmp 	#55
.c081	90 cf		bcc $c052			bcc 	_COPos1
.c083					_COIsOkay:
.c083	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c085	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c088	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c08b	a9 ff		lda #$ff			lda 	#$FF
.c08d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c090	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c093	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c094	29 07		and #$07			and 	#7
.c096	1a		inc a				inc 	a
.c097	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c09a	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c09d	a9 01		lda #$01			lda 	#1
.c09f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0a2	a9 0a		lda #$0a			lda 	#10
.c0a4	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0a7	20 bd c1	jsr $c1bd			jsr 	ChooseRandomDirection
.c0aa	a9 01		lda #$01			lda 	#MSG_INIT
.c0ac	20 24 c2	jsr $c224			jsr 	SendObjectMessage
.c0af	90 03		bcc $c0b4			bcc 	_1
.c0b1	20 5a c2	jsr $c25a			jsr 	DefaultHandler
.c0b4					_1:
.c0b4	20 61 c1	jsr $c161			jsr 	RedrawObject
.c0b7	60		rts				rts
.c0b8					_COAbsolute:
.c0b8	c9 00		cmp #$00			cmp 	#0
.c0ba	10 03		bpl $c0bf			bpl 	_COAExit
.c0bc	49 ff		eor #$ff			eor 	#$FF
.c0be	1a		inc a				inc 	a
.c0bf					_COAExit:
.c0bf	60		rts				rts
.c0c0					NewObject:
>c0c0	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0c1					MoveObjects:
.c0c1	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0c3					_MOLoop:
.c0c3	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0c6	30 03		bmi $c0cb			bmi 	_MONoObject
.c0c8	20 d1 c0	jsr $c0d1			jsr 	_MoveOneObject
.c0cb					_MONoObject:
.c0cb	e8		inx				inx
.c0cc	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0ce	d0 f3		bne $c0c3			bne 	_MOLoop
.c0d0	60		rts				rts  								; cannot create, exit.
.c0d1					_MoveOneObject:
.c0d1	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0d4	d0 5a		bne $c130			bne 	_MONotMove
.c0d6	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0d9	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0dc	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0df	d0 10		bne $c0f1			bne 	_MONoProcess
.c0e1	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0e4	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0e7	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0e9	20 24 c2	jsr $c224			jsr 	SendObjectMessage
.c0ec	90 03		bcc $c0f1			bcc 	_1
.c0ee	20 5a c2	jsr $c25a			jsr 	DefaultHandler
.c0f1					_1:
.c0f1					_MONoProcess:
.c0f1	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0f4	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c0f7	4a		lsr a				lsr 	a
.c0f8	90 01		bcc $c0fb			bcc 	_MONotLeft
.c0fa	88		dey				dey
.c0fb					_MONotLeft:
.c0fb	4a		lsr a				lsr 	a
.c0fc	90 01		bcc $c0ff			bcc 	_MONotRight
.c0fe	c8		iny				iny
.c0ff					_MONotRight:
.c0ff	5a		phy				phy 								; new Y position on stack
.c100	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c103	4a		lsr a				lsr 	a
.c104	90 01		bcc $c107			bcc 	_MONotUp
.c106	88		dey				dey
.c107					_MONotUp:
.c107	4a		lsr a				lsr 	a
.c108	90 01		bcc $c10b			bcc 	_MONotDown
.c10a	c8		iny				iny
.c10b					_MONotDown:
.c10b	68		pla				pla 								; (A,Y) are new coordinates.
.c10c	c9 04		cmp #$04			cmp 	#4  						; check out of bounds.
.c10e	90 21		bcc $c131			bcc 	_MOHitWall
.c110	c9 9c		cmp #$9c			cmp 	#156
.c112	b0 1d		bcs $c131			bcs 	_MOHitWall
.c114	c0 04		cpy #$04			cpy 	#4
.c116	90 19		bcc $c131			bcc 	_MOHitWall
.c118	c0 6c		cpy #$6c			cpy 	#108
.c11a	b0 15		bcs $c131			bcs 	_MOHitWall
.c11c	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c11f	98		tya				tya
.c120	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c123	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c125	20 24 c2	jsr $c224			jsr 	SendObjectMessage
.c128	90 03		bcc $c12d			bcc 	_1
.c12a	20 5a c2	jsr $c25a			jsr 	DefaultHandler
.c12d					_1:
.c12d	20 61 c1	jsr $c161			jsr 	RedrawObject 				; repaint.
.c130					_MONotMove:
.c130	60		rts				rts
.c131					_MOHitWall:
.c131	a9 04		lda #$04			lda 	#MSG_HITWALL
.c133	20 24 c2	jsr $c224			jsr 	SendObjectMessage
.c136	90 03		bcc $c13b			bcc 	_1
.c138	20 5a c2	jsr $c25a			jsr 	DefaultHandler
.c13b					_1:
.c13b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c13c					ResetObjects:
.c13c	a2 00		ldx #$00			ldx 	#0
.c13e					_RSLoop:
.c13e	a9 ff		lda #$ff			lda 	#$FF
.c140	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c143	e8		inx				inx
.c144	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c146	d0 f6		bne $c13e			bne 	_RSLoop
.c148	60		rts				rts
.c149					KillObject:
.c149	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c14c	d0 fb		bne $c149			bne 	KillObject
.c14e	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c150	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c153	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c156	a9 03		lda #$03			lda 	#3  						; and hide it.
.c158	8d 01 ff	sta $ff01			sta 	APIFunction
.c15b	a9 06		lda #$06			lda 	#6
.c15d	8d 00 ff	sta $ff00			sta 	APICommand
.c160	60		rts				rts
.c161					RedrawObject:
.c161	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c164	d0 fb		bne $c161			bne 	RedrawObject
.c166	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c169	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c16c	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c16f	0a		asl a				asl 	a
.c170	8d 05 ff	sta $ff05			sta 	APIParams+1
.c173	2e 06 ff	rol $ff06			rol 	APIParams+2
.c176	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c179	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c17c	0a		asl a				asl 	a
.c17d	69 10		adc #$10			adc 	#16 						; allow for top area
.c17f	8d 07 ff	sta $ff07			sta 	APIParams+3
.c182	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c185	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c188	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c18a	f0 0e		beq $c19a			beq 	_ROUseSprite2
.c18c	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c18e	d0 03		bne $c193			bne 	_ROHasHorizonMovement
.c190	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c193					_ROHasHorizonMovement:
.c193	98		tya				tya 								; put bit 1 into carry.
.c194	4a		lsr a				lsr 	a
.c195	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c198	90 03		bcc $c19d			bcc 	_ROUseSprite
.c19a					_ROUseSprite2:
.c19a	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c19d					_ROUseSprite:
.c19d	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1a0	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1a3	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1a5	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1a8					_RONotLeft:
.c1a8	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1aa	20 24 c2	jsr $c224			jsr 	SendObjectMessage
.c1ad	90 03		bcc $c1b2			bcc 	_1
.c1af	20 5a c2	jsr $c25a			jsr 	DefaultHandler
.c1b2					_1:
.c1b2	a9 02		lda #$02			lda 	#2  						; and draw it.
.c1b4	8d 01 ff	sta $ff01			sta 	APIFunction
.c1b7	a9 06		lda #$06			lda 	#6
.c1b9	8d 00 ff	sta $ff00			sta 	APICommand
.c1bc	60		rts				rts
.c1bd					ChooseRandomDirection:
.c1bd	20 0c c2	jsr $c20c			jsr 	Random8Bit 					; get valid random direction
.c1c0	29 0f		and #$0f			and 	#15
.c1c2	f0 f9		beq $c1bd			beq 	ChooseRandomDirection 		; stationary (0)
.c1c4	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1c7	29 03		and #$03			and 	#3 							; check LR not both on.
.c1c9	c9 03		cmp #$03			cmp 	#3
.c1cb	f0 f0		beq $c1bd			beq 	ChooseRandomDirection
.c1cd	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c1d0	29 0c		and #$0c			and 	#12
.c1d2	c9 0c		cmp #$0c			cmp 	#12
.c1d4	f0 e7		beq $c1bd			beq 	ChooseRandomDirection
.c1d6	60		rts				rts
.c1d7					NoControlEffect:
.c1d7	60		rts				rts
.c1d8					ChaseObject:
.c1d8	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c1db	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c1de	20 f7 c1	jsr $c1f7			jsr 	_ChaseCalculate
.c1e1	8d f6 c1	sta $c1f6			sta 	_ChaseTemp
.c1e4	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c1e7	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c1ea	20 f7 c1	jsr $c1f7			jsr 	_ChaseCalculate
.c1ed	0a		asl a				asl 	a
.c1ee	0a		asl a				asl 	a
.c1ef	0d f6 c1	ora $c1f6			ora 	_ChaseTemp
.c1f2	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1f5	60		rts				rts
.c1f6					_ChaseTemp:
>c1f6	00						.byte 	0
.c1f7					_ChaseCalculate:
.c1f7	f0 08		beq $c201			beq 	_CCNoMove
.c1f9	90 03		bcc $c1fe			bcc 	_CCMoveRight
.c1fb	a9 02		lda #$02			lda 	#2
.c1fd	60		rts				rts
.c1fe					_CCMoveRight:
.c1fe	a9 01		lda #$01			lda 	#1
.c200	60		rts				rts
.c201					_CCNoMove:
.c201	a9 00		lda #$00			lda 	#0
.c203	60		rts				rts
.c204					ChasePlayer:
.c204	5a		phy				phy
.c205	a0 00		ldy #$00			ldy 	#0
.c207	20 d8 c1	jsr $c1d8			jsr 	ChaseObject
.c20a	7a		ply				ply
.c20b	60		rts				rts
.c20c					Random8Bit:
.c20c	5a		phy				phy
.c20d	a0 08		ldy #$08			ldy 	#8
.c20f	ad 22 c2	lda $c222			lda 	_R8SeedValue+0
.c212					_R8RandomLoop
.c212	0a		asl a				asl     a
.c213	2e 23 c2	rol $c223			rol 	_R8SeedValue+1
.c216	90 02		bcc $c21a			bcc 	_R8NotSet
.c218	49 39		eor #$39			eor 	#$39
.c21a					_R8NotSet:
.c21a	88		dey				dey
.c21b	d0 f5		bne $c212			bne 	_R8RandomLoop
.c21d	8d 22 c2	sta $c222			sta 	_R8SeedValue+0
.c220	7a		ply				ply
.c221	60		rts				rts
.c222					_R8SeedValue
>c222	cd ab						.word 	$ABCD
.c224					SendObjectMessage:
.c224	48		pha				pha
.c225	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c228	8d 33 c2	sta $c233			sta 	_SMCall+1
.c22b	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c22e	8d 34 c2	sta $c234			sta 	_SMCall+2
.c231	68		pla				pla
.c232					_SMCall:
.c232	4c 00 00	jmp $0000			jmp 	$0000
.c235					SetObjectGraphic:
.c235	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c238	1a		inc a				inc 	a
.c239	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c23c	60		rts				rts
.c23d					CreateSingleObject:
.c23d	da		phx				phx 								; create player missile object.
.c23e	5a		phy				phy
.c23f	20 18 c0	jsr $c018			jsr 	CreateObject
.c242	7a		ply				ply
.c243	fa		plx				plx
.c244	60		rts				rts
.c245					CopyStartPosition:
.c245	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c248	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c24b	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c24e	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c251	60		rts				rts
.c252					ChasePlayerY:
.c252	da		phx				phx
.c253	98		tya				tya
.c254	aa		tax				tax
.c255	20 04 c2	jsr $c204			jsr 	ChasePlayer
.c258	fa		plx				plx
.c259	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c25a					DefaultHandler:
.c25a	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c25c	d0 05		bne $c263			bne 	_1
.c25e	20 6e c2	jsr $c26e			jsr 	DefaultControl
.c261	18		clc				clc
.c262	60		rts				rts
.c263					_1:
.c263	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c265	d0 05		bne $c26c			bne 	_1
.c267	20 71 c2	jsr $c271			jsr 	DefaultHitWall
.c26a	18		clc				clc
.c26b	60		rts				rts
.c26c					_1:
.c26c	38		sec				sec
.c26d	60		rts				rts
.c26e					DefaultControl:
.c26e	4c bd c1	jmp $c1bd			jmp 	ChooseRandomDirection
.c271					DefaultHitWall:
.c271	4c bd c1	jmp $c1bd			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c274					OHPlayer:
.c274	c9 01		cmp #$01			cmp 	#MSG_INIT
.c276	d0 05		bne $c27d			bne 	_1
.c278	20 91 c2	jsr $c291			jsr 	OHPInitHandler
.c27b	18		clc				clc
.c27c	60		rts				rts
.c27d					_1:
.c27d	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c27f	d0 05		bne $c286			bne 	_1
.c281	20 a6 c2	jsr $c2a6			jsr 	OHPRepaintHandler
.c284	18		clc				clc
.c285	60		rts				rts
.c286					_1:
.c286	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c288	d0 05		bne $c28f			bne 	_1
.c28a	20 d5 c2	jsr $c2d5			jsr 	OHPControlHandler
.c28d	18		clc				clc
.c28e	60		rts				rts
.c28f					_1:
.c28f	38		sec				sec
.c290	60		rts				rts
.c291					OHPInitHandler:
.c291	a9 50		lda #$50			lda 	#160/2
.c293	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c296	a9 40		lda #$40			lda 	#128/2
.c298	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c29b	a9 02		lda #$02			lda 	#2
.c29d	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c2a0	a9 01		lda #$01			lda 	#1
.c2a2	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c2a5	60		rts				rts
.c2a6					OHPRepaintHandler:
.c2a6	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c2a9	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c2ac	29 03		and #$03			and 	#3
.c2ae	d0 03		bne $c2b3			bne 	_OHPUseVertical
.c2b0	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c2b3					_OHPUseVertical:
.c2b3	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c2b6	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c2b9	98		tya				tya
.c2ba	29 10		and #$10			and 	#16
.c2bc	f0 03		beq $c2c1			beq 	_OHPNoAlternate
.c2be	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c2c1					_OHPNoAlternate:
.c2c1	60		rts				rts
.c2c2					OHPSetGraphic:
.c2c2	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c2c5	29 03		and #$03			and 	#3
.c2c7	d0 06		bne $c2cf			bne 	_OHPRHorizontal
.c2c9	a9 02		lda #$02			lda 	#GR_PLAYERV
.c2cb	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c2ce	60		rts				rts
.c2cf					_OHPRHorizontal:
.c2cf	a9 00		lda #$00			lda 	#GR_PLAYERH
.c2d1	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c2d4	60		rts				rts
.c2d5					OHPControlHandler:
.c2d5	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c2d8	d0 fb		bne $c2d5			bne 	OHPControlHandler
.c2da	a9 01		lda #$01			lda 	#1  						; and draw it.
.c2dc	8d 01 ff	sta $ff01			sta 	APIFunction
.c2df	a9 07		lda #$07			lda 	#7
.c2e1	8d 00 ff	sta $ff00			sta 	APICommand
.c2e4					_OHPWait
.c2e4	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c2e7	d0 fb		bne $c2e4			bne 	_OHPWait
.c2e9	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c2ec	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c2ee	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c2f1	f0 0d		beq $c300			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c2f3	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c2f6	29 f0		and #$f0			and 	#$F0
.c2f8	d0 06		bne $c300			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c2fa	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c2fd	8d 13 c3	sta $c313			sta 	OHPLastDirection
.c300					_OHPNoSetLast:
.c300	ee 14 c3	inc $c314			inc 	OHPFireCount 				; fire one time in 15
.c303	ad 14 c3	lda $c314			lda 	OHPFireCount
.c306	29 0f		and #$0f			and 	#15
.c308	d0 05		bne $c30f			bne 	_OHPNoFire
.c30a	a9 01		lda #$01			lda 	#1
.c30c	20 3d c2	jsr $c23d			jsr 	CreateSingleObject
.c30f					_OHPNoFire:
.c30f	20 c2 c2	jsr $c2c2			jsr 	OHPSetGraphic
.c312	60		rts				rts
.c313					OHPLastDirection:
>c313	02						.byte 	2
.c314					OHPFireCount:
>c314	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c315					OHMissile:
.c315	c9 01		cmp #$01			cmp 	#MSG_INIT
.c317	d0 05		bne $c31e			bne 	_1
.c319	20 3b c3	jsr $c33b			jsr 	OHMInitHandler
.c31c	18		clc				clc
.c31d	60		rts				rts
.c31e					_1:
.c31e	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c320	d0 05		bne $c327			bne 	_1
.c322	20 53 c3	jsr $c353			jsr 	OHMRepaintHandler
.c325	18		clc				clc
.c326	60		rts				rts
.c327					_1:
.c327	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c329	d0 05		bne $c330			bne 	_1
.c32b	20 73 c3	jsr $c373			jsr 	OHMControl
.c32e	18		clc				clc
.c32f	60		rts				rts
.c330					_1:
.c330	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c332	d0 05		bne $c339			bne 	_1
.c334	20 74 c3	jsr $c374			jsr 	OHMHitWall
.c337	18		clc				clc
.c338	60		rts				rts
.c339					_1:
.c339	38		sec				sec
.c33a	60		rts				rts
.c33b					OHMInitHandler:
.c33b	a9 01		lda #$01			lda 	#1
.c33d	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c340	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c343	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c346	ad d8 e0	lda $e0d8			lda 	OBYPos
.c349	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c34c	ad 13 c3	lda $c313			lda 	OHPLastDirection 			; copy direction
.c34f	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c352	60		rts				rts
.c353					OHMRepaintHandler:
.c353	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c356	b9 63 c3	lda $c363,y			lda 	OHMGraphic,y 				; set graphic.
.c359	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c35c	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c35f	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c362	60		rts				rts
.c363					OHMGraphic:
>c363	00 16 16 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c367	17 19 18 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c36b	17 18 19 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c36f	00 00 00 00					.byte 	0,0,0,0
.c373					OHMControl:
.c373	60		rts				rts
.c374					OHMHitWall:
.c374	20 49 c1	jsr $c149			jsr 	KillObject
.c377	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c378					OHHuman1:
.c378	c9 01		cmp #$01			cmp 	#MSG_INIT
.c37a	d0 05		bne $c381			bne 	_1
.c37c	20 a4 c3	jsr $c3a4			jsr 	OHHInitHandler1
.c37f	18		clc				clc
.c380	60		rts				rts
.c381					_1:
.c381	38		sec				sec
.c382	60		rts				rts
.c383					OHHuman2:
.c383	c9 01		cmp #$01			cmp 	#MSG_INIT
.c385	d0 05		bne $c38c			bne 	_1
.c387	20 ab c3	jsr $c3ab			jsr 	OHHInitHandler2
.c38a	18		clc				clc
.c38b	60		rts				rts
.c38c					_1:
.c38c	38		sec				sec
.c38d	60		rts				rts
.c38e					OHHuman3:
.c38e	c9 01		cmp #$01			cmp 	#MSG_INIT
.c390	d0 05		bne $c397			bne 	_1
.c392	20 b2 c3	jsr $c3b2			jsr 	OHHInitHandler3
.c395	18		clc				clc
.c396	60		rts				rts
.c397					_1:
.c397	38		sec				sec
.c398	60		rts				rts
.c399					OHHInitHandlerMain:
.c399	a9 1e		lda #$1e			lda 	#30
.c39b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c39e	a9 0f		lda #$0f			lda 	#15
.c3a0	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3a3	60		rts				rts
.c3a4					OHHInitHandler1:
.c3a4	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c3a6	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c3a9	80 ee		bra $c399			bra 	OHHInitHandlerMain
.c3ab					OHHInitHandler2:
.c3ab	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c3ad	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c3b0	80 e7		bra $c399			bra 	OHHInitHandlerMain
.c3b2					OHHInitHandler3:
.c3b2	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c3b4	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c3b7	80 e0		bra $c399			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c3b9					OHGrunt:
.c3b9	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3bb	d0 05		bne $c3c2			bne 	_1
.c3bd	20 cd c3	jsr $c3cd			jsr 	OHGInitHandler
.c3c0	18		clc				clc
.c3c1	60		rts				rts
.c3c2					_1:
.c3c2	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3c4	d0 05		bne $c3cb			bne 	_1
.c3c6	20 04 c2	jsr $c204			jsr 	ChasePlayer
.c3c9	18		clc				clc
.c3ca	60		rts				rts
.c3cb					_1:
.c3cb	38		sec				sec
.c3cc	60		rts				rts
.c3cd					OHGInitHandler:
.c3cd	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c3cf	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c3d2	a9 20		lda #$20			lda 	#32
.c3d4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3d7	a9 01		lda #$01			lda 	#1
.c3d9	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3dc	a9 00		lda #$00			lda 	#($100 & 255)
.c3de	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c3e1	a9 01		lda #$01			lda 	#($100 >> 8)
.c3e3	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c3e6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c3e7					OHHulk:
.c3e7	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3e9	d0 05		bne $c3f0			bne 	_1
.c3eb	20 fb c3	jsr $c3fb			jsr 	OHHUInitHandler
.c3ee	18		clc				clc
.c3ef	60		rts				rts
.c3f0					_1:
.c3f0	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3f2	d0 05		bne $c3f9			bne 	_1
.c3f4	20 04 c2	jsr $c204			jsr 	ChasePlayer
.c3f7	18		clc				clc
.c3f8	60		rts				rts
.c3f9					_1:
.c3f9	38		sec				sec
.c3fa	60		rts				rts
.c3fb					OHHUInitHandler:
.c3fb	a9 0a		lda #$0a			lda 	#GR_HULK
.c3fd	20 35 c2	jsr $c235			jsr 	SetObjectGraphic
.c400	a9 40		lda #$40			lda 	#64
.c402	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c405	a9 01		lda #$01			lda 	#1
.c407	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c40a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c40b					OHESpark:
.c40b	c9 01		cmp #$01			cmp 	#MSG_INIT
.c40d	d0 05		bne $c414			bne 	_1
.c40f	20 28 c4	jsr $c428			jsr 	OHESInitHandler
.c412	18		clc				clc
.c413	60		rts				rts
.c414					_1:
.c414	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c416	d0 05		bne $c41d			bne 	_1
.c418	20 49 c1	jsr $c149			jsr 	KillObject
.c41b	18		clc				clc
.c41c	60		rts				rts
.c41d					_1:
.c41d	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c41f	d0 05		bne $c426			bne 	_1
.c421	20 d7 c1	jsr $c1d7			jsr 	NoControlEffect
.c424	18		clc				clc
.c425	60		rts				rts
.c426					_1:
.c426	38		sec				sec
.c427	60		rts				rts
.c428					OHESInitHandler:
.c428	20 04 c2	jsr $c204			jsr 	ChasePlayer
.c42b	a9 1f		lda #$1f			lda 	#GR1_MISSILE2
.c42d	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c430	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c433	a9 07		lda #$07			lda 	#7
.c435	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c438	a9 ff		lda #$ff			lda 	#255
.c43a	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c43d	a9 25		lda #$25			lda 	#($25 & 255)
.c43f	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c442	a9 00		lda #$00			lda 	#($25 >> 8)
.c444	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c447	60		rts				rts
.c448					OHEnforcer:
.c448	c9 01		cmp #$01			cmp 	#MSG_INIT
.c44a	d0 05		bne $c451			bne 	_1
.c44c	20 65 c4	jsr $c465			jsr 	OHENInitHandler
.c44f	18		clc				clc
.c450	60		rts				rts
.c451					_1:
.c451	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c453	d0 05		bne $c45a			bne 	_1
.c455	20 04 c2	jsr $c204			jsr 	ChasePlayer
.c458	18		clc				clc
.c459	60		rts				rts
.c45a					_1:
.c45a	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c45c	d0 05		bne $c463			bne 	_1
.c45e	20 82 c4	jsr $c482			jsr 	OHENCheckFire
.c461	18		clc				clc
.c462	60		rts				rts
.c463					_1:
.c463	38		sec				sec
.c464	60		rts				rts
.c465					OHENInitHandler:
.c465	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c467	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c46a	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c46d	a9 0f		lda #$0f			lda 	#15
.c46f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c472	a9 1e		lda #$1e			lda 	#30
.c474	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c477	a9 50		lda #$50			lda 	#($150 & 255)
.c479	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c47c	a9 01		lda #$01			lda 	#($150 >> 8)
.c47e	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c481	60		rts				rts
.c482					OHENCheckFire:
.c482	20 0c c2	jsr $c20c			jsr 	Random8Bit
.c485	29 1f		and #$1f			and 	#31
.c487	d0 0f		bne $c498			bne 	_OHENCFExit
.c489	a9 07		lda #$07			lda 	#TP_ESPARK
.c48b	20 3d c2	jsr $c23d			jsr 	CreateSingleObject
.c48e	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c491	20 45 c2	jsr $c245			jsr 	CopyStartPosition
.c494	20 52 c2	jsr $c252			jsr 	ChasePlayerY
.c497	60		rts				rts
.c498					_OHENCFExit:
.c498	60		rts				rts

;******  Return to file: main.asm

.c499					HandlerTable:
>c499	74 c2						.word 		OHPlayer 				; type 0, player object
>c49b	15 c3						.word 		OHMissile 				; type 1, player missile object
>c49d	78 c3						.word 		OHHuman1 				; type 2-4 humans
>c49f	83 c3						.word 		OHHuman2
>c4a1	8e c3						.word 		OHHuman3
>c4a3	b9 c3						.word 		OHGrunt 				; type 5 grunt
>c4a5	e7 c3						.word 		OHHulk 					; type 6 hulk
>c4a7	0b c4						.word 		OHESpark 				; type 7 Enforcer Sparks.
>c4a9	48 c4						.word 		OHEnforcer 				; type 8 Enforcer

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
