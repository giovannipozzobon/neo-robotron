
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Tue Apr 23 16:07:04 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=5					TP_GRUNT = 5
=6					TP_HULK = 6
=7					TP_ESPARK = 7
=8					TP_ENFORCER = 8
=9					TP_SPHERE = 9
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_HORIZFIRE = 22  						; Horizontal fire
=23					GR1_VERTFIRE = 23  							; Vertical fire
=24					GR1_SWNEFIRE = 24   						; / fire
=25					GR1_NWSEFIRE = 25  							; \ fire
=26					GR4_ELECTRODES = 26  						; Set of 3 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 40 c1	jmp $c140			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c c1 c0	jmp $c0c1			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	8e c0 c0	stx $c0c0			stx 	NewObject 					; remember the new object
.c041	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c044	0a		asl a				asl 	a 							; double -> Y
.c045	a8		tay				tay
.c046	b9 14 c5	lda $c514,y			lda 	HandlerTable,y  			; put the handler address in.
.c049	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c04c	b9 15 c5	lda $c515,y			lda 	HandlerTable+1,y
.c04f	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c052					_COPos1:
.c052	20 10 c2	jsr $c210			jsr 	Random8Bit  				; value is 0-151
.c055	c9 98		cmp #$98			cmp 	#152
.c057	b0 f9		bcs $c052			bcs 	_COPos1
.c059	69 04		adc #$04			adc 	#4
.c05b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05e					_COPos2:
.c05e	20 10 c2	jsr $c210			jsr 	Random8Bit 					; value is 0-103
.c061	29 7f		and #$7f			and 	#$7F
.c063	c9 68		cmp #$68			cmp 	#104
.c065	b0 f7		bcs $c05e			bcs 	_COPos2
.c067	69 04		adc #$04			adc 	#4
.c069	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c06c	38		sec				sec   								; check Y centre offset
.c06d	e9 34		sbc #$34			sbc 	#52
.c06f	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c072	c9 27		cmp #$27			cmp 	#39
.c074	b0 0d		bcs $c083			bcs 	_COIsOkay
.c076	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c079	38		sec				sec
.c07a	e9 4b		sbc #$4b			sbc 	#75
.c07c	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c07f	c9 37		cmp #$37			cmp 	#55
.c081	90 cf		bcc $c052			bcc 	_COPos1
.c083					_COIsOkay:
.c083	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c085	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c088	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c08b	a9 ff		lda #$ff			lda 	#$FF
.c08d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c090	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c093	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c094	29 07		and #$07			and 	#7
.c096	1a		inc a				inc 	a
.c097	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c09a	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c09d	a9 01		lda #$01			lda 	#1
.c09f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0a2	a9 0a		lda #$0a			lda 	#10
.c0a4	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0a7	20 c1 c1	jsr $c1c1			jsr 	ChooseRandomDirection
.c0aa	a9 01		lda #$01			lda 	#MSG_INIT
.c0ac	20 28 c2	jsr $c228			jsr 	SendObjectMessage
.c0af	90 03		bcc $c0b4			bcc 	_1
.c0b1	20 5e c2	jsr $c25e			jsr 	DefaultHandler
.c0b4					_1:
.c0b4	20 65 c1	jsr $c165			jsr 	RedrawObject
.c0b7	60		rts				rts
.c0b8					_COAbsolute:
.c0b8	c9 00		cmp #$00			cmp 	#0
.c0ba	10 03		bpl $c0bf			bpl 	_COAExit
.c0bc	49 ff		eor #$ff			eor 	#$FF
.c0be	1a		inc a				inc 	a
.c0bf					_COAExit:
.c0bf	60		rts				rts
.c0c0					NewObject:
>c0c0	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0c1					MoveObjects:
.c0c1	ee 3f c1	inc $c13f			inc 	FrameCount
.c0c4	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0c6					_MOLoop:
.c0c6	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0c9	30 03		bmi $c0ce			bmi 	_MONoObject
.c0cb	20 d4 c0	jsr $c0d4			jsr 	_MoveOneObject
.c0ce					_MONoObject:
.c0ce	e8		inx				inx
.c0cf	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0d1	d0 f3		bne $c0c6			bne 	_MOLoop
.c0d3	60		rts				rts  								; cannot create, exit.
.c0d4					_MoveOneObject:
.c0d4	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0d7	d0 5a		bne $c133			bne 	_MONotMove
.c0d9	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0dc	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0df	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0e2	d0 10		bne $c0f4			bne 	_MONoProcess
.c0e4	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0e7	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0ea	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0ec	20 28 c2	jsr $c228			jsr 	SendObjectMessage
.c0ef	90 03		bcc $c0f4			bcc 	_1
.c0f1	20 5e c2	jsr $c25e			jsr 	DefaultHandler
.c0f4					_1:
.c0f4					_MONoProcess:
.c0f4	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0f7	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c0fa	4a		lsr a				lsr 	a
.c0fb	90 01		bcc $c0fe			bcc 	_MONotLeft
.c0fd	88		dey				dey
.c0fe					_MONotLeft:
.c0fe	4a		lsr a				lsr 	a
.c0ff	90 01		bcc $c102			bcc 	_MONotRight
.c101	c8		iny				iny
.c102					_MONotRight:
.c102	5a		phy				phy 								; new Y position on stack
.c103	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c106	4a		lsr a				lsr 	a
.c107	90 01		bcc $c10a			bcc 	_MONotUp
.c109	88		dey				dey
.c10a					_MONotUp:
.c10a	4a		lsr a				lsr 	a
.c10b	90 01		bcc $c10e			bcc 	_MONotDown
.c10d	c8		iny				iny
.c10e					_MONotDown:
.c10e	68		pla				pla 								; (A,Y) are new coordinates.
.c10f	c9 04		cmp #$04			cmp 	#4  						; check out of bounds.
.c111	90 21		bcc $c134			bcc 	_MOHitWall
.c113	c9 9c		cmp #$9c			cmp 	#156
.c115	b0 1d		bcs $c134			bcs 	_MOHitWall
.c117	c0 04		cpy #$04			cpy 	#4
.c119	90 19		bcc $c134			bcc 	_MOHitWall
.c11b	c0 6c		cpy #$6c			cpy 	#108
.c11d	b0 15		bcs $c134			bcs 	_MOHitWall
.c11f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c122	98		tya				tya
.c123	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c126	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c128	20 28 c2	jsr $c228			jsr 	SendObjectMessage
.c12b	90 03		bcc $c130			bcc 	_1
.c12d	20 5e c2	jsr $c25e			jsr 	DefaultHandler
.c130					_1:
.c130	20 65 c1	jsr $c165			jsr 	RedrawObject 				; repaint.
.c133					_MONotMove:
.c133	60		rts				rts
.c134					_MOHitWall:
.c134	a9 04		lda #$04			lda 	#MSG_HITWALL
.c136	20 28 c2	jsr $c228			jsr 	SendObjectMessage
.c139	90 03		bcc $c13e			bcc 	_1
.c13b	20 5e c2	jsr $c25e			jsr 	DefaultHandler
.c13e					_1:
.c13e	60		rts				rts
.c13f					FrameCount:
>c13f	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c140					ResetObjects:
.c140	a2 00		ldx #$00			ldx 	#0
.c142					_RSLoop:
.c142	a9 ff		lda #$ff			lda 	#$FF
.c144	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c147	e8		inx				inx
.c148	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c14a	d0 f6		bne $c142			bne 	_RSLoop
.c14c	60		rts				rts
.c14d					KillObject:
.c14d	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c150	d0 fb		bne $c14d			bne 	KillObject
.c152	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c154	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c157	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c15a	a9 03		lda #$03			lda 	#3  						; and hide it.
.c15c	8d 01 ff	sta $ff01			sta 	APIFunction
.c15f	a9 06		lda #$06			lda 	#6
.c161	8d 00 ff	sta $ff00			sta 	APICommand
.c164	60		rts				rts
.c165					RedrawObject:
.c165	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c168	d0 fb		bne $c165			bne 	RedrawObject
.c16a	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c16d	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c170	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c173	0a		asl a				asl 	a
.c174	8d 05 ff	sta $ff05			sta 	APIParams+1
.c177	2e 06 ff	rol $ff06			rol 	APIParams+2
.c17a	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c17d	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c180	0a		asl a				asl 	a
.c181	69 10		adc #$10			adc 	#16 						; allow for top area
.c183	8d 07 ff	sta $ff07			sta 	APIParams+3
.c186	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c189	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c18c	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c18e	f0 0e		beq $c19e			beq 	_ROUseSprite2
.c190	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c192	d0 03		bne $c197			bne 	_ROHasHorizonMovement
.c194	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c197					_ROHasHorizonMovement:
.c197	98		tya				tya 								; put bit 1 into carry.
.c198	4a		lsr a				lsr 	a
.c199	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c19c	90 03		bcc $c1a1			bcc 	_ROUseSprite
.c19e					_ROUseSprite2:
.c19e	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c1a1					_ROUseSprite:
.c1a1	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1a4	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1a7	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1a9	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1ac					_RONotLeft:
.c1ac	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1ae	20 28 c2	jsr $c228			jsr 	SendObjectMessage
.c1b1	90 03		bcc $c1b6			bcc 	_1
.c1b3	20 5e c2	jsr $c25e			jsr 	DefaultHandler
.c1b6					_1:
.c1b6	a9 02		lda #$02			lda 	#2  						; and draw it.
.c1b8	8d 01 ff	sta $ff01			sta 	APIFunction
.c1bb	a9 06		lda #$06			lda 	#6
.c1bd	8d 00 ff	sta $ff00			sta 	APICommand
.c1c0	60		rts				rts
.c1c1					ChooseRandomDirection:
.c1c1	20 10 c2	jsr $c210			jsr 	Random8Bit 					; get valid random direction
.c1c4	29 0f		and #$0f			and 	#15
.c1c6	f0 f9		beq $c1c1			beq 	ChooseRandomDirection 		; stationary (0)
.c1c8	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1cb	29 03		and #$03			and 	#3 							; check LR not both on.
.c1cd	c9 03		cmp #$03			cmp 	#3
.c1cf	f0 f0		beq $c1c1			beq 	ChooseRandomDirection
.c1d1	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c1d4	29 0c		and #$0c			and 	#12
.c1d6	c9 0c		cmp #$0c			cmp 	#12
.c1d8	f0 e7		beq $c1c1			beq 	ChooseRandomDirection
.c1da	60		rts				rts
.c1db					NoControlEffect:
.c1db	60		rts				rts
.c1dc					ChaseObject:
.c1dc	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c1df	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c1e2	20 fb c1	jsr $c1fb			jsr 	_ChaseCalculate
.c1e5	8d fa c1	sta $c1fa			sta 	_ChaseTemp
.c1e8	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c1eb	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c1ee	20 fb c1	jsr $c1fb			jsr 	_ChaseCalculate
.c1f1	0a		asl a				asl 	a
.c1f2	0a		asl a				asl 	a
.c1f3	0d fa c1	ora $c1fa			ora 	_ChaseTemp
.c1f6	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1f9	60		rts				rts
.c1fa					_ChaseTemp:
>c1fa	00						.byte 	0
.c1fb					_ChaseCalculate:
.c1fb	f0 08		beq $c205			beq 	_CCNoMove
.c1fd	90 03		bcc $c202			bcc 	_CCMoveRight
.c1ff	a9 02		lda #$02			lda 	#2
.c201	60		rts				rts
.c202					_CCMoveRight:
.c202	a9 01		lda #$01			lda 	#1
.c204	60		rts				rts
.c205					_CCNoMove:
.c205	a9 00		lda #$00			lda 	#0
.c207	60		rts				rts
.c208					ChasePlayer:
.c208	5a		phy				phy
.c209	a0 00		ldy #$00			ldy 	#0
.c20b	20 dc c1	jsr $c1dc			jsr 	ChaseObject
.c20e	7a		ply				ply
.c20f	60		rts				rts
.c210					Random8Bit:
.c210	5a		phy				phy
.c211	a0 08		ldy #$08			ldy 	#8
.c213	ad 26 c2	lda $c226			lda 	_R8SeedValue+0
.c216					_R8RandomLoop
.c216	0a		asl a				asl     a
.c217	2e 27 c2	rol $c227			rol 	_R8SeedValue+1
.c21a	90 02		bcc $c21e			bcc 	_R8NotSet
.c21c	49 39		eor #$39			eor 	#$39
.c21e					_R8NotSet:
.c21e	88		dey				dey
.c21f	d0 f5		bne $c216			bne 	_R8RandomLoop
.c221	8d 26 c2	sta $c226			sta 	_R8SeedValue+0
.c224	7a		ply				ply
.c225	60		rts				rts
.c226					_R8SeedValue
>c226	cd ab						.word 	$ABCD
.c228					SendObjectMessage:
.c228	48		pha				pha
.c229	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c22c	8d 37 c2	sta $c237			sta 	_SMCall+1
.c22f	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c232	8d 38 c2	sta $c238			sta 	_SMCall+2
.c235	68		pla				pla
.c236					_SMCall:
.c236	4c 00 00	jmp $0000			jmp 	$0000
.c239					SetObjectGraphic:
.c239	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c23c	1a		inc a				inc 	a
.c23d	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c240	60		rts				rts
.c241					CreateSingleObject:
.c241	da		phx				phx 								; create player missile object.
.c242	5a		phy				phy
.c243	20 18 c0	jsr $c018			jsr 	CreateObject
.c246	7a		ply				ply
.c247	fa		plx				plx
.c248	60		rts				rts
.c249					CopyStartPosition:
.c249	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c24c	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c24f	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c252	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c255	60		rts				rts
.c256					ChasePlayerY:
.c256	da		phx				phx
.c257	98		tya				tya
.c258	aa		tax				tax
.c259	20 08 c2	jsr $c208			jsr 	ChasePlayer
.c25c	fa		plx				plx
.c25d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c25e					DefaultHandler:
.c25e	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c260	d0 05		bne $c267			bne 	_1
.c262	20 72 c2	jsr $c272			jsr 	DefaultControl
.c265	18		clc				clc
.c266	60		rts				rts
.c267					_1:
.c267	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c269	d0 05		bne $c270			bne 	_1
.c26b	20 75 c2	jsr $c275			jsr 	DefaultHitWall
.c26e	18		clc				clc
.c26f	60		rts				rts
.c270					_1:
.c270	38		sec				sec
.c271	60		rts				rts
.c272					DefaultControl:
.c272	4c c1 c1	jmp $c1c1			jmp 	ChooseRandomDirection
.c275					DefaultHitWall:
.c275	4c c1 c1	jmp $c1c1			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c278					OHPlayer:
.c278	c9 01		cmp #$01			cmp 	#MSG_INIT
.c27a	d0 05		bne $c281			bne 	_1
.c27c	20 95 c2	jsr $c295			jsr 	OHPInitHandler
.c27f	18		clc				clc
.c280	60		rts				rts
.c281					_1:
.c281	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c283	d0 05		bne $c28a			bne 	_1
.c285	20 aa c2	jsr $c2aa			jsr 	OHPRepaintHandler
.c288	18		clc				clc
.c289	60		rts				rts
.c28a					_1:
.c28a	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c28c	d0 05		bne $c293			bne 	_1
.c28e	20 d9 c2	jsr $c2d9			jsr 	OHPControlHandler
.c291	18		clc				clc
.c292	60		rts				rts
.c293					_1:
.c293	38		sec				sec
.c294	60		rts				rts
.c295					OHPInitHandler:
.c295	a9 50		lda #$50			lda 	#160/2
.c297	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c29a	a9 40		lda #$40			lda 	#128/2
.c29c	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c29f	a9 02		lda #$02			lda 	#2
.c2a1	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c2a4	a9 01		lda #$01			lda 	#1
.c2a6	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c2a9	60		rts				rts
.c2aa					OHPRepaintHandler:
.c2aa	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c2ad	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c2b0	29 03		and #$03			and 	#3
.c2b2	d0 03		bne $c2b7			bne 	_OHPUseVertical
.c2b4	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c2b7					_OHPUseVertical:
.c2b7	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c2ba	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c2bd	98		tya				tya
.c2be	29 10		and #$10			and 	#16
.c2c0	f0 03		beq $c2c5			beq 	_OHPNoAlternate
.c2c2	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c2c5					_OHPNoAlternate:
.c2c5	60		rts				rts
.c2c6					OHPSetGraphic:
.c2c6	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c2c9	29 03		and #$03			and 	#3
.c2cb	d0 06		bne $c2d3			bne 	_OHPRHorizontal
.c2cd	a9 02		lda #$02			lda 	#GR_PLAYERV
.c2cf	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c2d2	60		rts				rts
.c2d3					_OHPRHorizontal:
.c2d3	a9 00		lda #$00			lda 	#GR_PLAYERH
.c2d5	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c2d8	60		rts				rts
.c2d9					OHPControlHandler:
.c2d9	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c2dc	d0 fb		bne $c2d9			bne 	OHPControlHandler
.c2de	a9 01		lda #$01			lda 	#1  						; and draw it.
.c2e0	8d 01 ff	sta $ff01			sta 	APIFunction
.c2e3	a9 07		lda #$07			lda 	#7
.c2e5	8d 00 ff	sta $ff00			sta 	APICommand
.c2e8					_OHPWait
.c2e8	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c2eb	d0 fb		bne $c2e8			bne 	_OHPWait
.c2ed	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c2f0	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c2f2	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c2f5	f0 0d		beq $c304			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c2f7	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c2fa	29 f0		and #$f0			and 	#$F0
.c2fc	d0 06		bne $c304			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c2fe	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c301	8d 17 c3	sta $c317			sta 	OHPLastDirection
.c304					_OHPNoSetLast:
.c304	ee 18 c3	inc $c318			inc 	OHPFireCount 				; fire one time in 15
.c307	ad 18 c3	lda $c318			lda 	OHPFireCount
.c30a	29 0f		and #$0f			and 	#15
.c30c	d0 05		bne $c313			bne 	_OHPNoFire
.c30e	a9 01		lda #$01			lda 	#1
.c310	20 41 c2	jsr $c241			jsr 	CreateSingleObject
.c313					_OHPNoFire:
.c313	20 c6 c2	jsr $c2c6			jsr 	OHPSetGraphic
.c316	60		rts				rts
.c317					OHPLastDirection:
>c317	02						.byte 	2
.c318					OHPFireCount:
>c318	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c319					OHMissile:
.c319	c9 01		cmp #$01			cmp 	#MSG_INIT
.c31b	d0 05		bne $c322			bne 	_1
.c31d	20 3f c3	jsr $c33f			jsr 	OHMInitHandler
.c320	18		clc				clc
.c321	60		rts				rts
.c322					_1:
.c322	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c324	d0 05		bne $c32b			bne 	_1
.c326	20 57 c3	jsr $c357			jsr 	OHMRepaintHandler
.c329	18		clc				clc
.c32a	60		rts				rts
.c32b					_1:
.c32b	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c32d	d0 05		bne $c334			bne 	_1
.c32f	20 77 c3	jsr $c377			jsr 	OHMControl
.c332	18		clc				clc
.c333	60		rts				rts
.c334					_1:
.c334	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c336	d0 05		bne $c33d			bne 	_1
.c338	20 78 c3	jsr $c378			jsr 	OHMHitWall
.c33b	18		clc				clc
.c33c	60		rts				rts
.c33d					_1:
.c33d	38		sec				sec
.c33e	60		rts				rts
.c33f					OHMInitHandler:
.c33f	a9 01		lda #$01			lda 	#1
.c341	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c344	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c347	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c34a	ad d8 e0	lda $e0d8			lda 	OBYPos
.c34d	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c350	ad 17 c3	lda $c317			lda 	OHPLastDirection 			; copy direction
.c353	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c356	60		rts				rts
.c357					OHMRepaintHandler:
.c357	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c35a	b9 67 c3	lda $c367,y			lda 	OHMGraphic,y 				; set graphic.
.c35d	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c360	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c363	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c366	60		rts				rts
.c367					OHMGraphic:
>c367	00 16 16 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c36b	17 19 18 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c36f	17 18 19 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c373	00 00 00 00					.byte 	0,0,0,0
.c377					OHMControl:
.c377	60		rts				rts
.c378					OHMHitWall:
.c378	20 4d c1	jsr $c14d			jsr 	KillObject
.c37b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c37c					OHHuman1:
.c37c	c9 01		cmp #$01			cmp 	#MSG_INIT
.c37e	d0 05		bne $c385			bne 	_1
.c380	20 a8 c3	jsr $c3a8			jsr 	OHHInitHandler1
.c383	18		clc				clc
.c384	60		rts				rts
.c385					_1:
.c385	38		sec				sec
.c386	60		rts				rts
.c387					OHHuman2:
.c387	c9 01		cmp #$01			cmp 	#MSG_INIT
.c389	d0 05		bne $c390			bne 	_1
.c38b	20 af c3	jsr $c3af			jsr 	OHHInitHandler2
.c38e	18		clc				clc
.c38f	60		rts				rts
.c390					_1:
.c390	38		sec				sec
.c391	60		rts				rts
.c392					OHHuman3:
.c392	c9 01		cmp #$01			cmp 	#MSG_INIT
.c394	d0 05		bne $c39b			bne 	_1
.c396	20 b6 c3	jsr $c3b6			jsr 	OHHInitHandler3
.c399	18		clc				clc
.c39a	60		rts				rts
.c39b					_1:
.c39b	38		sec				sec
.c39c	60		rts				rts
.c39d					OHHInitHandlerMain:
.c39d	a9 1e		lda #$1e			lda 	#30
.c39f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3a2	a9 0f		lda #$0f			lda 	#15
.c3a4	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3a7	60		rts				rts
.c3a8					OHHInitHandler1:
.c3a8	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c3aa	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c3ad	80 ee		bra $c39d			bra 	OHHInitHandlerMain
.c3af					OHHInitHandler2:
.c3af	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c3b1	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c3b4	80 e7		bra $c39d			bra 	OHHInitHandlerMain
.c3b6					OHHInitHandler3:
.c3b6	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c3b8	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c3bb	80 e0		bra $c39d			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c3bd					OHGrunt:
.c3bd	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3bf	d0 05		bne $c3c6			bne 	_1
.c3c1	20 d1 c3	jsr $c3d1			jsr 	OHGInitHandler
.c3c4	18		clc				clc
.c3c5	60		rts				rts
.c3c6					_1:
.c3c6	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3c8	d0 05		bne $c3cf			bne 	_1
.c3ca	20 08 c2	jsr $c208			jsr 	ChasePlayer
.c3cd	18		clc				clc
.c3ce	60		rts				rts
.c3cf					_1:
.c3cf	38		sec				sec
.c3d0	60		rts				rts
.c3d1					OHGInitHandler:
.c3d1	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c3d3	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c3d6	a9 20		lda #$20			lda 	#32
.c3d8	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3db	a9 01		lda #$01			lda 	#1
.c3dd	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3e0	a9 00		lda #$00			lda 	#($100 & 255)
.c3e2	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c3e5	a9 01		lda #$01			lda 	#($100 >> 8)
.c3e7	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c3ea	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c3eb					OHHulk:
.c3eb	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3ed	d0 05		bne $c3f4			bne 	_1
.c3ef	20 ff c3	jsr $c3ff			jsr 	OHHUInitHandler
.c3f2	18		clc				clc
.c3f3	60		rts				rts
.c3f4					_1:
.c3f4	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3f6	d0 05		bne $c3fd			bne 	_1
.c3f8	20 08 c2	jsr $c208			jsr 	ChasePlayer
.c3fb	18		clc				clc
.c3fc	60		rts				rts
.c3fd					_1:
.c3fd	38		sec				sec
.c3fe	60		rts				rts
.c3ff					OHHUInitHandler:
.c3ff	a9 0a		lda #$0a			lda 	#GR_HULK
.c401	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c404	a9 40		lda #$40			lda 	#64
.c406	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c409	a9 01		lda #$01			lda 	#1
.c40b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c40e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c40f					OHSphere:
.c40f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c411	d0 05		bne $c418			bne 	_1
.c413	20 35 c4	jsr $c435			jsr 	OHSInitHandler
.c416	18		clc				clc
.c417	60		rts				rts
.c418					_1:
.c418	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c41a	d0 05		bne $c421			bne 	_1
.c41c	20 57 c4	jsr $c457			jsr 	OHSControl
.c41f	18		clc				clc
.c420	60		rts				rts
.c421					_1:
.c421	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c423	d0 05		bne $c42a			bne 	_1
.c425	20 64 c4	jsr $c464			jsr 	OHSCheckFire
.c428	18		clc				clc
.c429	60		rts				rts
.c42a					_1:
.c42a	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c42c	d0 05		bne $c433			bne 	_1
.c42e	20 78 c4	jsr $c478			jsr 	OHSRepaint
.c431	18		clc				clc
.c432	60		rts				rts
.c433					_1:
.c433	38		sec				sec
.c434	60		rts				rts
.c435					OHSInitHandler:
.c435	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c437	20 39 c2	jsr $c239			jsr 	SetObjectGraphic
.c43a	a9 08		lda #$08			lda 	#8
.c43c	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c43f	a9 28		lda #$28			lda 	#40
.c441	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c444	a9 00		lda #$00			lda 	#($1000 & 255)
.c446	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c449	a9 10		lda #$10			lda 	#($1000 >> 8)
.c44b	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c44e	20 10 c2	jsr $c210			jsr 	Random8Bit
.c451	29 3f		and #$3f			and 	#63
.c453	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c456	60		rts				rts
.c457					OHSControl:
.c457	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c45a	d0 04		bne $c460			bne 	_OHSNoMove
.c45c	20 c1 c1	jsr $c1c1			jsr		ChooseRandomDirection
.c45f	60		rts				rts
.c460					_OHSNoMove:
.c460	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c463	60		rts				rts
.c464					OHSCheckFire:
.c464	20 10 c2	jsr $c210			jsr 	Random8Bit
.c467	29 1f		and #$1f			and 	#31
.c469	d0 0c		bne $c477			bne 	_OHSCFExit
.c46b	a9 08		lda #$08			lda 	#TP_ENFORCER
.c46d	20 41 c2	jsr $c241			jsr 	CreateSingleObject
.c470	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c473	20 49 c2	jsr $c249			jsr 	CopyStartPosition
.c476	60		rts				rts
.c477					_OHSCFExit:
.c477	60		rts				rts
.c478					OHSRepaint:
.c478	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c47b	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c47e	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c481	4a		lsr a				lsr 	a
.c482	2e 09 ff	rol $ff09			rol 	APIParams+5
.c485	60		rts				rts
.c486					OHEnforcer:
.c486	c9 01		cmp #$01			cmp 	#MSG_INIT
.c488	d0 05		bne $c48f			bne 	_1
.c48a	20 a3 c4	jsr $c4a3			jsr 	OHENInitHandler
.c48d	18		clc				clc
.c48e	60		rts				rts
.c48f					_1:
.c48f	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c491	d0 05		bne $c498			bne 	_1
.c493	20 08 c2	jsr $c208			jsr 	ChasePlayer
.c496	18		clc				clc
.c497	60		rts				rts
.c498					_1:
.c498	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c49a	d0 05		bne $c4a1			bne 	_1
.c49c	20 c0 c4	jsr $c4c0			jsr 	OHENCheckFire
.c49f	18		clc				clc
.c4a0	60		rts				rts
.c4a1					_1:
.c4a1	38		sec				sec
.c4a2	60		rts				rts
.c4a3					OHENInitHandler:
.c4a3	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c4a5	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c4a8	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c4ab	a9 0f		lda #$0f			lda 	#15
.c4ad	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c4b0	a9 1e		lda #$1e			lda 	#30
.c4b2	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c4b5	a9 50		lda #$50			lda 	#($150 & 255)
.c4b7	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c4ba	a9 01		lda #$01			lda 	#($150 >> 8)
.c4bc	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c4bf	60		rts				rts
.c4c0					OHENCheckFire:
.c4c0	20 10 c2	jsr $c210			jsr 	Random8Bit
.c4c3	29 1f		and #$1f			and 	#31
.c4c5	d0 0f		bne $c4d6			bne 	_OHENCFExit
.c4c7	a9 07		lda #$07			lda 	#TP_ESPARK
.c4c9	20 41 c2	jsr $c241			jsr 	CreateSingleObject
.c4cc	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c4cf	20 49 c2	jsr $c249			jsr 	CopyStartPosition
.c4d2	20 56 c2	jsr $c256			jsr 	ChasePlayerY
.c4d5	60		rts				rts
.c4d6					_OHENCFExit:
.c4d6	60		rts				rts
.c4d7					OHESpark:
.c4d7	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4d9	d0 05		bne $c4e0			bne 	_1
.c4db	20 f4 c4	jsr $c4f4			jsr 	OHESInitHandler
.c4de	18		clc				clc
.c4df	60		rts				rts
.c4e0					_1:
.c4e0	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c4e2	d0 05		bne $c4e9			bne 	_1
.c4e4	20 4d c1	jsr $c14d			jsr 	KillObject
.c4e7	18		clc				clc
.c4e8	60		rts				rts
.c4e9					_1:
.c4e9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c4eb	d0 05		bne $c4f2			bne 	_1
.c4ed	20 db c1	jsr $c1db			jsr 	NoControlEffect
.c4f0	18		clc				clc
.c4f1	60		rts				rts
.c4f2					_1:
.c4f2	38		sec				sec
.c4f3	60		rts				rts
.c4f4					OHESInitHandler:
.c4f4	20 08 c2	jsr $c208			jsr 	ChasePlayer
.c4f7	a9 1f		lda #$1f			lda 	#GR1_MISSILE2
.c4f9	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c4fc	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c4ff	a9 07		lda #$07			lda 	#7
.c501	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c504	a9 ff		lda #$ff			lda 	#255
.c506	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c509	a9 25		lda #$25			lda 	#($25 & 255)
.c50b	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c50e	a9 00		lda #$00			lda 	#($25 >> 8)
.c510	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c513	60		rts				rts

;******  Return to file: main.asm

.c514					HandlerTable:
>c514	78 c2						.word 		OHPlayer 				; type 0, player object
>c516	19 c3						.word 		OHMissile 				; type 1, player missile object
>c518	7c c3						.word 		OHHuman1 				; type 2-4 humans
>c51a	87 c3						.word 		OHHuman2
>c51c	92 c3						.word 		OHHuman3
>c51e	bd c3						.word 		OHGrunt 				; type 5 grunt
>c520	eb c3						.word 		OHHulk 					; type 6 hulk
>c522	d7 c4						.word 		OHESpark 				; type 7 Enforcer Sparks.
>c524	86 c4						.word 		OHEnforcer 				; type 8 Enforcer
>c526	0f c4						.word 		OHSphere 				; type 9 Sphere

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
