
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Wed Apr 24 04:25:06 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=5					TP_GRUNT = 5
=6					TP_HULK = 6
=7					TP_ESPARK = 7
=8					TP_ENFORCER = 8
=9					TP_SPHERE = 9
=10					TP_SHELL = 10
=11					TP_TANK = 11
=12					TP_QUARK = 12
=13					TP_ELECTRODE = 13
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_ROBOT = 22 								; Robot (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 79 c1	jmp $c179			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c 8e c6	jmp $c68e			jmp 	MainLoop 					; $C006 main loop code.

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	8e c0 c0	stx $c0c0			stx 	NewObject 					; remember the new object
.c041	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c044	0a		asl a				asl 	a 							; double -> Y
.c045	a8		tay				tay
.c046	b9 95 c6	lda $c695,y			lda 	HandlerTable,y  			; put the handler address in.
.c049	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c04c	b9 96 c6	lda $c696,y			lda 	HandlerTable+1,y
.c04f	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c052					_COPos1:
.c052	20 49 c2	jsr $c249			jsr 	Random8Bit  				; value is 0-151
.c055	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c057	b0 f9		bcs $c052			bcs 	_COPos1
.c059	69 04		adc #$04			adc 	#PF_LEFT
.c05b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05e					_COPos2:
.c05e	20 49 c2	jsr $c249			jsr 	Random8Bit 					; value is 0-103
.c061	29 7f		and #$7f			and 	#$7F
.c063	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c065	b0 f7		bcs $c05e			bcs 	_COPos2
.c067	69 04		adc #$04			adc 	#PF_TOP
.c069	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c06c	38		sec				sec   								; check Y centre offset
.c06d	e9 34		sbc #$34			sbc 	#52
.c06f	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c072	c9 27		cmp #$27			cmp 	#39
.c074	b0 0d		bcs $c083			bcs 	_COIsOkay
.c076	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c079	38		sec				sec
.c07a	e9 4b		sbc #$4b			sbc 	#75
.c07c	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c07f	c9 37		cmp #$37			cmp 	#55
.c081	90 cf		bcc $c052			bcc 	_COPos1
.c083					_COIsOkay:
.c083	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c085	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c088	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c08b	a9 ff		lda #$ff			lda 	#$FF
.c08d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c090	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c093	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c094	29 07		and #$07			and 	#7
.c096	1a		inc a				inc 	a
.c097	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c09a	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c09d	a9 01		lda #$01			lda 	#1
.c09f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0a2	a9 0a		lda #$0a			lda 	#10
.c0a4	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0a7	20 fa c1	jsr $c1fa			jsr 	ChooseRandomDirection
.c0aa	a9 01		lda #$01			lda 	#MSG_INIT
.c0ac	20 61 c2	jsr $c261			jsr 	SendObjectMessage
.c0af	90 03		bcc $c0b4			bcc 	_1
.c0b1	20 97 c2	jsr $c297			jsr 	DefaultHandler
.c0b4					_1:
.c0b4	20 9e c1	jsr $c19e			jsr 	RedrawObject
.c0b7	60		rts				rts
.c0b8					_COAbsolute:
.c0b8	c9 00		cmp #$00			cmp 	#0
.c0ba	10 03		bpl $c0bf			bpl 	_COAExit
.c0bc	49 ff		eor #$ff			eor 	#$FF
.c0be	1a		inc a				inc 	a
.c0bf					_COAExit:
.c0bf	60		rts				rts
.c0c0					NewObject:
>c0c0	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0c1					MoveObjects:
.c0c1	ee 44 c1	inc $c144			inc 	FrameCount
.c0c4	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0c6					_MOLoop:
.c0c6	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0c9	30 03		bmi $c0ce			bmi 	_MONoObject
.c0cb	20 d4 c0	jsr $c0d4			jsr 	_MoveOneObject
.c0ce					_MONoObject:
.c0ce	e8		inx				inx
.c0cf	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0d1	d0 f3		bne $c0c6			bne 	_MOLoop
.c0d3	60		rts				rts  								; cannot create, exit.
.c0d4					_MoveOneObject:
.c0d4	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0d7	d0 5f		bne $c138			bne 	_MONotMove
.c0d9	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0dc	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0df	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0e2	d0 10		bne $c0f4			bne 	_MONoProcess
.c0e4	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0e7	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0ea	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0ec	20 61 c2	jsr $c261			jsr 	SendObjectMessage
.c0ef	90 03		bcc $c0f4			bcc 	_1
.c0f1	20 97 c2	jsr $c297			jsr 	DefaultHandler
.c0f4					_1:
.c0f4					_MONoProcess:
.c0f4	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0f7	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c0fa	4a		lsr a				lsr 	a
.c0fb	90 01		bcc $c0fe			bcc 	_MONotLeft
.c0fd	88		dey				dey
.c0fe					_MONotLeft:
.c0fe	4a		lsr a				lsr 	a
.c0ff	90 01		bcc $c102			bcc 	_MONotRight
.c101	c8		iny				iny
.c102					_MONotRight:
.c102	5a		phy				phy 								; new Y position on stack
.c103	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c106	4a		lsr a				lsr 	a
.c107	90 01		bcc $c10a			bcc 	_MONotUp
.c109	88		dey				dey
.c10a					_MONotUp:
.c10a	4a		lsr a				lsr 	a
.c10b	90 01		bcc $c10e			bcc 	_MONotDown
.c10d	c8		iny				iny
.c10e					_MONotDown:
.c10e	68		pla				pla 								; (A,Y) are new coordinates.
.c10f	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c111	90 26		bcc $c139			bcc 	_MOHitWall
.c113	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c115	b0 22		bcs $c139			bcs 	_MOHitWall
.c117	c0 04		cpy #$04			cpy 	#PF_TOP
.c119	90 1e		bcc $c139			bcc 	_MOHitWall
.c11b	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c11d	b0 1a		bcs $c139			bcs 	_MOHitWall
.c11f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c122	98		tya				tya
.c123	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c126	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c128	20 61 c2	jsr $c261			jsr 	SendObjectMessage
.c12b	90 03		bcc $c130			bcc 	_1
.c12d	20 97 c2	jsr $c297			jsr 	DefaultHandler
.c130					_1:
.c130	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c133	30 03		bmi $c138			bmi 	_MONotMove
.c135	20 9e c1	jsr $c19e			jsr 	RedrawObject 				; repaint.
.c138					_MONotMove:
.c138	60		rts				rts
.c139					_MOHitWall:
.c139	a9 04		lda #$04			lda 	#MSG_HITWALL
.c13b	20 61 c2	jsr $c261			jsr 	SendObjectMessage
.c13e	90 03		bcc $c143			bcc 	_1
.c140	20 97 c2	jsr $c297			jsr 	DefaultHandler
.c143					_1:
.c143	60		rts				rts
.c144					FrameCount:
>c144	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c145					AnimatePalette:
.c145	ad 00 ff	lda $ff00			lda 	APICommand
.c148	d0 fb		bne $c145			bne 	AnimatePalette
.c14a	ee 78 c1	inc $c178			inc 	_APCount
.c14d	ad 78 c1	lda $c178			lda 	_APCount
.c150	4a		lsr a				lsr 	a
.c151	a0 01		ldy #$01			ldy 	#1
.c153	20 6c c1	jsr $c16c			jsr 	_APBit
.c156	20 6c c1	jsr $c16c			jsr 	_APBit
.c159	20 6c c1	jsr $c16c			jsr 	_APBit
.c15c	a9 e0		lda #$e0			lda 	#14*16
.c15e	8d 04 ff	sta $ff04			sta 	APIParams
.c161	a9 20		lda #$20			lda 	#32
.c163	8d 01 ff	sta $ff01			sta 	APIFunction
.c166	a9 05		lda #$05			lda 	#5
.c168	8d 00 ff	sta $ff00			sta 	APICommand
.c16b	60		rts				rts
.c16c					_APBit:
.c16c	4a		lsr a				lsr 	a
.c16d	48		pha				pha
.c16e	a9 00		lda #$00			lda 	#0
.c170	e9 00		sbc #$00			sbc 	#0
.c172	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c175	c8		iny				iny
.c176	68		pla				pla
.c177	60		rts				rts
.c178					_APCount:
>c178	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c179					ResetObjects:
.c179	a2 00		ldx #$00			ldx 	#0
.c17b					_RSLoop:
.c17b	a9 ff		lda #$ff			lda 	#$FF
.c17d	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c180	e8		inx				inx
.c181	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c183	d0 f6		bne $c17b			bne 	_RSLoop
.c185	60		rts				rts
.c186					KillObject:
.c186	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c189	d0 fb		bne $c186			bne 	KillObject
.c18b	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c18d	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c190	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c193	a9 03		lda #$03			lda 	#3  						; and hide it.
.c195	8d 01 ff	sta $ff01			sta 	APIFunction
.c198	a9 06		lda #$06			lda 	#6
.c19a	8d 00 ff	sta $ff00			sta 	APICommand
.c19d	60		rts				rts
.c19e					RedrawObject:
.c19e	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1a1	d0 fb		bne $c19e			bne 	RedrawObject
.c1a3	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1a6	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1a9	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1ac	0a		asl a				asl 	a
.c1ad	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1b0	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1b3	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1b6	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1b9	0a		asl a				asl 	a
.c1ba	69 08		adc #$08			adc 	#8 							; allow for top area
.c1bc	8d 07 ff	sta $ff07			sta 	APIParams+3
.c1bf	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c1c2	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c1c5	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c1c7	f0 0e		beq $c1d7			beq 	_ROUseSprite2
.c1c9	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c1cb	d0 03		bne $c1d0			bne 	_ROHasHorizonMovement
.c1cd	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c1d0					_ROHasHorizonMovement:
.c1d0	98		tya				tya 								; put bit 1 into carry.
.c1d1	4a		lsr a				lsr 	a
.c1d2	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c1d5	90 03		bcc $c1da			bcc 	_ROUseSprite
.c1d7					_ROUseSprite2:
.c1d7	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c1da					_ROUseSprite:
.c1da	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1dd	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1e0	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1e2	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1e5					_RONotLeft:
.c1e5	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1e7	20 61 c2	jsr $c261			jsr 	SendObjectMessage
.c1ea	90 03		bcc $c1ef			bcc 	_1
.c1ec	20 97 c2	jsr $c297			jsr 	DefaultHandler
.c1ef					_1:
.c1ef	a9 02		lda #$02			lda 	#2  						; and draw it.
.c1f1	8d 01 ff	sta $ff01			sta 	APIFunction
.c1f4	a9 06		lda #$06			lda 	#6
.c1f6	8d 00 ff	sta $ff00			sta 	APICommand
.c1f9	60		rts				rts
.c1fa					ChooseRandomDirection:
.c1fa	20 49 c2	jsr $c249			jsr 	Random8Bit 					; get valid random direction
.c1fd	29 0f		and #$0f			and 	#15
.c1ff	f0 f9		beq $c1fa			beq 	ChooseRandomDirection 		; stationary (0)
.c201	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c204	29 03		and #$03			and 	#3 							; check LR not both on.
.c206	c9 03		cmp #$03			cmp 	#3
.c208	f0 f0		beq $c1fa			beq 	ChooseRandomDirection
.c20a	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c20d	29 0c		and #$0c			and 	#12
.c20f	c9 0c		cmp #$0c			cmp 	#12
.c211	f0 e7		beq $c1fa			beq 	ChooseRandomDirection
.c213	60		rts				rts
.c214					NoControlEffect:
.c214	60		rts				rts
.c215					ChaseObject:
.c215	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c218	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c21b	20 34 c2	jsr $c234			jsr 	_ChaseCalculate
.c21e	8d 33 c2	sta $c233			sta 	_ChaseTemp
.c221	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c224	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c227	20 34 c2	jsr $c234			jsr 	_ChaseCalculate
.c22a	0a		asl a				asl 	a
.c22b	0a		asl a				asl 	a
.c22c	0d 33 c2	ora $c233			ora 	_ChaseTemp
.c22f	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c232	60		rts				rts
.c233					_ChaseTemp:
>c233	00						.byte 	0
.c234					_ChaseCalculate:
.c234	f0 08		beq $c23e			beq 	_CCNoMove
.c236	90 03		bcc $c23b			bcc 	_CCMoveRight
.c238	a9 02		lda #$02			lda 	#2
.c23a	60		rts				rts
.c23b					_CCMoveRight:
.c23b	a9 01		lda #$01			lda 	#1
.c23d	60		rts				rts
.c23e					_CCNoMove:
.c23e	a9 00		lda #$00			lda 	#0
.c240	60		rts				rts
.c241					ChasePlayer:
.c241	5a		phy				phy
.c242	a0 00		ldy #$00			ldy 	#0
.c244	20 15 c2	jsr $c215			jsr 	ChaseObject
.c247	7a		ply				ply
.c248	60		rts				rts
.c249					Random8Bit:
.c249	5a		phy				phy
.c24a	a0 08		ldy #$08			ldy 	#8
.c24c	ad 5f c2	lda $c25f			lda 	_R8SeedValue+0
.c24f					_R8RandomLoop
.c24f	0a		asl a				asl     a
.c250	2e 60 c2	rol $c260			rol 	_R8SeedValue+1
.c253	90 02		bcc $c257			bcc 	_R8NotSet
.c255	49 39		eor #$39			eor 	#$39
.c257					_R8NotSet:
.c257	88		dey				dey
.c258	d0 f5		bne $c24f			bne 	_R8RandomLoop
.c25a	8d 5f c2	sta $c25f			sta 	_R8SeedValue+0
.c25d	7a		ply				ply
.c25e	60		rts				rts
.c25f					_R8SeedValue
>c25f	cd ab						.word 	$ABCD
.c261					SendObjectMessage:
.c261	48		pha				pha
.c262	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c265	8d 70 c2	sta $c270			sta 	_SMCall+1
.c268	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c26b	8d 71 c2	sta $c271			sta 	_SMCall+2
.c26e	68		pla				pla
.c26f					_SMCall:
.c26f	4c 00 00	jmp $0000			jmp 	$0000
.c272					SetObjectGraphic:
.c272	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c275	1a		inc a				inc 	a
.c276	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c279	60		rts				rts
.c27a					CreateSingleObject:
.c27a	da		phx				phx 								; create player missile object.
.c27b	5a		phy				phy
.c27c	20 18 c0	jsr $c018			jsr 	CreateObject
.c27f	7a		ply				ply
.c280	fa		plx				plx
.c281	60		rts				rts
.c282					CopyStartPosition:
.c282	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c285	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c288	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c28b	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c28e	60		rts				rts
.c28f					ChasePlayerY:
.c28f	da		phx				phx
.c290	98		tya				tya
.c291	aa		tax				tax
.c292	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c295	fa		plx				plx
.c296	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c297					DefaultHandler:
.c297	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c299	d0 05		bne $c2a0			bne 	_1
.c29b	20 ab c2	jsr $c2ab			jsr 	DefaultControl
.c29e	18		clc				clc
.c29f	60		rts				rts
.c2a0					_1:
.c2a0	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c2a2	d0 05		bne $c2a9			bne 	_1
.c2a4	20 ae c2	jsr $c2ae			jsr 	DefaultHitWall
.c2a7	18		clc				clc
.c2a8	60		rts				rts
.c2a9					_1:
.c2a9	38		sec				sec
.c2aa	60		rts				rts
.c2ab					DefaultControl:
.c2ab	4c fa c1	jmp $c1fa			jmp 	ChooseRandomDirection
.c2ae					DefaultHitWall:
.c2ae	4c fa c1	jmp $c1fa			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c2b1					OHPlayer:
.c2b1	c9 01		cmp #$01			cmp 	#MSG_INIT
.c2b3	d0 05		bne $c2ba			bne 	_1
.c2b5	20 ce c2	jsr $c2ce			jsr 	OHPInitHandler
.c2b8	18		clc				clc
.c2b9	60		rts				rts
.c2ba					_1:
.c2ba	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c2bc	d0 05		bne $c2c3			bne 	_1
.c2be	20 e3 c2	jsr $c2e3			jsr 	OHPRepaintHandler
.c2c1	18		clc				clc
.c2c2	60		rts				rts
.c2c3					_1:
.c2c3	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c2c5	d0 05		bne $c2cc			bne 	_1
.c2c7	20 12 c3	jsr $c312			jsr 	OHPControlHandler
.c2ca	18		clc				clc
.c2cb	60		rts				rts
.c2cc					_1:
.c2cc	38		sec				sec
.c2cd	60		rts				rts
.c2ce					OHPInitHandler:
.c2ce	a9 50		lda #$50			lda 	#160/2
.c2d0	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c2d3	a9 40		lda #$40			lda 	#128/2
.c2d5	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2d8	a9 02		lda #$02			lda 	#2
.c2da	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c2dd	a9 01		lda #$01			lda 	#1
.c2df	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c2e2	60		rts				rts
.c2e3					OHPRepaintHandler:
.c2e3	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c2e6	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c2e9	29 03		and #$03			and 	#3
.c2eb	d0 03		bne $c2f0			bne 	_OHPUseVertical
.c2ed	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c2f0					_OHPUseVertical:
.c2f0	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c2f3	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c2f6	98		tya				tya
.c2f7	29 10		and #$10			and 	#16
.c2f9	f0 03		beq $c2fe			beq 	_OHPNoAlternate
.c2fb	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c2fe					_OHPNoAlternate:
.c2fe	60		rts				rts
.c2ff					OHPSetGraphic:
.c2ff	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c302	29 03		and #$03			and 	#3
.c304	d0 06		bne $c30c			bne 	_OHPRHorizontal
.c306	a9 02		lda #$02			lda 	#GR_PLAYERV
.c308	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c30b	60		rts				rts
.c30c					_OHPRHorizontal:
.c30c	a9 00		lda #$00			lda 	#GR_PLAYERH
.c30e	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c311	60		rts				rts
.c312					OHPControlHandler:
.c312	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c315	d0 fb		bne $c312			bne 	OHPControlHandler
.c317	a9 01		lda #$01			lda 	#1  						; and draw it.
.c319	8d 01 ff	sta $ff01			sta 	APIFunction
.c31c	a9 07		lda #$07			lda 	#7
.c31e	8d 00 ff	sta $ff00			sta 	APICommand
.c321					_OHPWait
.c321	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c324	d0 fb		bne $c321			bne 	_OHPWait
.c326	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c329	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c32b	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c32e	f0 0d		beq $c33d			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c330	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c333	29 f0		and #$f0			and 	#$F0
.c335	d0 06		bne $c33d			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c337	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c33a	8d 50 c3	sta $c350			sta 	OHPLastDirection
.c33d					_OHPNoSetLast:
.c33d	ee 51 c3	inc $c351			inc 	OHPFireCount 				; fire one time in 15
.c340	ad 51 c3	lda $c351			lda 	OHPFireCount
.c343	29 0f		and #$0f			and 	#15
.c345	d0 05		bne $c34c			bne 	_OHPNoFire
.c347	a9 01		lda #$01			lda 	#1
.c349	20 7a c2	jsr $c27a			jsr 	CreateSingleObject
.c34c					_OHPNoFire:
.c34c	20 ff c2	jsr $c2ff			jsr 	OHPSetGraphic
.c34f	60		rts				rts
.c350					OHPLastDirection:
>c350	02						.byte 	2
.c351					OHPFireCount:
>c351	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c352					OHMissile:
.c352	c9 01		cmp #$01			cmp 	#MSG_INIT
.c354	d0 05		bne $c35b			bne 	_1
.c356	20 78 c3	jsr $c378			jsr 	OHMInitHandler
.c359	18		clc				clc
.c35a	60		rts				rts
.c35b					_1:
.c35b	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c35d	d0 05		bne $c364			bne 	_1
.c35f	20 90 c3	jsr $c390			jsr 	OHMRepaintHandler
.c362	18		clc				clc
.c363	60		rts				rts
.c364					_1:
.c364	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c366	d0 05		bne $c36d			bne 	_1
.c368	20 b0 c3	jsr $c3b0			jsr 	OHMControl
.c36b	18		clc				clc
.c36c	60		rts				rts
.c36d					_1:
.c36d	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c36f	d0 05		bne $c376			bne 	_1
.c371	20 b1 c3	jsr $c3b1			jsr 	OHMHitWall
.c374	18		clc				clc
.c375	60		rts				rts
.c376					_1:
.c376	38		sec				sec
.c377	60		rts				rts
.c378					OHMInitHandler:
.c378	a9 01		lda #$01			lda 	#1
.c37a	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c37d	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c380	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c383	ad d8 e0	lda $e0d8			lda 	OBYPos
.c386	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c389	ad 50 c3	lda $c350			lda 	OHPLastDirection 			; copy direction
.c38c	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c38f	60		rts				rts
.c390					OHMRepaintHandler:
.c390	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c393	b9 a0 c3	lda $c3a0,y			lda 	OHMGraphic,y 				; set graphic.
.c396	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c399	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c39c	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c39f	60		rts				rts
.c3a0					OHMGraphic:
>c3a0	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c3a4	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c3a8	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c3ac	00 00 00 00					.byte 	0,0,0,0
.c3b0					OHMControl:
.c3b0	60		rts				rts
.c3b1					OHMHitWall:
.c3b1	20 86 c1	jsr $c186			jsr 	KillObject
.c3b4	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c3b5					OHHuman1:
.c3b5	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3b7	d0 05		bne $c3be			bne 	_1
.c3b9	20 e1 c3	jsr $c3e1			jsr 	OHHInitHandler1
.c3bc	18		clc				clc
.c3bd	60		rts				rts
.c3be					_1:
.c3be	38		sec				sec
.c3bf	60		rts				rts
.c3c0					OHHuman2:
.c3c0	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3c2	d0 05		bne $c3c9			bne 	_1
.c3c4	20 e8 c3	jsr $c3e8			jsr 	OHHInitHandler2
.c3c7	18		clc				clc
.c3c8	60		rts				rts
.c3c9					_1:
.c3c9	38		sec				sec
.c3ca	60		rts				rts
.c3cb					OHHuman3:
.c3cb	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3cd	d0 05		bne $c3d4			bne 	_1
.c3cf	20 ef c3	jsr $c3ef			jsr 	OHHInitHandler3
.c3d2	18		clc				clc
.c3d3	60		rts				rts
.c3d4					_1:
.c3d4	38		sec				sec
.c3d5	60		rts				rts
.c3d6					OHHInitHandlerMain:
.c3d6	a9 1e		lda #$1e			lda 	#30
.c3d8	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3db	a9 0f		lda #$0f			lda 	#15
.c3dd	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3e0	60		rts				rts
.c3e1					OHHInitHandler1:
.c3e1	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c3e3	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c3e6	80 ee		bra $c3d6			bra 	OHHInitHandlerMain
.c3e8					OHHInitHandler2:
.c3e8	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c3ea	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c3ed	80 e7		bra $c3d6			bra 	OHHInitHandlerMain
.c3ef					OHHInitHandler3:
.c3ef	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c3f1	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c3f4	80 e0		bra $c3d6			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c3f6					OHGrunt:
.c3f6	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3f8	d0 05		bne $c3ff			bne 	_1
.c3fa	20 0a c4	jsr $c40a			jsr 	OHGInitHandler
.c3fd	18		clc				clc
.c3fe	60		rts				rts
.c3ff					_1:
.c3ff	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c401	d0 05		bne $c408			bne 	_1
.c403	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c406	18		clc				clc
.c407	60		rts				rts
.c408					_1:
.c408	38		sec				sec
.c409	60		rts				rts
.c40a					OHGInitHandler:
.c40a	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c40c	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c40f	a9 20		lda #$20			lda 	#32
.c411	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c414	a9 01		lda #$01			lda 	#1
.c416	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c419	a9 00		lda #$00			lda 	#($100 & 255)
.c41b	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c41e	a9 01		lda #$01			lda 	#($100 >> 8)
.c420	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c423	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c424					OHHulk:
.c424	c9 01		cmp #$01			cmp 	#MSG_INIT
.c426	d0 05		bne $c42d			bne 	_1
.c428	20 38 c4	jsr $c438			jsr 	OHHUInitHandler
.c42b	18		clc				clc
.c42c	60		rts				rts
.c42d					_1:
.c42d	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c42f	d0 05		bne $c436			bne 	_1
.c431	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c434	18		clc				clc
.c435	60		rts				rts
.c436					_1:
.c436	38		sec				sec
.c437	60		rts				rts
.c438					OHHUInitHandler:
.c438	a9 0a		lda #$0a			lda 	#GR_HULK
.c43a	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c43d	a9 40		lda #$40			lda 	#64
.c43f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c442	a9 01		lda #$01			lda 	#1
.c444	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c447	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c448					OHSphere:
.c448	c9 01		cmp #$01			cmp 	#MSG_INIT
.c44a	d0 05		bne $c451			bne 	_1
.c44c	20 6e c4	jsr $c46e			jsr 	OHSInitHandler
.c44f	18		clc				clc
.c450	60		rts				rts
.c451					_1:
.c451	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c453	d0 05		bne $c45a			bne 	_1
.c455	20 90 c4	jsr $c490			jsr 	OHSControl
.c458	18		clc				clc
.c459	60		rts				rts
.c45a					_1:
.c45a	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c45c	d0 05		bne $c463			bne 	_1
.c45e	20 9d c4	jsr $c49d			jsr 	OHSCheckFire
.c461	18		clc				clc
.c462	60		rts				rts
.c463					_1:
.c463	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c465	d0 05		bne $c46c			bne 	_1
.c467	20 b1 c4	jsr $c4b1			jsr 	OHSRepaint
.c46a	18		clc				clc
.c46b	60		rts				rts
.c46c					_1:
.c46c	38		sec				sec
.c46d	60		rts				rts
.c46e					OHSInitHandler:
.c46e	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c470	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c473	a9 08		lda #$08			lda 	#8
.c475	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c478	a9 28		lda #$28			lda 	#40
.c47a	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c47d	a9 00		lda #$00			lda 	#($1000 & 255)
.c47f	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c482	a9 10		lda #$10			lda 	#($1000 >> 8)
.c484	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c487	20 49 c2	jsr $c249			jsr 	Random8Bit
.c48a	29 3f		and #$3f			and 	#63
.c48c	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c48f	60		rts				rts
.c490					OHSControl:
.c490	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c493	d0 04		bne $c499			bne 	_OHSNoMove
.c495	20 fa c1	jsr $c1fa			jsr		ChooseRandomDirection
.c498	60		rts				rts
.c499					_OHSNoMove:
.c499	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c49c	60		rts				rts
.c49d					OHSCheckFire:
.c49d	20 49 c2	jsr $c249			jsr 	Random8Bit
.c4a0	29 1f		and #$1f			and 	#31
.c4a2	d0 0c		bne $c4b0			bne 	_OHSCFExit
.c4a4	a9 08		lda #$08			lda 	#TP_ENFORCER
.c4a6	20 7a c2	jsr $c27a			jsr 	CreateSingleObject
.c4a9	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c4ac	20 82 c2	jsr $c282			jsr 	CopyStartPosition
.c4af	60		rts				rts
.c4b0					_OHSCFExit:
.c4b0	60		rts				rts
.c4b1					OHSRepaint:
.c4b1	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c4b4	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c4b7	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c4ba	4a		lsr a				lsr 	a
.c4bb	2e 09 ff	rol $ff09			rol 	APIParams+5
.c4be	60		rts				rts
.c4bf					OHEnforcer:
.c4bf	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4c1	d0 05		bne $c4c8			bne 	_1
.c4c3	20 dc c4	jsr $c4dc			jsr 	OHENInitHandler
.c4c6	18		clc				clc
.c4c7	60		rts				rts
.c4c8					_1:
.c4c8	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c4ca	d0 05		bne $c4d1			bne 	_1
.c4cc	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c4cf	18		clc				clc
.c4d0	60		rts				rts
.c4d1					_1:
.c4d1	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c4d3	d0 05		bne $c4da			bne 	_1
.c4d5	20 f9 c4	jsr $c4f9			jsr 	OHENCheckFire
.c4d8	18		clc				clc
.c4d9	60		rts				rts
.c4da					_1:
.c4da	38		sec				sec
.c4db	60		rts				rts
.c4dc					OHENInitHandler:
.c4dc	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c4de	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c4e1	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c4e4	a9 0f		lda #$0f			lda 	#15
.c4e6	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c4e9	a9 1e		lda #$1e			lda 	#30
.c4eb	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c4ee	a9 50		lda #$50			lda 	#($150 & 255)
.c4f0	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c4f3	a9 01		lda #$01			lda 	#($150 >> 8)
.c4f5	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c4f8	60		rts				rts
.c4f9					OHENCheckFire:
.c4f9	20 49 c2	jsr $c249			jsr 	Random8Bit
.c4fc	29 1f		and #$1f			and 	#31
.c4fe	d0 0f		bne $c50f			bne 	_OHENCFExit
.c500	a9 07		lda #$07			lda 	#TP_ESPARK
.c502	20 7a c2	jsr $c27a			jsr 	CreateSingleObject
.c505	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c508	20 82 c2	jsr $c282			jsr 	CopyStartPosition
.c50b	20 8f c2	jsr $c28f			jsr 	ChasePlayerY
.c50e	60		rts				rts
.c50f					_OHENCFExit:
.c50f	60		rts				rts
.c510					OHESpark:
.c510	c9 01		cmp #$01			cmp 	#MSG_INIT
.c512	d0 05		bne $c519			bne 	_1
.c514	20 2d c5	jsr $c52d			jsr 	OHESInitHandler
.c517	18		clc				clc
.c518	60		rts				rts
.c519					_1:
.c519	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c51b	d0 05		bne $c522			bne 	_1
.c51d	20 86 c1	jsr $c186			jsr 	KillObject
.c520	18		clc				clc
.c521	60		rts				rts
.c522					_1:
.c522	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c524	d0 05		bne $c52b			bne 	_1
.c526	20 14 c2	jsr $c214			jsr 	NoControlEffect
.c529	18		clc				clc
.c52a	60		rts				rts
.c52b					_1:
.c52b	38		sec				sec
.c52c	60		rts				rts
.c52d					OHESInitHandler:
.c52d	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c530	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c532	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c535	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c538	a9 07		lda #$07			lda 	#7
.c53a	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c53d	a9 ff		lda #$ff			lda 	#255
.c53f	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c542	a9 25		lda #$25			lda 	#($25 & 255)
.c544	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c547	a9 00		lda #$00			lda 	#($25 >> 8)
.c549	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c54c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c54d					OHQuark:
.c54d	c9 01		cmp #$01			cmp 	#MSG_INIT
.c54f	d0 05		bne $c556			bne 	_1
.c551	20 61 c5	jsr $c561			jsr 	OHQInitHandler
.c554	18		clc				clc
.c555	60		rts				rts
.c556					_1:
.c556	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c558	d0 05		bne $c55f			bne 	_1
.c55a	20 86 c5	jsr $c586			jsr 	OHQCheckFire
.c55d	18		clc				clc
.c55e	60		rts				rts
.c55f					_1:
.c55f	38		sec				sec
.c560	60		rts				rts
.c561					OHQInitHandler:
.c561	a9 11		lda #$11			lda 	#GR1_QUARK
.c563	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c566	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c569	a9 0a		lda #$0a			lda 	#10
.c56b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c56e	a9 1e		lda #$1e			lda 	#30
.c570	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c573	a9 00		lda #$00			lda 	#($1000 & 255)
.c575	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c578	a9 10		lda #$10			lda 	#($1000 >> 8)
.c57a	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c57d	20 49 c2	jsr $c249			jsr 	Random8Bit
.c580	29 3f		and #$3f			and 	#63
.c582	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c585	60		rts				rts
.c586					OHQCheckFire:
.c586	20 49 c2	jsr $c249			jsr 	Random8Bit
.c589	29 1f		and #$1f			and 	#31
.c58b	d0 0c		bne $c599			bne 	_OHQCFExit
.c58d	a9 0b		lda #$0b			lda 	#TP_TANK
.c58f	20 7a c2	jsr $c27a			jsr 	CreateSingleObject
.c592	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c595	20 82 c2	jsr $c282			jsr 	CopyStartPosition
.c598	60		rts				rts
.c599					_OHQCFExit:
.c599	60		rts				rts
.c59a					OHTank:
.c59a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c59c	d0 05		bne $c5a3			bne 	_1
.c59e	20 ae c5	jsr $c5ae			jsr 	OHTNInitHandler
.c5a1	18		clc				clc
.c5a2	60		rts				rts
.c5a3					_1:
.c5a3	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c5a5	d0 05		bne $c5ac			bne 	_1
.c5a7	20 c8 c5	jsr $c5c8			jsr 	OHTNCheckFire
.c5aa	18		clc				clc
.c5ab	60		rts				rts
.c5ac					_1:
.c5ac	38		sec				sec
.c5ad	60		rts				rts
.c5ae					OHTNInitHandler:
.c5ae	a9 12		lda #$12			lda 	#GR_TANK
.c5b0	20 72 c2	jsr $c272			jsr 	SetObjectGraphic
.c5b3	a9 0f		lda #$0f			lda 	#15
.c5b5	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c5b8	a9 1e		lda #$1e			lda 	#30
.c5ba	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c5bd	a9 00		lda #$00			lda 	#($200 & 255)
.c5bf	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c5c2	a9 02		lda #$02			lda 	#($200 >> 8)
.c5c4	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c5c7	60		rts				rts
.c5c8					OHTNCheckFire:
.c5c8	20 49 c2	jsr $c249			jsr 	Random8Bit
.c5cb	29 1f		and #$1f			and 	#31
.c5cd	d0 0f		bne $c5de			bne 	_OHTNCFExit
.c5cf	a9 0a		lda #$0a			lda 	#TP_SHELL
.c5d1	20 7a c2	jsr $c27a			jsr 	CreateSingleObject
.c5d4	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c5d7	20 82 c2	jsr $c282			jsr 	CopyStartPosition
.c5da	20 8f c2	jsr $c28f			jsr 	ChasePlayerY
.c5dd	60		rts				rts
.c5de					_OHTNCFExit:
.c5de	60		rts				rts
.c5df					OHShell:
.c5df	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5e1	d0 05		bne $c5e8			bne 	_1
.c5e3	20 0e c6	jsr $c60e			jsr 	OHSHInitHandler
.c5e6	18		clc				clc
.c5e7	60		rts				rts
.c5e8					_1:
.c5e8	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c5ea	d0 05		bne $c5f1			bne 	_1
.c5ec	20 33 c6	jsr $c633			jsr 	OHSHHitWall
.c5ef	18		clc				clc
.c5f0	60		rts				rts
.c5f1					_1:
.c5f1	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c5f3	d0 05		bne $c5fa			bne 	_1
.c5f5	20 14 c2	jsr $c214			jsr 	NoControlEffect
.c5f8	18		clc				clc
.c5f9	60		rts				rts
.c5fa					_1:
.c5fa	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c5fc	d0 05		bne $c603			bne 	_1
.c5fe	20 05 c6	jsr $c605			jsr 	OHSHCheckLife
.c601	18		clc				clc
.c602	60		rts				rts
.c603					_1:
.c603	38		sec				sec
.c604	60		rts				rts
.c605					OHSHCheckLife:
.c605	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c608	d0 03		bne $c60d			bne 	_OHSHCLExit
.c60a	20 86 c1	jsr $c186			jsr 	KillObject
.c60d					_OHSHCLExit:
.c60d	60		rts				rts
.c60e					OHSHInitHandler:
.c60e	20 41 c2	jsr $c241			jsr 	ChasePlayer
.c611	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c613	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c616	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c619	a9 05		lda #$05			lda 	#5
.c61b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c61e	a9 ff		lda #$ff			lda 	#255
.c620	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c623	a9 50		lda #$50			lda 	#($50 & 255)
.c625	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c628	a9 00		lda #$00			lda 	#($50 >> 8)
.c62a	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c62d	a9 c8		lda #$c8			lda 	#200
.c62f	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c632	60		rts				rts
.c633					OHSHHitWall:
.c633	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c636	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c638	90 04		bcc $c63e			bcc 	_OHSH1
.c63a	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c63c	90 08		bcc $c646			bcc 	_OHSHCheckVertical
.c63e					_OHSH1:
.c63e	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c641	49 03		eor #$03			eor 	#3
.c643	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c646					_OHSHCheckVertical:
.c646	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c649	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c64b	90 04		bcc $c651			bcc 	_OHSH2
.c64d	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c64f	90 08		bcc $c659			bcc 	_OHSHExit
.c651					_OHSH2:
.c651	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c654	49 0c		eor #$0c			eor 	#12
.c656	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c659					_OHSHExit:
.c659	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c65a					OHElectrode:
.c65a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c65c	d0 05		bne $c663			bne 	_1
.c65e	20 6e c6	jsr $c66e			jsr 	OHELInitHandler
.c661	18		clc				clc
.c662	60		rts				rts
.c663					_1:
.c663	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c665	d0 05		bne $c66c			bne 	_1
.c667	20 8a c6	jsr $c68a			jsr 	OHELFreeze
.c66a	18		clc				clc
.c66b	60		rts				rts
.c66c					_1:
.c66c	38		sec				sec
.c66d	60		rts				rts
.c66e					OHELInitHandler:
.c66e	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.c670	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c673	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c676	a9 00		lda #$00			lda 	#0
.c678	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c67b	a9 00		lda #$00			lda 	#0
.c67d	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c680	a9 00		lda #$00			lda 	#($0 & 255)
.c682	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c685	a9 00		lda #$00			lda 	#($0 >> 8)
.c687	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c68a					OHELFreeze:
.c68a	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c68d	60		rts				rts

;******  Return to file: main.asm

.c68e					MainLoop:
.c68e	20 45 c1	jsr $c145			jsr 	AnimatePalette
.c691	20 c1 c0	jsr $c0c1			jsr 	MoveObjects
.c694	60		rts				rts
.c695					HandlerTable:
>c695	b1 c2						.word 		OHPlayer 				; type 0, player object
>c697	52 c3						.word 		OHMissile 				; type 1, player missile object
>c699	b5 c3						.word 		OHHuman1 				; type 2-4 humans
>c69b	c0 c3						.word 		OHHuman2
>c69d	cb c3						.word 		OHHuman3
>c69f	f6 c3						.word 		OHGrunt 				; type 5 grunt
>c6a1	24 c4						.word 		OHHulk 					; type 6 hulk
>c6a3	10 c5						.word 		OHESpark 				; type 7 Enforcer Sparks.
>c6a5	bf c4						.word 		OHEnforcer 				; type 8 Enforcer
>c6a7	48 c4						.word 		OHSphere 				; type 9 Sphere
>c6a9	df c5						.word 		OHShell 				; type 10 shell
>c6ab	9a c5						.word 		OHTank 					; type 11 tank
>c6ad	4d c5						.word 		OHQuark 				; type 12 quark
>c6af	5a c6						.word 		OHElectrode 			; type 13 electrode

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
