
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Sun Apr 28 13:38:53 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_GRUNT = 2
=3					TP_ELECTRODE = 3
=4					TP_MUM = 4
=5					TP_DAD = 5
=6					TP_CHILD = 6
=7					TP_HULK = 7
=8					TP_BRAIN = 8
=9					TP_SPHERE = 9
=10					TP_QUARK = 10
=11					TP_PROG = 11
=12					TP_ESPARK = 12
=13					TP_ENFORCER = 13
=14					TP_SHELL = 14
=15					TP_TANK = 15
=16					TP_EXPLODE = 16
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=7					OBH_RANDOM_MASK = 7 						; reduce random to mask
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_PROG = 22 								; Prog (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.
=$06					MSG_SHOT = $06 								; What to do when shot

;******  Return to file: main.asm

.c000					Start:
.c000	4c b9 c1	jmp $c1b9			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 45 c0	jmp $c045			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c 59 cc	jmp $cc59			jmp 	MainGame 					; $C006 main loop code, speed A
.c009	4c 27 c3	jmp $c327			jmp 	ResetScore 					; $C009 reset the score.
.c00c	4c e4 c3	jmp $c3e4			jmp 	SetWave 					; $C00C New Wave A
.c040					Result:
>c040	00						.byte 	0
.c041					Lives:
>c041	03						.byte 	3
.c042					DScore:
>c042	00 00 00					.byte 	0,0,0

;******  Processing file: create.asm

.c045					CreateObjects:
.c045	e0 00		cpx #$00			cpx 	#0
.c047	f0 0a		beq $c053			beq 	_COExit
.c049	da		phx				phx
.c04a	48		pha				pha
.c04b	20 54 c0	jsr $c054			jsr 	CreateObject
.c04e	68		pla				pla
.c04f	fa		plx				plx
.c050	ca		dex				dex
.c051	d0 f2		bne $c045			bne 	CreateObjects
.c053					_COExit:
.c053	60		rts				rts
.c054					CreateObject:
.c054	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c056	a0 01		ldy #$01			ldy 	#1
.c058	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c05a	f0 18		beq $c074			beq 	_COLoop
.c05c	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c05e	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c060	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c062	f0 10		beq $c074			beq 	_COLoop
.c064	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c066	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c068	c9 07		cmp #$07			cmp 	#TP_CHILD+1
.c06a	b0 04		bcs $c070			bcs 	_CONotHuman
.c06c	c9 04		cmp #$04			cmp 	#TP_MUM
.c06e	b0 04		bcs $c074			bcs 	_COLoop
.c070					_CONotHuman:
.c070	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c072	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c074					_COLoop:
.c074	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c077	30 05		bmi $c07e			bmi 	_COFound
.c079	e8		inx				inx
.c07a	88		dey				dey
.c07b	d0 f7		bne $c074			bne 	_COLoop
.c07d	60		rts				rts  								; cannot create, exit.
.c07e					_COFound:
.c07e	8e 03 c1	stx $c103			stx 	NewObject 					; remember the new object
.c081	9e e8 e5	stz $e5e8,x			stz 	OBObjectData1,x 			; zero object OBObjectData1
.c084	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c087	0a		asl a				asl 	a 							; double -> Y
.c088	a8		tay				tay
.c089	b9 b6 cc	lda $ccb6,y			lda 	HandlerTable,y  			; put the handler address in.
.c08c	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c08f	b9 b7 cc	lda $ccb7,y			lda 	HandlerTable+1,y
.c092	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c095					_COPos1:
.c095	20 8f c2	jsr $c28f			jsr 	Random8Bit  				; value is 0-151
.c098	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c09a	b0 f9		bcs $c095			bcs 	_COPos1
.c09c	69 04		adc #$04			adc 	#PF_LEFT
.c09e	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c0a1					_COPos2:
.c0a1	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; value is 0-103
.c0a4	29 7f		and #$7f			and 	#$7F
.c0a6	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c0a8	b0 f7		bcs $c0a1			bcs 	_COPos2
.c0aa	69 04		adc #$04			adc 	#PF_TOP
.c0ac	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c0af	38		sec				sec   								; check Y centre offset
.c0b0	e9 34		sbc #$34			sbc 	#52
.c0b2	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0b5	c9 27		cmp #$27			cmp 	#39
.c0b7	b0 0d		bcs $c0c6			bcs 	_COIsOkay
.c0b9	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c0bc	38		sec				sec
.c0bd	e9 4b		sbc #$4b			sbc 	#75
.c0bf	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0c2	c9 37		cmp #$37			cmp 	#55
.c0c4	90 cf		bcc $c095			bcc 	_COPos1
.c0c6					_COIsOkay:
.c0c6	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c0c8	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c0cb	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c0ce	a9 ff		lda #$ff			lda 	#$FF
.c0d0	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c0d3	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c0d6	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c0d7	29 07		and #$07			and 	#7
.c0d9	1a		inc a				inc 	a
.c0da	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c0dd	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0e0	a9 01		lda #$01			lda 	#1
.c0e2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0e5	a9 0a		lda #$0a			lda 	#10
.c0e7	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0ea	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.c0ed	a9 01		lda #$01			lda 	#MSG_INIT
.c0ef	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c0f2	90 03		bcc $c0f7			bcc 	_1
.c0f4	20 18 c6	jsr $c618			jsr 	DefaultHandler
.c0f7					_1:
.c0f7	20 e4 c1	jsr $c1e4			jsr 	RedrawObject
.c0fa	60		rts				rts
.c0fb					_COAbsolute:
.c0fb	c9 00		cmp #$00			cmp 	#0
.c0fd	10 03		bpl $c102			bpl 	_COAExit
.c0ff	49 ff		eor #$ff			eor 	#$FF
.c101	1a		inc a				inc 	a
.c102					_COAExit:
.c102	60		rts				rts
.c103					NewObject:
>c103	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c104					MoveObjects:
.c104	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c106					_MOLoop:
.c106	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c109	30 03		bmi $c10e			bmi 	_MONoObject
.c10b	20 14 c1	jsr $c114			jsr 	_MoveOneObject
.c10e					_MONoObject:
.c10e	e8		inx				inx
.c10f	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c111	d0 f3		bne $c106			bne 	_MOLoop
.c113	60		rts				rts  								; cannot create, exit.
.c114					_MoveOneObject:
.c114	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c117	d0 5f		bne $c178			bne 	_MONotMove
.c119	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c11c	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c11f	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c122	d0 10		bne $c134			bne 	_MONoProcess
.c124	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c127	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c12a	a9 03		lda #$03			lda 	#MSG_CONTROL
.c12c	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c12f	90 03		bcc $c134			bcc 	_1
.c131	20 18 c6	jsr $c618			jsr 	DefaultHandler
.c134					_1:
.c134					_MONoProcess:
.c134	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c137	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c13a	4a		lsr a				lsr 	a
.c13b	90 01		bcc $c13e			bcc 	_MONotLeft
.c13d	88		dey				dey
.c13e					_MONotLeft:
.c13e	4a		lsr a				lsr 	a
.c13f	90 01		bcc $c142			bcc 	_MONotRight
.c141	c8		iny				iny
.c142					_MONotRight:
.c142	5a		phy				phy 								; new Y position on stack
.c143	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c146	4a		lsr a				lsr 	a
.c147	90 01		bcc $c14a			bcc 	_MONotUp
.c149	88		dey				dey
.c14a					_MONotUp:
.c14a	4a		lsr a				lsr 	a
.c14b	90 01		bcc $c14e			bcc 	_MONotDown
.c14d	c8		iny				iny
.c14e					_MONotDown:
.c14e	68		pla				pla 								; (A,Y) are new coordinates.
.c14f	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c151	90 26		bcc $c179			bcc 	_MOHitWall
.c153	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c155	b0 22		bcs $c179			bcs 	_MOHitWall
.c157	c0 04		cpy #$04			cpy 	#PF_TOP
.c159	90 1e		bcc $c179			bcc 	_MOHitWall
.c15b	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c15d	b0 1a		bcs $c179			bcs 	_MOHitWall
.c15f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c162	98		tya				tya
.c163	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c166	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c168	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c16b	90 03		bcc $c170			bcc 	_1
.c16d	20 18 c6	jsr $c618			jsr 	DefaultHandler
.c170					_1:
.c170	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c173	30 03		bmi $c178			bmi 	_MONotMove
.c175	20 e4 c1	jsr $c1e4			jsr 	RedrawObject 				; repaint.
.c178					_MONotMove:
.c178	60		rts				rts
.c179					_MOHitWall:
.c179	a9 04		lda #$04			lda 	#MSG_HITWALL
.c17b	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c17e	90 03		bcc $c183			bcc 	_1
.c180	20 18 c6	jsr $c618			jsr 	DefaultHandler
.c183					_1:
.c183	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c184					AnimatePalette:
.c184	ad 00 ff	lda $ff00			lda 	APICommand
.c187	d0 fb		bne $c184			bne 	AnimatePalette
.c189	ee b8 c1	inc $c1b8			inc 	_APCount
.c18c	ad b8 c1	lda $c1b8			lda 	_APCount
.c18f	4a		lsr a				lsr 	a
.c190	4a		lsr a				lsr 	a
.c191	a0 01		ldy #$01			ldy 	#1
.c193	20 ac c1	jsr $c1ac			jsr 	_APBit
.c196	20 ac c1	jsr $c1ac			jsr 	_APBit
.c199	20 ac c1	jsr $c1ac			jsr 	_APBit
.c19c	a9 e0		lda #$e0			lda 	#14*16
.c19e	8d 04 ff	sta $ff04			sta 	APIParams
.c1a1	a9 20		lda #$20			lda 	#32
.c1a3	8d 01 ff	sta $ff01			sta 	APIFunction
.c1a6	a9 05		lda #$05			lda 	#5
.c1a8	8d 00 ff	sta $ff00			sta 	APICommand
.c1ab	60		rts				rts
.c1ac					_APBit:
.c1ac	4a		lsr a				lsr 	a
.c1ad	48		pha				pha
.c1ae	a9 00		lda #$00			lda 	#0
.c1b0	e9 00		sbc #$00			sbc 	#0
.c1b2	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c1b5	c8		iny				iny
.c1b6	68		pla				pla
.c1b7	60		rts				rts
.c1b8					_APCount:
>c1b8	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c1b9					ResetObjects:
.c1b9	a2 00		ldx #$00			ldx 	#0
.c1bb					_RSLoop:
.c1bb	a9 ff		lda #$ff			lda 	#$FF
.c1bd	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1c0	e8		inx				inx
.c1c1	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c1c3	d0 f6		bne $c1bb			bne 	_RSLoop
.c1c5	9c d9 cb	stz $cbd9			stz 	CollectCount
.c1c8	60		rts				rts
.c1c9					KillObject:
.c1c9	20 36 c4	jsr $c436			jsr 	CensusUpdate 				; update the census.
.c1cc	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1cf	d0 f8		bne $c1c9			bne 	KillObject
.c1d1	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c1d3	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1d6	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c1d9	a9 03		lda #$03			lda 	#3  						; and hide it.
.c1db	8d 01 ff	sta $ff01			sta 	APIFunction
.c1de	a9 06		lda #$06			lda 	#6
.c1e0	8d 00 ff	sta $ff00			sta 	APICommand
.c1e3	60		rts				rts
.c1e4					RedrawObject:
.c1e4	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1e7	d0 fb		bne $c1e4			bne 	RedrawObject
.c1e9	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1ec	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1ef	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1f2	0a		asl a				asl 	a
.c1f3	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1f6	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1f9	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1fc	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1ff	0a		asl a				asl 	a
.c200	69 08		adc #$08			adc 	#8 							; allow for top area
.c202	8d 07 ff	sta $ff07			sta 	APIParams+3
.c205	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c208	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c20b	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c20d	f0 0e		beq $c21d			beq 	_ROUseSprite2
.c20f	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c211	d0 03		bne $c216			bne 	_ROHasHorizonMovement
.c213	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c216					_ROHasHorizonMovement:
.c216	98		tya				tya 								; put bit 1 into carry.
.c217	4a		lsr a				lsr 	a
.c218	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c21b	90 03		bcc $c220			bcc 	_ROUseSprite
.c21d					_ROUseSprite2:
.c21d	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c220					_ROUseSprite:
.c220	8d 09 ff	sta $ff09			sta 	APIParams+5
.c223	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c226	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c228	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c22b					_RONotLeft:
.c22b	a9 02		lda #$02			lda 	#MSG_REPAINT
.c22d	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.c230	90 03		bcc $c235			bcc 	_1
.c232	20 18 c6	jsr $c618			jsr 	DefaultHandler
.c235					_1:
.c235	a9 02		lda #$02			lda 	#2  						; and draw it.
.c237	8d 01 ff	sta $ff01			sta 	APIFunction
.c23a	a9 06		lda #$06			lda 	#6
.c23c	8d 00 ff	sta $ff00			sta 	APICommand
.c23f	60		rts				rts
.c240					ChooseRandomDirection:
.c240	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; get valid random direction
.c243	29 0f		and #$0f			and 	#15
.c245	f0 f9		beq $c240			beq 	ChooseRandomDirection 		; stationary (0)
.c247	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c24a	29 03		and #$03			and 	#3 							; check LR not both on.
.c24c	c9 03		cmp #$03			cmp 	#3
.c24e	f0 f0		beq $c240			beq 	ChooseRandomDirection
.c250	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c253	29 0c		and #$0c			and 	#12
.c255	c9 0c		cmp #$0c			cmp 	#12
.c257	f0 e7		beq $c240			beq 	ChooseRandomDirection
.c259	60		rts				rts
.c25a					NoControlEffect:
.c25a	60		rts				rts
.c25b					ChaseObject:
.c25b	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c25e	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c261	20 7a c2	jsr $c27a			jsr 	_ChaseCalculate
.c264	8d 79 c2	sta $c279			sta 	_ChaseTemp
.c267	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c26a	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c26d	20 7a c2	jsr $c27a			jsr 	_ChaseCalculate
.c270	0a		asl a				asl 	a
.c271	0a		asl a				asl 	a
.c272	0d 79 c2	ora $c279			ora 	_ChaseTemp
.c275	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c278	60		rts				rts
.c279					_ChaseTemp:
>c279	00						.byte 	0
.c27a					_ChaseCalculate:
.c27a	f0 08		beq $c284			beq 	_CCNoMove
.c27c	90 03		bcc $c281			bcc 	_CCMoveRight
.c27e	a9 02		lda #$02			lda 	#2
.c280	60		rts				rts
.c281					_CCMoveRight:
.c281	a9 01		lda #$01			lda 	#1
.c283	60		rts				rts
.c284					_CCNoMove:
.c284	a9 00		lda #$00			lda 	#0
.c286	60		rts				rts
.c287					ChasePlayer:
.c287	5a		phy				phy
.c288	a0 00		ldy #$00			ldy 	#0
.c28a	20 5b c2	jsr $c25b			jsr 	ChaseObject
.c28d	7a		ply				ply
.c28e	60		rts				rts
.c28f					Random8Bit:
.c28f	5a		phy				phy
.c290	a0 08		ldy #$08			ldy 	#8
.c292	ad a5 c2	lda $c2a5			lda 	_R8SeedValue+0
.c295					_R8RandomLoop
.c295	0a		asl a				asl     a
.c296	2e a6 c2	rol $c2a6			rol 	_R8SeedValue+1
.c299	90 02		bcc $c29d			bcc 	_R8NotSet
.c29b	49 39		eor #$39			eor 	#$39
.c29d					_R8NotSet:
.c29d	88		dey				dey
.c29e	d0 f5		bne $c295			bne 	_R8RandomLoop
.c2a0	8d a5 c2	sta $c2a5			sta 	_R8SeedValue+0
.c2a3	7a		ply				ply
.c2a4	60		rts				rts
.c2a5					_R8SeedValue
>c2a5	cd ab						.word 	$ABCD
.c2a7					SendObjectMessage:
.c2a7	48		pha				pha
.c2a8	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c2ab	8d b6 c2	sta $c2b6			sta 	_SMCall+1
.c2ae	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c2b1	8d b7 c2	sta $c2b7			sta 	_SMCall+2
.c2b4	68		pla				pla
.c2b5					_SMCall:
.c2b5	4c 00 00	jmp $0000			jmp 	$0000
.c2b8					SetObjectGraphic:
.c2b8	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c2bb	1a		inc a				inc 	a
.c2bc	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c2bf	60		rts				rts
.c2c0					CreateSingleObject:
.c2c0	da		phx				phx 								; create player missile object.
.c2c1	5a		phy				phy
.c2c2	20 54 c0	jsr $c054			jsr 	CreateObject
.c2c5	7a		ply				ply
.c2c6	fa		plx				plx
.c2c7	60		rts				rts
.c2c8					CopyStartPosition:
.c2c8	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2cb	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c2ce	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2d1	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2d4	60		rts				rts
.c2d5					ChasePlayerY:
.c2d5	da		phx				phx
.c2d6	98		tya				tya
.c2d7	aa		tax				tax
.c2d8	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c2db	fa		plx				plx
.c2dc	60		rts				rts
.c2dd					CheckCollision:
.c2dd	38		sec				sec
.c2de	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2e1	f9 6c e0	sbc $e06c,y			sbc 	OBXPos,y
.c2e4	10 03		bpl $c2e9			bpl 	_1
.c2e6	49 ff		eor #$ff			eor 	#$FF
.c2e8	1a		inc a				inc 	a
.c2e9					_1
.c2e9	c9 04		cmp #$04			cmp 	#4
.c2eb	b0 11		bcs $c2fe			bcs 	_CCFail
.c2ed	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2f0	f9 d8 e0	sbc $e0d8,y			sbc 	OBYPos,y
.c2f3	10 03		bpl $c2f8			bpl 	_1
.c2f5	49 ff		eor #$ff			eor 	#$FF
.c2f7	1a		inc a				inc 	a
.c2f8					_1
.c2f8	c9 04		cmp #$04			cmp 	#4
.c2fa	b0 02		bcs $c2fe			bcs 	_CCFail
.c2fc	38		sec				sec
.c2fd	60		rts				rts
.c2fe					_CCFail:
.c2fe	18		clc				clc
.c2ff	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: score.asm

.c300					AddYAToScore:
.c300	da		phx				phx
.c301	18		clc				clc
.c302	f8		sed				sed
.c303	6d 42 c0	adc $c042			adc 	DScore+0
.c306	8d 42 c0	sta $c042			sta 	DScore+0
.c309	98		tya				tya
.c30a	6d 43 c0	adc $c043			adc 	DScore+1
.c30d	8d 43 c0	sta $c043			sta 	DScore+1
.c310	a9 00		lda #$00			lda 	#0
.c312	6d 44 c0	adc $c044			adc 	DScore+2
.c315	8d 44 c0	sta $c044			sta 	DScore+2
.c318	d8		cld				cld
.c319	4a		lsr a				lsr 	a 							; every 20k it's easier. So sue me.
.c31a	cd d9 c3	cmp $c3d9			cmp 	LastScore20k
.c31d	8d d9 c3	sta $c3d9			sta 	LastScore20k
.c320	f0 03		beq $c325			beq 	_NoExtraLife
.c322	ee 41 c0	inc $c041			inc 	Lives
.c325					_NoExtraLife:
.c325	fa		plx				plx
.c326	60		rts				rts
.c327					ResetScore:
.c327	9c 42 c0	stz $c042			stz 	DScore+0
.c32a	9c 43 c0	stz $c043			stz 	DScore+1
.c32d	9c 44 c0	stz $c044			stz 	DScore+2
.c330	9c d9 c3	stz $c3d9			stz 	LastScore20k
.c333	a9 03		lda #$03			lda 	#3
.c335	8d 41 c0	sta $c041			sta 	Lives
.c338	20 6a c3	jsr $c36a			jsr 	DrawScore
.c33b	60		rts				rts
.c33c					DrawWave:
.c33c	a2 18		ldx #$18			ldx 	#24
.c33e	a0 1d		ldy #$1d			ldy 	#29
.c340	20 a2 c3	jsr $c3a2			jsr 	MoveCursor
.c343	a9 81		lda #$81			lda 	#$81
.c345	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c348	20 61 c3	jsr $c361			jsr 	RSPrintWave
.c34b	a9 82		lda #$82			lda 	#$82
.c34d	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c350	a9 20		lda #$20			lda 	#32
.c352	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c355	a2 eb		ldx #$eb			ldx 	#235
.c357					_RSPrintWave:
.c357	8a		txa				txa
.c358	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c35b	e8		inx				inx
.c35c	e0 ef		cpx #$ef			cpx 	#239
.c35e	d0 f7		bne $c357			bne 	_RSPrintWave
.c360	60		rts				rts
.c361					RSPrintWave:
.c361	ad d8 c3	lda $c3d8			lda 	Wave
.c364	c9 10		cmp #$10			cmp 	#$10
.c366	b0 50		bcs $c3b8			bcs 	PrintByte
.c368	80 57		bra $c3c1			bra 	PrintNibble
.c36a					DrawScore:
.c36a	a2 04		ldx #$04			ldx 	#4
.c36c	a0 00		ldy #$00			ldy 	#0
.c36e	20 a2 c3	jsr $c3a2			jsr 	MoveCursor
.c371	a9 86		lda #$86			lda 	#$86
.c373	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c376	ad 44 c0	lda $c044			lda 	DScore+2
.c379	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c37c	ad 43 c0	lda $c043			lda 	DScore+1
.c37f	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c382	ad 42 c0	lda $c042			lda 	DScore+0
.c385	20 b8 c3	jsr $c3b8			jsr 	PrintByte
.c388	a9 20		lda #$20			lda 	#32
.c38a	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c38d	a9 83		lda #$83			lda		#$83
.c38f	ae 41 c0	ldx $c041			ldx 	Lives
.c392	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c395					_DSLoop:
.c395	e0 00		cpx #$00			cpx 	#0
.c397	f0 08		beq $c3a1			beq 	_DSExit
.c399	ca		dex				dex
.c39a	a9 ea		lda #$ea			lda 	#234
.c39c	20 c5 c3	jsr $c3c5			jsr 	PrintCharacter
.c39f	80 f4		bra $c395			bra 	_DSLoop
.c3a1					_DSExit:
.c3a1	60		rts				rts
.c3a2					MoveCursor:
.c3a2	ad 00 ff	lda $ff00			lda 	APICommand
.c3a5	d0 c3		bne $c36a			bne 	DrawScore
.c3a7	8c 05 ff	sty $ff05			sty 	APIParams+1
.c3aa	8e 04 ff	stx $ff04			stx 	APIParams+0
.c3ad	a9 07		lda #$07			lda 	#7
.c3af	8d 01 ff	sta $ff01			sta 	APIFunction
.c3b2	a9 02		lda #$02			lda 	#2
.c3b4	8d 00 ff	sta $ff00			sta 	APICommand
.c3b7	60		rts				rts
.c3b8					PrintByte:
.c3b8	48		pha				pha
.c3b9	4a		lsr a				lsr 	a
.c3ba	4a		lsr a				lsr 	a
.c3bb	4a		lsr a				lsr 	a
.c3bc	4a		lsr a				lsr 	a
.c3bd	20 c1 c3	jsr $c3c1			jsr 	PrintNibble
.c3c0	68		pla				pla
.c3c1					PrintNibble:
.c3c1	29 0f		and #$0f			and 	#15
.c3c3	09 e0		ora #$e0			ora 	#224
.c3c5					PrintCharacter:
.c3c5	ac 00 ff	ldy $ff00			ldy 	APICommand
.c3c8	d0 fb		bne $c3c5			bne 	PrintCharacter
.c3ca	8d 04 ff	sta $ff04			sta 	APIParams+0
.c3cd	a9 06		lda #$06			lda 	#6
.c3cf	8d 01 ff	sta $ff01			sta 	APIFunction
.c3d2	a9 02		lda #$02			lda 	#2
.c3d4	8d 00 ff	sta $ff00			sta 	APICommand
.c3d7	60		rts				rts
.c3d8					Wave:
>c3d8	00						.byte 	0
.c3d9					LastScore20k:
>c3d9	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: census.asm

.c3da					CurrentLevel:
>c3da	00 00 00 00 00 00 00 01			.byte 	0,0,0,0,0,0,0,1,0
>c3e2	00
.c3e3					WaveIndex:
>c3e3	00					.byte 	0
.c3e4					SetWave:
.c3e4	8d d8 c3	sta $c3d8			sta 	Wave
.c3e7	c9 00		cmp #$00			cmp 	#0 							; if 0, use the level data
.c3e9	f0 33		beq $c41e			beq 	_SWExit
.c3eb	3a		dec a				dec 	a 							; Wave starts from zero
.c3ec	a0 28		ldy #$28			ldy 	#40 						; this is the speed.
.c3ee					_SWGetSet:
.c3ee	c9 28		cmp #$28			cmp 	#40 						; is it in range 0..39 (e.g. waves 1-40)
.c3f0	90 11		bcc $c403			bcc 	_SWHaveWave
.c3f2	38		sec				sec  								; effectively doing mod 40 here.
.c3f3	e9 28		sbc #$28			sbc 	#40
.c3f5	88		dey				dey 								; speed up.
.c3f6	88		dey				dey
.c3f7	88		dey				dey
.c3f8	88		dey				dey
.c3f9	88		dey				dey
.c3fa	88		dey				dey
.c3fb	88		dey				dey
.c3fc	88		dey				dey
.c3fd	10 ef		bpl $c3ee			bpl 	_SWGetSet 					; no borrow
.c3ff	a0 00		ldy #$00			ldy 	#0 							; as fast as we can go
.c401	80 eb		bra $c3ee			bra 	_SWGetSet
.c403					_SWHaveWave:
.c403	8d e3 c3	sta $c3e3			sta 	WaveIndex					; 0-39 identifying the wave.
.c406	8c b5 cc	sty $ccb5			sty 	MoveSpeed 					; the move speed.
.c409	0a		asl a				asl 	a 							; multiply by 9.
.c40a	0a		asl a				asl 	a
.c40b	0a		asl a				asl 	a
.c40c	6d e3 c3	adc $c3e3			adc 	WaveIndex
.c40f	aa		tax				tax
.c410	a0 00		ldy #$00			ldy 	#0 							; copy the wave data in
.c412					_SWCopyCensus:
.c412	bd 48 c4	lda $c448,x			lda 	LevelData,x
.c415	99 da c3	sta $c3da,y			sta 	CurrentLevel,y
.c418	e8		inx				inx
.c419	c8		iny				iny
.c41a	c0 09		cpy #$09			cpy 	#9
.c41c	d0 f4		bne $c412			bne 	_SWCopyCensus
.c41e					_SWExit:
.c41e	60		rts				rts
.c41f					CreateCurrentObjects:
.c41f	a0 00		ldy #$00			ldy 	#0
.c421					_CreateLoop1:
.c421	b9 da c3	lda $c3da,y			lda 	CurrentLevel,y 				; how many of these
.c424	aa		tax				tax 								; into X
.c425	98		tya				tya 								; get object ID
.c426	18		clc				clc
.c427	69 02		adc #$02			adc 	#TP_GRUNT
.c429	da		phx				phx
.c42a	5a		phy				phy
.c42b	20 45 c0	jsr $c045			jsr 	CreateObjects
.c42e	7a		ply				ply
.c42f	fa		plx				plx
.c430	c8		iny				iny 								; do all 9 types
.c431	c0 09		cpy #$09			cpy 	#9
.c433	d0 ec		bne $c421			bne 	_CreateLoop1
.c435	60		rts				rts
.c436					CensusUpdate:
.c436	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; get the object ID
.c439	29 1f		and #$1f			and 	#$1F
.c43b	3a		dec a				dec 	a 							; in range for census objects 2-11
.c43c	3a		dec a				dec 	a
.c43d	c9 09		cmp #$09			cmp 	#9
.c43f	b0 06		bcs $c447			bcs 	_UCExit 					; not a census object
.c441	da		phx				phx 								; decrement that count so if we restart it is right
.c442	aa		tax				tax
.c443	de da c3	dec $c3da,x			dec 	CurrentLevel,x
.c446	fa		plx				plx
.c447					_UCExit:
.c447	60		rts				rts
.c448					LevelData:
>c448	0f 05 01 01 00 00 00 00			.byte	15,5,1,1,0,0,0,0,0
>c450	00
>c451	11 0f 01 01 01 05 00 01			.byte	17,15,1,1,1,5,0,1,0
>c459	00
>c45a	16 19 02 02 02 06 00 03			.byte	22,25,2,2,2,6,0,3,0
>c462	00
>c463	22 19 02 02 02 07 00 04			.byte	34,25,2,2,2,7,0,4,0
>c46b	00
>c46c	14 14 0f 00 01 00 0f 01			.byte	20,20,15,0,1,0,15,1,0
>c474	00
>c475	20 19 03 03 03 07 00 04			.byte	32,25,3,3,3,7,0,4,0
>c47d	00
>c47e	00 00 04 04 04 0c 00 00			.byte	0,0,4,4,4,12,0,0,10
>c486	0a
>c487	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c48f	00
>c490	3c 00 03 03 03 04 00 05			.byte	60,0,3,3,3,4,0,5,0
>c498	00
>c499	19 14 00 16 00 00 14 01			.byte	25,20,0,22,0,0,20,1,0
>c4a1	00
>c4a2	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4aa	00
>c4ab	00 00 03 03 03 0d 00 00			.byte	0,0,3,3,3,13,0,0,12
>c4b3	0c
>c4b4	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4bc	00
>c4bd	1b 05 05 05 05 14 00 02			.byte	27,5,5,5,5,20,0,2,0
>c4c5	00
>c4c6	19 14 00 00 16 02 14 01			.byte	25,20,0,0,22,2,20,1,0
>c4ce	00
>c4cf	23 19 03 03 03 03 00 05			.byte	35,25,3,3,3,3,0,5,0
>c4d7	00
>c4d8	00 00 03 03 03 0e 00 00			.byte	0,0,3,3,3,14,0,0,12
>c4e0	0c
>c4e1	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4e9	00
>c4ea	46 00 03 03 03 03 00 05			.byte	70,0,3,3,3,3,0,5,0
>c4f2	00
>c4f3	19 14 08 08 08 02 14 02			.byte	25,20,8,8,8,2,20,2,0
>c4fb	00
>c4fc	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c504	00
>c505	00 00 03 03 03 0f 00 00			.byte	0,0,3,3,3,15,0,0,12
>c50d	0c
>c50e	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c516	00
>c517	00 00 03 03 03 0d 00 06			.byte	0,0,3,3,3,13,0,6,7
>c51f	07
>c520	19 14 19 00 01 01 15 01			.byte	25,20,25,0,1,1,21,1,0
>c528	00
>c529	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c531	00
>c532	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,12
>c53a	0c
>c53b	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c543	01
>c544	4b 00 03 03 03 04 00 05			.byte	75,0,3,3,3,4,0,5,1
>c54c	01
>c54d	19 14 00 19 00 01 16 01			.byte	25,20,0,25,0,1,22,1,1
>c555	01
>c556	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c55e	01
>c55f	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,13
>c567	0d
>c568	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c570	01
>c571	1e 00 03 03 03 19 00 02			.byte	30,0,3,3,3,25,0,2,2
>c579	02
>c57a	1b 0f 00 00 19 02 17 01			.byte	27,15,0,0,25,2,23,1,2
>c582	02
>c583	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c58b	02
>c58c	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,14
>c594	0e
>c595	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c59d	02
>c59e	50 00 03 03 03 06 00 05			.byte	80,0,3,3,3,6,0,5,1
>c5a6	01
>c5a7	1e 0f 0a 0a 0a 02 19 01			.byte	30,15,10,10,10,2,25,1,1
>c5af	01

;******  Return to file: main.asm


;******  Processing file: sound.asm

=0					zTemp0 = 0
.c5b0					SND_EnemyDead:
.c5b0	a9 15		lda #$15			lda 	#21
.c5b2	20 00 c6	jsr $c600			jsr 	SoundPlaySFX
.c5b5	60		rts				rts
.c5b6					SND_FamilyCollect:
.c5b6	a9 08		lda #$08			lda 	#8
.c5b8	20 00 c6	jsr $c600			jsr 	SoundPlaySFX
.c5bb	60		rts				rts
.c5bc					SND_GruntMove:
.c5bc	60		rts				rts
.c5bd					SND_PlayerShoot:
.c5bd	20 d0 c5	jsr $c5d0			jsr 	SoundPlayNote
>c5c0	00						.byte 	0
>c5c1	2c 01						.word 	300
>c5c3	06 00						.word 	6
>c5c5	e7 ff						.word 	(-25) & $FFFF
>c5c7	00						.byte 	0
.c5c8	60		rts				rts
.c5c9					SND_PlayerDead:
.c5c9	a9 13		lda #$13			lda 	#19
.c5cb	20 00 c6	jsr $c600			jsr 	SoundPlaySFX
.c5ce	60		rts				rts
.c5cf					SND_PongAttack:
.c5cf	60		rts				rts
.c5d0					SoundPlayNote:
.c5d0	ad 00 ff	lda $ff00			lda 	APICommand
.c5d3	d0 fb		bne $c5d0			bne 	SoundPlayNote
.c5d5	68		pla				pla
.c5d6	85 00		sta $00				sta 	zTemp0
.c5d8	68		pla				pla
.c5d9	85 01		sta $01				sta 	zTemp0+1
.c5db	da		phx				phx
.c5dc	a2 00		ldx #$00			ldx 	#0
.c5de					_SPNLoop:
.c5de	e6 00		inc $00				inc 	zTemp0
.c5e0	d0 02		bne $c5e4			bne 	_SPNCarry
.c5e2	e6 01		inc $01				inc 	zTemp0+1
.c5e4					_SPNCarry:
.c5e4	b2 00		lda ($00)			lda 	(zTemp0)
.c5e6	9d 04 ff	sta $ff04,x			sta 	APIParams,x
.c5e9	e8		inx				inx
.c5ea	e0 08		cpx #$08			cpx 	#8
.c5ec	d0 f0		bne $c5de			bne 	_SPNLoop
.c5ee	a9 04		lda #$04			lda 	#4
.c5f0	8d 01 ff	sta $ff01			sta 	APIFunction
.c5f3	a9 08		lda #$08			lda 	#8
.c5f5	8d 00 ff	sta $ff00			sta 	APICommand
.c5f8	fa		plx				plx
.c5f9	a5 01		lda $01				lda 	zTemp0+1
.c5fb	48		pha				pha
.c5fc	a5 00		lda $00				lda 	zTemp0
.c5fe	48		pha				pha
.c5ff	60		rts				rts
.c600					SoundPlaySFX:
.c600	48		pha				pha
.c601					_SPWait:
.c601	ad 00 ff	lda $ff00			lda 	APICommand
.c604	d0 fb		bne $c601			bne 	_SPWait
.c606	68		pla				pla
.c607	9c 04 ff	stz $ff04			stz 	APIParams+0
.c60a	8d 05 ff	sta $ff05			sta 	APIParams+1
.c60d	a9 05		lda #$05			lda 	#5
.c60f	8d 01 ff	sta $ff01			sta 	APIFunction
.c612	a9 08		lda #$08			lda 	#8
.c614	8d 00 ff	sta $ff00			sta 	APICommand
.c617	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c618					DefaultHandler:
.c618	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c61a	d0 05		bne $c621			bne 	_1
.c61c	20 35 c6	jsr $c635			jsr 	DefaultControl
.c61f	18		clc				clc
.c620	60		rts				rts
.c621					_1:
.c621	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c623	d0 05		bne $c62a			bne 	_1
.c625	20 38 c6	jsr $c638			jsr 	DefaultHitWall
.c628	18		clc				clc
.c629	60		rts				rts
.c62a					_1:
.c62a	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c62c	d0 05		bne $c633			bne 	_1
.c62e	20 3b c6	jsr $c63b			jsr 	DefaultShot
.c631	18		clc				clc
.c632	60		rts				rts
.c633					_1:
.c633	38		sec				sec
.c634	60		rts				rts
.c635					DefaultControl:
.c635	4c 40 c2	jmp $c240			jmp 	ChooseRandomDirection
.c638					DefaultHitWall:
.c638	4c 40 c2	jmp $c240			jmp 	ChooseRandomDirection
.c63b					DefaultShot:
.c63b	a9 10		lda #$10			lda 	#TP_EXPLODE 				; spawn an explosion
.c63d	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c640	ac 03 c1	ldy $c103			ldy 	NewObject
.c643	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c646	20 4a c6	jsr $c64a			jsr 	RemoveAndScoreObject 		; remove object and score it
.c649	60		rts				rts
.c64a					RemoveAndScoreObject:
.c64a	bd 10 e5	lda $e510,x			lda 	OBScoreLow,x 				; get score into YA
.c64d	bc 7c e5	ldy $e57c,x			ldy 	OBScoreHigh,x
.c650	d0 04		bne $c656			bne 	_HasScore 					; continue if non zero score
.c652	c9 00		cmp #$00			cmp		#0
.c654	f0 08		beq $c65e			beq 	_RASExit
.c656					_HasScore:
.c656	da		phx				phx
.c657	20 00 c3	jsr $c300			jsr 	AddYAToScore 				; add to score
.c65a	fa		plx				plx
.c65b	20 b0 c5	jsr $c5b0			jsr 	SND_EnemyDead
.c65e					_RASExit:
.c65e	4c c9 c1	jmp $c1c9			jmp 	KillObject 					; delete the object

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c661					OHPlayer:
.c661	c9 01		cmp #$01			cmp 	#MSG_INIT
.c663	d0 05		bne $c66a			bne 	_1
.c665	20 7e c6	jsr $c67e			jsr 	OHPInitHandler
.c668	18		clc				clc
.c669	60		rts				rts
.c66a					_1:
.c66a	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c66c	d0 05		bne $c673			bne 	_1
.c66e	20 93 c6	jsr $c693			jsr 	OHPRepaintHandler
.c671	18		clc				clc
.c672	60		rts				rts
.c673					_1:
.c673	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c675	d0 05		bne $c67c			bne 	_1
.c677	20 c2 c6	jsr $c6c2			jsr 	OHPControlHandler
.c67a	18		clc				clc
.c67b	60		rts				rts
.c67c					_1:
.c67c	38		sec				sec
.c67d	60		rts				rts
.c67e					OHPInitHandler:
.c67e	a9 50		lda #$50			lda 	#160/2
.c680	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c683	a9 40		lda #$40			lda 	#128/2
.c685	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c688	a9 02		lda #$02			lda 	#2
.c68a	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c68d	a9 01		lda #$01			lda 	#1
.c68f	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c692	60		rts				rts
.c693					OHPRepaintHandler:
.c693	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c696	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c699	29 03		and #$03			and 	#3
.c69b	d0 03		bne $c6a0			bne 	_OHPUseVertical
.c69d	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c6a0					_OHPUseVertical:
.c6a0	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c6a3	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c6a6	98		tya				tya
.c6a7	29 10		and #$10			and 	#16
.c6a9	f0 03		beq $c6ae			beq 	_OHPNoAlternate
.c6ab	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c6ae					_OHPNoAlternate:
.c6ae	60		rts				rts
.c6af					OHPSetGraphic:
.c6af	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c6b2	29 03		and #$03			and 	#3
.c6b4	d0 06		bne $c6bc			bne 	_OHPRHorizontal
.c6b6	a9 02		lda #$02			lda 	#GR_PLAYERV
.c6b8	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c6bb	60		rts				rts
.c6bc					_OHPRHorizontal:
.c6bc	a9 00		lda #$00			lda 	#GR_PLAYERH
.c6be	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c6c1	60		rts				rts
.c6c2					OHPControlHandler:
.c6c2	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c6c5	d0 fb		bne $c6c2			bne 	OHPControlHandler
.c6c7	a9 01		lda #$01			lda 	#1  						; and draw it.
.c6c9	8d 01 ff	sta $ff01			sta 	APIFunction
.c6cc	a9 07		lda #$07			lda 	#7
.c6ce	8d 00 ff	sta $ff00			sta 	APICommand
.c6d1					_OHPWait
.c6d1	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c6d4	d0 fb		bne $c6d1			bne 	_OHPWait
.c6d6	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c6d9	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c6db	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c6de	f0 0d		beq $c6ed			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c6e0	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c6e3	29 f0		and #$f0			and 	#$F0
.c6e5	d0 06		bne $c6ed			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c6e7	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c6ea	8d 03 c7	sta $c703			sta 	OHPLastDirection
.c6ed					_OHPNoSetLast:
.c6ed	ee 04 c7	inc $c704			inc 	OHPFireCount 				; fire one time in 15
.c6f0	ad 04 c7	lda $c704			lda 	OHPFireCount
.c6f3	29 0f		and #$0f			and 	#15
.c6f5	d0 08		bne $c6ff			bne 	_OHPNoFire
.c6f7	a9 01		lda #$01			lda 	#1
.c6f9	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c6fc	20 bd c5	jsr $c5bd			jsr 	SND_PlayerShoot
.c6ff					_OHPNoFire:
.c6ff	20 af c6	jsr $c6af			jsr 	OHPSetGraphic
.c702	60		rts				rts
.c703					OHPLastDirection:
>c703	02						.byte 	2
.c704					OHPFireCount:
>c704	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c705					OHMissile:
.c705	c9 01		cmp #$01			cmp 	#MSG_INIT
.c707	d0 05		bne $c70e			bne 	_1
.c709	20 34 c7	jsr $c734			jsr 	OHMInitHandler
.c70c	18		clc				clc
.c70d	60		rts				rts
.c70e					_1:
.c70e	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c710	d0 05		bne $c717			bne 	_1
.c712	20 51 c7	jsr $c751			jsr 	OHMRepaintHandler
.c715	18		clc				clc
.c716	60		rts				rts
.c717					_1:
.c717	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c719	d0 05		bne $c720			bne 	_1
.c71b	20 71 c7	jsr $c771			jsr 	OHMControl
.c71e	18		clc				clc
.c71f	60		rts				rts
.c720					_1:
.c720	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c722	d0 05		bne $c729			bne 	_1
.c724	20 7b c7	jsr $c77b			jsr 	OHMHitWall
.c727	18		clc				clc
.c728	60		rts				rts
.c729					_1:
.c729	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c72b	d0 05		bne $c732			bne 	_1
.c72d	20 72 c7	jsr $c772			jsr 	OHMOnMove
.c730	18		clc				clc
.c731	60		rts				rts
.c732					_1:
.c732	38		sec				sec
.c733	60		rts				rts
.c734					OHMInitHandler:
.c734	a9 01		lda #$01			lda 	#1
.c736	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c739	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c73c	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c73f	ad d8 e0	lda $e0d8			lda 	OBYPos
.c742	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c745	ad 03 c7	lda $c703			lda 	OHPLastDirection 			; copy direction
.c748	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c74b	a9 03		lda #$03			lda 	#3  						; stops collision testing straight after fire.
.c74d	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c750	60		rts				rts
.c751					OHMRepaintHandler:
.c751	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c754	b9 61 c7	lda $c761,y			lda 	OHMGraphic,y 				; set graphic.
.c757	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c75a	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c75d	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c760	60		rts				rts
.c761					OHMGraphic:
>c761	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c765	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c769	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c76d	00 00 00 00					.byte 	0,0,0,0
.c771					OHMControl:
.c771	60		rts				rts
.c772					OHMOnMove:
.c772	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c775	f0 03		beq $c77a			beq 	_OHMExit
.c777	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c77a					_OHMExit:
.c77a	60		rts				rts
.c77b					OHMHitWall:
.c77b	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c77e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c77f					OHHuman1:
.c77f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c781	d0 05		bne $c788			bne 	_1
.c783	20 ab c7	jsr $c7ab			jsr 	OHHInitHandler1
.c786	18		clc				clc
.c787	60		rts				rts
.c788					_1:
.c788	38		sec				sec
.c789	60		rts				rts
.c78a					OHHuman2:
.c78a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c78c	d0 05		bne $c793			bne 	_1
.c78e	20 b2 c7	jsr $c7b2			jsr 	OHHInitHandler2
.c791	18		clc				clc
.c792	60		rts				rts
.c793					_1:
.c793	38		sec				sec
.c794	60		rts				rts
.c795					OHHuman3:
.c795	c9 01		cmp #$01			cmp 	#MSG_INIT
.c797	d0 05		bne $c79e			bne 	_1
.c799	20 b9 c7	jsr $c7b9			jsr 	OHHInitHandler3
.c79c	18		clc				clc
.c79d	60		rts				rts
.c79e					_1:
.c79e	38		sec				sec
.c79f	60		rts				rts
.c7a0					OHHInitHandlerMain:
.c7a0	a9 1e		lda #$1e			lda 	#30
.c7a2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7a5	a9 0f		lda #$0f			lda 	#15
.c7a7	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7aa	60		rts				rts
.c7ab					OHHInitHandler1:
.c7ab	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c7ad	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c7b0	80 ee		bra $c7a0			bra 	OHHInitHandlerMain
.c7b2					OHHInitHandler2:
.c7b2	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c7b4	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c7b7	80 e7		bra $c7a0			bra 	OHHInitHandlerMain
.c7b9					OHHInitHandler3:
.c7b9	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c7bb	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c7be	80 e0		bra $c7a0			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c7c0					OHGrunt:
.c7c0	c9 01		cmp #$01			cmp 	#MSG_INIT
.c7c2	d0 05		bne $c7c9			bne 	_1
.c7c4	20 e2 c7	jsr $c7e2			jsr 	OHGInitHandler
.c7c7	18		clc				clc
.c7c8	60		rts				rts
.c7c9					_1:
.c7c9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c7cb	d0 05		bne $c7d2			bne 	_1
.c7cd	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c7d0	18		clc				clc
.c7d1	60		rts				rts
.c7d2					_1:
.c7d2	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c7d4	d0 05		bne $c7db			bne 	_1
.c7d6	20 dd c7	jsr $c7dd			jsr 	OHGSound
.c7d9	18		clc				clc
.c7da	60		rts				rts
.c7db					_1:
.c7db	38		sec				sec
.c7dc	60		rts				rts
.c7dd					OHGSound:
.c7dd	20 bc c5	jsr $c5bc			jsr 	SND_GruntMove
.c7e0	38		sec				sec
.c7e1	60		rts				rts
.c7e2					OHGInitHandler:
.c7e2	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c7e4	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c7e7	a9 20		lda #$20			lda 	#32
.c7e9	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7ec	a9 01		lda #$01			lda 	#1
.c7ee	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7f1	a9 00		lda #$00			lda 	#($100 & 255)
.c7f3	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c7f6	a9 01		lda #$01			lda 	#($100 >> 8)
.c7f8	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c7fb	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c7fc					OHHulk:
.c7fc	c9 01		cmp #$01			cmp 	#MSG_INIT
.c7fe	d0 05		bne $c805			bne 	_1
.c800	20 19 c8	jsr $c819			jsr 	OHHUInitHandler
.c803	18		clc				clc
.c804	60		rts				rts
.c805					_1:
.c805	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c807	d0 05		bne $c80e			bne 	_1
.c809	20 1e c8	jsr $c81e			jsr 	OHHUControl
.c80c	18		clc				clc
.c80d	60		rts				rts
.c80e					_1:
.c80e	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c810	d0 05		bne $c817			bne 	_1
.c812	20 2c c8	jsr $c82c			jsr 	OHHUOnHit
.c815	18		clc				clc
.c816	60		rts				rts
.c817					_1:
.c817	38		sec				sec
.c818	60		rts				rts
.c819					OHHUInitHandler:
.c819	a9 0a		lda #$0a			lda 	#GR_HULK
.c81b	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c81e					OHHUControl:
.c81e	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c821	a9 40		lda #$40			lda 	#64
.c823	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c826	a9 01		lda #$01			lda 	#1
.c828	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c82b	60		rts				rts
.c82c					OHHUOnHit:
.c82c	b9 1c e2	lda $e21c,y			lda 	OBDirection,y
.c82f	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c832	a9 07		lda #$07			lda 	#7
.c834	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c837	a9 03		lda #$03			lda 	#3
.c839	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c83c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c83d					OHSphere:
.c83d	c9 01		cmp #$01			cmp 	#MSG_INIT
.c83f	d0 05		bne $c846			bne 	_1
.c841	20 63 c8	jsr $c863			jsr 	OHSInitHandler
.c844	18		clc				clc
.c845	60		rts				rts
.c846					_1:
.c846	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c848	d0 05		bne $c84f			bne 	_1
.c84a	20 85 c8	jsr $c885			jsr 	OHSControl
.c84d	18		clc				clc
.c84e	60		rts				rts
.c84f					_1:
.c84f	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c851	d0 05		bne $c858			bne 	_1
.c853	20 92 c8	jsr $c892			jsr 	OHSCheckFire
.c856	18		clc				clc
.c857	60		rts				rts
.c858					_1:
.c858	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c85a	d0 05		bne $c861			bne 	_1
.c85c	20 a6 c8	jsr $c8a6			jsr 	OHSRepaint
.c85f	18		clc				clc
.c860	60		rts				rts
.c861					_1:
.c861	38		sec				sec
.c862	60		rts				rts
.c863					OHSInitHandler:
.c863	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c865	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c868	a9 08		lda #$08			lda 	#8
.c86a	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c86d	a9 28		lda #$28			lda 	#40
.c86f	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c872	a9 00		lda #$00			lda 	#($1000 & 255)
.c874	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c877	a9 10		lda #$10			lda 	#($1000 >> 8)
.c879	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c87c	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c87f	29 3f		and #$3f			and 	#63
.c881	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c884	60		rts				rts
.c885					OHSControl:
.c885	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c888	d0 04		bne $c88e			bne 	_OHSNoMove
.c88a	20 40 c2	jsr $c240			jsr		ChooseRandomDirection
.c88d	60		rts				rts
.c88e					_OHSNoMove:
.c88e	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c891	60		rts				rts
.c892					OHSCheckFire:
.c892	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c895	29 3f		and #$3f			and 	#63
.c897	d0 0c		bne $c8a5			bne 	_OHSCFExit
.c899	a9 0d		lda #$0d			lda 	#TP_ENFORCER
.c89b	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c89e	ac 03 c1	ldy $c103			ldy 	NewObject
.c8a1	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c8a4	60		rts				rts
.c8a5					_OHSCFExit:
.c8a5	60		rts				rts
.c8a6					OHSRepaint:
.c8a6	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c8a9	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c8ac	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c8af	4a		lsr a				lsr 	a
.c8b0	2e 09 ff	rol $ff09			rol 	APIParams+5
.c8b3	60		rts				rts
.c8b4					OHEnforcer:
.c8b4	c9 01		cmp #$01			cmp 	#MSG_INIT
.c8b6	d0 05		bne $c8bd			bne 	_1
.c8b8	20 d1 c8	jsr $c8d1			jsr 	OHENInitHandler
.c8bb	18		clc				clc
.c8bc	60		rts				rts
.c8bd					_1:
.c8bd	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c8bf	d0 05		bne $c8c6			bne 	_1
.c8c1	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c8c4	18		clc				clc
.c8c5	60		rts				rts
.c8c6					_1:
.c8c6	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c8c8	d0 05		bne $c8cf			bne 	_1
.c8ca	20 ee c8	jsr $c8ee			jsr 	OHENCheckFire
.c8cd	18		clc				clc
.c8ce	60		rts				rts
.c8cf					_1:
.c8cf	38		sec				sec
.c8d0	60		rts				rts
.c8d1					OHENInitHandler:
.c8d1	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c8d3	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c8d6	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c8d9	a9 0f		lda #$0f			lda 	#15
.c8db	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c8de	a9 1e		lda #$1e			lda 	#30
.c8e0	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c8e3	a9 50		lda #$50			lda 	#($150 & 255)
.c8e5	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c8e8	a9 01		lda #$01			lda 	#($150 >> 8)
.c8ea	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c8ed	60		rts				rts
.c8ee					OHENCheckFire:
.c8ee	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c8f1	29 1f		and #$1f			and 	#31
.c8f3	d0 0f		bne $c904			bne 	_OHENCFExit
.c8f5	a9 0c		lda #$0c			lda 	#TP_ESPARK
.c8f7	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c8fa	ac 03 c1	ldy $c103			ldy 	NewObject
.c8fd	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c900	20 d5 c2	jsr $c2d5			jsr 	ChasePlayerY
.c903	60		rts				rts
.c904					_OHENCFExit:
.c904	60		rts				rts
.c905					OHESpark:
.c905	c9 01		cmp #$01			cmp 	#MSG_INIT
.c907	d0 05		bne $c90e			bne 	_1
.c909	20 22 c9	jsr $c922			jsr 	OHESInitHandler
.c90c	18		clc				clc
.c90d	60		rts				rts
.c90e					_1:
.c90e	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c910	d0 05		bne $c917			bne 	_1
.c912	20 c9 c1	jsr $c1c9			jsr 	KillObject
.c915	18		clc				clc
.c916	60		rts				rts
.c917					_1:
.c917	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c919	d0 05		bne $c920			bne 	_1
.c91b	20 5a c2	jsr $c25a			jsr 	NoControlEffect
.c91e	18		clc				clc
.c91f	60		rts				rts
.c920					_1:
.c920	38		sec				sec
.c921	60		rts				rts
.c922					OHESInitHandler:
.c922	20 87 c2	jsr $c287			jsr 	ChasePlayer
.c925	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c927	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c92a	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c92d	a9 07		lda #$07			lda 	#7
.c92f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c932	a9 ff		lda #$ff			lda 	#255
.c934	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c937	a9 25		lda #$25			lda 	#($25 & 255)
.c939	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c93c	a9 00		lda #$00			lda 	#($25 >> 8)
.c93e	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c941	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c942					OHQuark:
.c942	c9 01		cmp #$01			cmp 	#MSG_INIT
.c944	d0 05		bne $c94b			bne 	_1
.c946	20 56 c9	jsr $c956			jsr 	OHQInitHandler
.c949	18		clc				clc
.c94a	60		rts				rts
.c94b					_1:
.c94b	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c94d	d0 05		bne $c954			bne 	_1
.c94f	20 7b c9	jsr $c97b			jsr 	OHQCheckFire
.c952	18		clc				clc
.c953	60		rts				rts
.c954					_1:
.c954	38		sec				sec
.c955	60		rts				rts
.c956					OHQInitHandler:
.c956	a9 11		lda #$11			lda 	#GR1_QUARK
.c958	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c95b	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c95e	a9 0a		lda #$0a			lda 	#10
.c960	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c963	a9 1e		lda #$1e			lda 	#30
.c965	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c968	a9 00		lda #$00			lda 	#($1000 & 255)
.c96a	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c96d	a9 10		lda #$10			lda 	#($1000 >> 8)
.c96f	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c972	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c975	29 3f		and #$3f			and 	#63
.c977	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c97a	60		rts				rts
.c97b					OHQCheckFire:
.c97b	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c97e	29 3f		and #$3f			and 	#63
.c980	d0 0c		bne $c98e			bne 	_OHQCFExit
.c982	a9 0f		lda #$0f			lda 	#TP_TANK
.c984	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c987	ac 03 c1	ldy $c103			ldy 	NewObject
.c98a	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c98d	60		rts				rts
.c98e					_OHQCFExit:
.c98e	60		rts				rts
.c98f					OHTank:
.c98f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c991	d0 05		bne $c998			bne 	_1
.c993	20 a3 c9	jsr $c9a3			jsr 	OHTNInitHandler
.c996	18		clc				clc
.c997	60		rts				rts
.c998					_1:
.c998	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c99a	d0 05		bne $c9a1			bne 	_1
.c99c	20 bd c9	jsr $c9bd			jsr 	OHTNCheckFire
.c99f	18		clc				clc
.c9a0	60		rts				rts
.c9a1					_1:
.c9a1	38		sec				sec
.c9a2	60		rts				rts
.c9a3					OHTNInitHandler:
.c9a3	a9 12		lda #$12			lda 	#GR_TANK
.c9a5	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.c9a8	a9 0f		lda #$0f			lda 	#15
.c9aa	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c9ad	a9 1e		lda #$1e			lda 	#30
.c9af	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c9b2	a9 00		lda #$00			lda 	#($200 & 255)
.c9b4	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c9b7	a9 02		lda #$02			lda 	#($200 >> 8)
.c9b9	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c9bc	60		rts				rts
.c9bd					OHTNCheckFire:
.c9bd	20 8f c2	jsr $c28f			jsr 	Random8Bit
.c9c0	29 1f		and #$1f			and 	#31
.c9c2	d0 0f		bne $c9d3			bne 	_OHTNCFExit
.c9c4	a9 0e		lda #$0e			lda 	#TP_SHELL
.c9c6	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.c9c9	ac 03 c1	ldy $c103			ldy 	NewObject
.c9cc	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.c9cf	20 d5 c2	jsr $c2d5			jsr 	ChasePlayerY
.c9d2	60		rts				rts
.c9d3					_OHTNCFExit:
.c9d3	60		rts				rts
.c9d4					OHShell:
.c9d4	c9 01		cmp #$01			cmp 	#MSG_INIT
.c9d6	d0 05		bne $c9dd			bne 	_1
.c9d8	20 03 ca	jsr $ca03			jsr 	OHSHInitHandler
.c9db	18		clc				clc
.c9dc	60		rts				rts
.c9dd					_1:
.c9dd	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c9df	d0 05		bne $c9e6			bne 	_1
.c9e1	20 28 ca	jsr $ca28			jsr 	OHSHHitWall
.c9e4	18		clc				clc
.c9e5	60		rts				rts
.c9e6					_1:
.c9e6	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c9e8	d0 05		bne $c9ef			bne 	_1
.c9ea	20 5a c2	jsr $c25a			jsr 	NoControlEffect
.c9ed	18		clc				clc
.c9ee	60		rts				rts
.c9ef					_1:
.c9ef	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c9f1	d0 05		bne $c9f8			bne 	_1
.c9f3	20 fa c9	jsr $c9fa			jsr 	OHSHCheckLife
.c9f6	18		clc				clc
.c9f7	60		rts				rts
.c9f8					_1:
.c9f8	38		sec				sec
.c9f9	60		rts				rts
.c9fa					OHSHCheckLife:
.c9fa	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c9fd	d0 03		bne $ca02			bne 	_OHSHCLExit
.c9ff	20 c9 c1	jsr $c1c9			jsr 	KillObject
.ca02					_OHSHCLExit:
.ca02	60		rts				rts
.ca03					OHSHInitHandler:
.ca03	20 87 c2	jsr $c287			jsr 	ChasePlayer
.ca06	a9 1f		lda #$1f			lda 	#GR1_MISSILE1
.ca08	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.ca0b	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.ca0e	a9 05		lda #$05			lda 	#5
.ca10	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.ca13	a9 ff		lda #$ff			lda 	#255
.ca15	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.ca18	a9 50		lda #$50			lda 	#($50 & 255)
.ca1a	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.ca1d	a9 00		lda #$00			lda 	#($50 >> 8)
.ca1f	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca22	a9 c8		lda #$c8			lda 	#200
.ca24	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.ca27	60		rts				rts
.ca28					OHSHHitWall:
.ca28	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.ca2b	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.ca2d	90 04		bcc $ca33			bcc 	_OHSH1
.ca2f	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.ca31	90 08		bcc $ca3b			bcc 	_OHSHCheckVertical
.ca33					_OHSH1:
.ca33	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.ca36	49 03		eor #$03			eor 	#3
.ca38	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.ca3b					_OHSHCheckVertical:
.ca3b	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.ca3e	c9 05		cmp #$05			cmp 	#PF_TOP+1
.ca40	90 04		bcc $ca46			bcc 	_OHSH2
.ca42	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.ca44	90 08		bcc $ca4e			bcc 	_OHSHExit
.ca46					_OHSH2:
.ca46	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.ca49	49 0c		eor #$0c			eor 	#12
.ca4b	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.ca4e					_OHSHExit:
.ca4e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.ca4f					OHElectrode:
.ca4f	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca51	d0 05		bne $ca58			bne 	_1
.ca53	20 6c ca	jsr $ca6c			jsr 	OHELInitHandler
.ca56	18		clc				clc
.ca57	60		rts				rts
.ca58					_1:
.ca58	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.ca5a	d0 05		bne $ca61			bne 	_1
.ca5c	20 88 ca	jsr $ca88			jsr 	OHELFreeze
.ca5f	18		clc				clc
.ca60	60		rts				rts
.ca61					_1:
.ca61	c9 06		cmp #$06			cmp 	#MSG_SHOT
.ca63	d0 05		bne $ca6a			bne 	_1
.ca65	20 c9 c1	jsr $c1c9			jsr 	KillObject
.ca68	18		clc				clc
.ca69	60		rts				rts
.ca6a					_1:
.ca6a	38		sec				sec
.ca6b	60		rts				rts
.ca6c					OHELInitHandler:
.ca6c	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.ca6e	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.ca71	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.ca74	a9 00		lda #$00			lda 	#0
.ca76	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.ca79	a9 00		lda #$00			lda 	#0
.ca7b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.ca7e	a9 00		lda #$00			lda 	#($0 & 255)
.ca80	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.ca83	a9 00		lda #$00			lda 	#($0 >> 8)
.ca85	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca88					OHELFreeze:
.ca88	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.ca8b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/brains.asm

.ca8c					OHBrain:
.ca8c	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca8e	d0 05		bne $ca95			bne 	_1
.ca90	20 b2 ca	jsr $cab2			jsr 	OHBInitHandler
.ca93	18		clc				clc
.ca94	60		rts				rts
.ca95					_1:
.ca95	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.ca97	d0 05		bne $ca9e			bne 	_1
.ca99	20 cf ca	jsr $cacf			jsr 	OHBCheckEat
.ca9c	18		clc				clc
.ca9d	60		rts				rts
.ca9e					_1:
.ca9e	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.caa0	d0 05		bne $caa7			bne 	_1
.caa2	20 f8 ca	jsr $caf8			jsr 	OHBChaseHuman
.caa5	18		clc				clc
.caa6	60		rts				rts
.caa7					_1:
.caa7	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.caa9	d0 05		bne $cab0			bne 	_1
.caab	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.caae	18		clc				clc
.caaf	60		rts				rts
.cab0					_1:
.cab0	38		sec				sec
.cab1	60		rts				rts
.cab2					OHBInitHandler:
.cab2	a9 14		lda #$14			lda 	#GR_BRAIN
.cab4	20 b8 c2	jsr $c2b8			jsr 	SetObjectGraphic
.cab7	a9 18		lda #$18			lda 	#24
.cab9	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cabc	a9 01		lda #$01			lda 	#1
.cabe	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cac1	a9 00		lda #$00			lda 	#($500 & 255)
.cac3	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.cac6	a9 05		lda #$05			lda 	#($500 >> 8)
.cac8	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.cacb	20 40 c2	jsr $c240			jsr 	ChooseRandomDirection
.cace	60		rts				rts
.cacf					OHBCheckEat:
.cacf	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; object being chased.
.cad2	f0 23		beq $caf7			beq 	_OHBCEExit 					; none
.cad4	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; actual object
.cad7	30 1e		bmi $caf7			bmi 	_OHBCEExit 					; not existing.
.cad9	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; are Y/X colliding ?
.cadc	90 19		bcc $caf7			bcc 	_OHBCEExit
.cade	da		phx				phx
.cadf	a9 0b		lda #$0b			lda 	#TP_PROG 					; create a PROG here
.cae1	20 c0 c2	jsr $c2c0			jsr 	CreateSingleObject
.cae4	ac 03 c1	ldy $c103			ldy 	NewObject
.cae7	20 c8 c2	jsr $c2c8			jsr 	CopyStartPosition
.caea	fa		plx				plx
.caeb	da		phx				phx
.caec	20 c9 c1	jsr $c1c9			jsr 	KillObject	 				; kill the parent object
.caef	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x 			; and the thing it collided with, the human.
.caf2	aa		tax				tax
.caf3	20 c9 c1	jsr $c1c9			jsr 	KillObject
.caf6	fa		plx				plx
.caf7					_OHBCEExit:
.caf7	60		rts				rts
.caf8					OHBChaseHuman:
.caf8	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; check chase
.cafb	f0 05		beq $cb02			beq 	_OHBNewChoose
.cafd	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; chased still alive ?
.cb00	10 16		bpl $cb18			bpl 	_OHBChaseIt
.cb02					_OHBNewChoose:
.cb02	20 8f c2	jsr $c28f			jsr 	Random8Bit 					; no, keep randomly trying till found a live one.
.cb05	29 07		and #$07			and 	#OBH_RANDOM_MASK
.cb07	c9 06		cmp #$06			cmp 	#OBC_HUMANS
.cb09	b0 f7		bcs $cb02			bcs 	_OHBNewChoose
.cb0b	69 05		adc #$05			adc 	#OB_HUMANS
.cb0d	a8		tay				tay
.cb0e	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y
.cb11	30 0b		bmi $cb1e			bmi 	_OHBExit
.cb13	98		tya				tya
.cb14	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.cb17	60		rts				rts
.cb18					_OHBChaseIt:
.cb18	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x
.cb1b	20 5b c2	jsr $c25b			jsr 	ChaseObject
.cb1e					_OHBExit:
.cb1e	60		rts				rts
.cb1f					OHProg:
.cb1f	c9 01		cmp #$01			cmp 	#MSG_INIT
.cb21	d0 05		bne $cb28			bne 	_1
.cb23	20 33 cb	jsr $cb33			jsr 	OHPRInitHandler
.cb26	18		clc				clc
.cb27	60		rts				rts
.cb28					_1:
.cb28	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.cb2a	d0 05		bne $cb31			bne 	_1
.cb2c	20 87 c2	jsr $c287			jsr 	ChasePlayer
.cb2f	18		clc				clc
.cb30	60		rts				rts
.cb31					_1:
.cb31	38		sec				sec
.cb32	60		rts				rts
.cb33					OHPRInitHandler:
.cb33	a9 16		lda #$16			lda 	#GR1_PROG
.cb35	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cb38	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cb3b	a9 04		lda #$04			lda 	#4
.cb3d	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cb40	a9 01		lda #$01			lda 	#1
.cb42	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cb45	a9 00		lda #$00			lda 	#($100 & 255)
.cb47	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.cb4a	a9 01		lda #$01			lda 	#($100 >> 8)
.cb4c	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.cb4f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/explode.asm

.cb50					OHExplode:
.cb50	c9 01		cmp #$01			cmp 	#MSG_INIT
.cb52	d0 05		bne $cb59			bne 	_1
.cb54	20 76 cb	jsr $cb76			jsr 	OHXInitHandler
.cb57	18		clc				clc
.cb58	60		rts				rts
.cb59					_1:
.cb59	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.cb5b	d0 05		bne $cb62			bne 	_1
.cb5d	20 87 cb	jsr $cb87			jsr 	OHXOnMove
.cb60	18		clc				clc
.cb61	60		rts				rts
.cb62					_1:
.cb62	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.cb64	d0 05		bne $cb6b			bne 	_1
.cb66	20 83 cb	jsr $cb83			jsr 	OHXNoMove
.cb69	18		clc				clc
.cb6a	60		rts				rts
.cb6b					_1:
.cb6b	c9 06		cmp #$06			cmp 	#MSG_SHOT
.cb6d	d0 05		bne $cb74			bne 	_1
.cb6f	20 86 cb	jsr $cb86			jsr 	OHXNoHit
.cb72	18		clc				clc
.cb73	60		rts				rts
.cb74					_1:
.cb74	38		sec				sec
.cb75	60		rts				rts
.cb76					OHXInitHandler:
.cb76	20 9c cb	jsr $cb9c			jsr 	UpdateAnimation
.cb79	a9 08		lda #$08			lda 	#8
.cb7b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cb7e	a9 ff		lda #$ff			lda 	#255
.cb80	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cb83					OHXNoMove:
.cb83	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb86					OHXNoHit:
.cb86	60		rts				rts
.cb87					OHXOnMove:
.cb87	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb8a	c9 04		cmp #$04			cmp 	#4
.cb8c	f0 0a		beq $cb98			beq 	_OHXKill
.cb8e	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.cb91	20 9c cb	jsr $cb9c			jsr 	UpdateAnimation
.cb94	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb97	60		rts				rts
.cb98					_OHXKill:
.cb98	20 c9 c1	jsr $c1c9			jsr 	KillObject
.cb9b	60		rts				rts
.cb9c					UpdateAnimation:
.cb9c	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb9f	09 c0		ora #$c0			ora 	#$C0
.cba1	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cba4	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cba7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/human.asm

.cba8					CheckPlayerHuman:
.cba8	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; check player human collisions
.cbaa					_CPHLoop:
.cbaa	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check live
.cbad	30 24		bmi $cbd3			bmi 	_CPHFail
.cbaf	a0 00		ldy #$00			ldy 	#0 							; check collision with player
.cbb1	20 dd c2	jsr $c2dd			jsr 	CheckCollision
.cbb4	90 1d		bcc $cbd3			bcc 	_CPHFail
.cbb6	20 c9 c1	jsr $c1c9			jsr 	KillObject 					; delete the human as collected
.cbb9	ad d9 cb	lda $cbd9			lda 	CollectCount 				; bump collect count, limit to 5
.cbbc	1a		inc a				inc 	a
.cbbd	c9 06		cmp #$06			cmp 	#6
.cbbf	90 02		bcc $cbc3			bcc 	_CPHMax5
.cbc1	a9 05		lda #$05			lda 	#5
.cbc3					_CPHMax5:
.cbc3	8d d9 cb	sta $cbd9			sta 	CollectCount
.cbc6	0a		asl a				asl 	a 							; make to BCD x000
.cbc7	0a		asl a				asl 	a
.cbc8	0a		asl a				asl 	a
.cbc9	0a		asl a				asl 	a
.cbca	a8		tay				tay
.cbcb	a9 00		lda #$00			lda 	#0
.cbcd	20 00 c3	jsr $c300			jsr 	AddYAToScore
.cbd0	20 b6 c5	jsr $c5b6			jsr 	SND_FamilyCollect
.cbd3					_CPHFail:
.cbd3	e8		inx				inx
.cbd4	e0 0c		cpx #$0c			cpx 	#OB_ENEMIES+1
.cbd6	d0 d2		bne $cbaa			bne 	_CPHLoop
.cbd8	60		rts				rts
.cbd9					CollectCount:
>cbd9	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: checks/missiles.asm

.cbda					CheckHitRobots:
.cbda	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check enemies collide ?
.cbdc					_CHRLoop1:
.cbdc	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check enemy alive
.cbdf	30 2b		bmi $cc0c			bmi 	_CHRNext1
.cbe1	a0 01		ldy #$01			ldy 	#OB_PLAYERMISSILE 			; check missiles
.cbe3					_CHRLoop2:
.cbe3	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; missile in use
.cbe6	30 1f		bmi $cc07			bmi 	_CHRNext2
.cbe8	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y 			; not immediately fired
.cbeb	d0 1a		bne $cc07			bne 	_CHRNext2
.cbed	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; check collision.
.cbf0	90 15		bcc $cc07			bcc 	_CHRNext2
.cbf2	5a		phy				phy
.cbf3	a9 06		lda #$06			lda 	#MSG_SHOT
.cbf5	20 a7 c2	jsr $c2a7			jsr 	SendObjectMessage
.cbf8	90 03		bcc $cbfd			bcc 	_1
.cbfa	20 18 c6	jsr $c618			jsr 	DefaultHandler
.cbfd					_1:
.cbfd	7a		ply				ply
.cbfe	da		phx				phx 								; kill this missile.
.cbff	98		tya				tya
.cc00	aa		tax				tax
.cc01	20 c9 c1	jsr $c1c9			jsr		KillObject
.cc04	fa		plx				plx
.cc05	80 05		bra $cc0c			bra 	_CHRNext1 					; go to check next human
.cc07					_CHRNext2:
.cc07	c8		iny				iny
.cc08	c0 05		cpy #$05			cpy		#OB_HUMANS 					; reached the end
.cc0a	d0 d7		bne $cbe3			bne 	_CHRLoop2
.cc0c					_CHRNext1:
.cc0c	e8		inx				inx
.cc0d	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cc0f	d0 cb		bne $cbdc			bne 	_CHRLoop1
.cc11	60		rts				rts
.cc12	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/complete.asm

.cc13					CheckComplete:
.cc13	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES
.cc15					_CheckLoop:
.cc15	bd 00 e0	lda $e000,x			lda 	OBFlags,x
.cc18	30 16		bmi $cc30			bmi 	_CheckNext 					; not in use
.cc1a	29 1f		and #$1f			and 	#31 						; object ID
.cc1c	c9 02		cmp #$02			cmp		#TP_GRUNT 					; must be none of these left.
.cc1e	f0 17		beq $cc37			beq		_CheckFail  				; don't have to destroy everything
.cc20	c9 08		cmp #$08			cmp		#TP_BRAIN
.cc22	f0 13		beq $cc37			beq		_CheckFail
.cc24	c9 09		cmp #$09			cmp		#TP_SPHERE
.cc26	f0 0f		beq $cc37			beq		_CheckFail
.cc28	c9 0a		cmp #$0a			cmp		#TP_QUARK
.cc2a	f0 0b		beq $cc37			beq		_CheckFail
.cc2c	c9 0b		cmp #$0b			cmp		#TP_PROG
.cc2e	f0 07		beq $cc37			beq		_CheckFail
.cc30					_CheckNext:
.cc30	e8		inx				inx
.cc31	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cc33	d0 e0		bne $cc15			bne 	_CheckLoop
.cc35	38		sec				sec
.cc36	60		rts				rts
.cc37					_CheckFail:
.cc37	18		clc				clc
.cc38	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/dead.asm

.cc39					CheckDead:
.cc39	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check enemies collide ?
.cc3b					_CDLoop1:
.cc3b	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check enemy alive
.cc3e	30 0d		bmi $cc4d			bmi 	_CDNext1
.cc40	29 1f		and #$1f			and 	#$1F 						; object class, check if >= explosion animation
.cc42	c9 10		cmp #$10			cmp 	#TP_EXPLODE
.cc44	b0 07		bcs $cc4d			bcs 	_CDNext1
.cc46	a0 00		ldy #$00			ldy 	#0 							; check hit player object
.cc48	20 dd c2	jsr $c2dd			jsr 	CheckCollision 				; check collision.
.cc4b	b0 07		bcs $cc54			bcs 	_CDDead 					; collision
.cc4d					_CDNext1:
.cc4d	e8		inx				inx 								; check next.
.cc4e	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cc50	d0 e9		bne $cc3b			bne 	_CDLoop1
.cc52	18		clc				clc
.cc53	60		rts				rts
.cc54					_CDDead:
.cc54	20 c9 c5	jsr $c5c9			jsr 	SND_PlayerDead
.cc57	38		sec				sec
.cc58	60		rts				rts

;******  Return to file: main.asm

.cc59					MainGame:
.cc59	20 b9 c1	jsr $c1b9			jsr 	ResetObjects 				; reset all game objects
.cc5c	a9 00		lda #$00			lda 	#0 							; create player
.cc5e	a2 01		ldx #$01			ldx 	#1
.cc60	20 45 c0	jsr $c045			jsr 	CreateObjects
.cc63	20 1f c4	jsr $c41f			jsr 	CreateCurrentObjects 		; create the objects expected.
.cc66	20 3c c3	jsr $c33c			jsr 	DrawWave
.cc69	20 6a c3	jsr $c36a			jsr 	DrawScore
.cc6c					MainLoop:
.cc6c	ee a4 cc	inc $cca4			inc 	FrameCount 					; bump frame counter
.cc6f	20 13 cc	jsr $cc13			jsr 	CheckComplete 				; check completed first.
.cc72	b0 2c		bcs $cca0			bcs 	_MLComplete
.cc74	20 39 cc	jsr $cc39			jsr 	CheckDead 					; robot collision
.cc77	b0 1b		bcs $cc94			bcs 	_MLKilled
.cc79	20 84 c1	jsr $c184			jsr 	AnimatePalette 				; causes flashing effects
.cc7c	20 04 c1	jsr $c104			jsr 	MoveObjects 				; move all objects
.cc7f	20 a5 cc	jsr $cca5			jsr 	ClockDelay 					; delay to stop it being insanely fast.
.cc82	20 a8 cb	jsr $cba8			jsr 	CheckPlayerHuman 			; collect ?
.cc85	20 da cb	jsr $cbda			jsr 	CheckHitRobots 				; check if hit robot.
.cc88	ad a4 cc	lda $cca4			lda 	FrameCount
.cc8b	29 07		and #$07			and 	#7
.cc8d	d0 03		bne $cc92			bne 	_MainNoScore
.cc8f	20 6a c3	jsr $c36a			jsr 	DrawScore
.cc92					_MainNoScore:
.cc92	80 d8		bra $cc6c			bra 	MainLoop
.cc94					_MLKilled:
.cc94	a9 01		lda #$01			lda 	#1
.cc96	8d 40 c0	sta $c040			sta 	Result
.cc99	ce 41 c0	dec $c041			dec 	Lives
.cc9c	20 6a c3	jsr $c36a			jsr 	DrawScore
.cc9f	60		rts				rts
.cca0					_MLComplete:
.cca0	9c 40 c0	stz $c040			stz 	Result						; return 0 (level complete, not dead)
.cca3	60		rts				rts
.cca4					FrameCount:
>cca4	00						.byte 	0
.cca5					ClockDelay:
.cca5	da		phx				phx
.cca6	5a		phy				phy
.cca7	ae b5 cc	ldx $ccb5			ldx 	MoveSpeed
.ccaa	f0 06		beq $ccb2			beq 	_MLExit
.ccac					_MLDelay:
.ccac	88		dey				dey
.ccad	d0 fd		bne $ccac			bne 	_MLDelay
.ccaf	ca		dex				dex
.ccb0	d0 fa		bne $ccac			bne 	_MLDelay
.ccb2					_MLExit:
.ccb2	7a		ply				ply
.ccb3	fa		plx				plx
.ccb4	60		rts				rts
.ccb5					MoveSpeed:
>ccb5	28						.byte 	40
.ccb6					HandlerTable:
>ccb6	61 c6						.word 		OHPlayer 				; type 0 Player
>ccb8	05 c7						.word 		OHMissile 				; type 1 Player missile
>ccba	c0 c7						.word 		OHGrunt 				; type 2 Grunt
>ccbc	4f ca						.word 		OHElectrode 			; type 3 Electrode
>ccbe	7f c7						.word 		OHHuman1 				; type 4-6 Humans
>ccc0	8a c7						.word 		OHHuman2
>ccc2	95 c7						.word 		OHHuman3
>ccc4	fc c7						.word 		OHHulk 					; type 7 Hulk
>ccc6	8c ca						.word 		OHBrain 				; type 8 Brain
>ccc8	3d c8						.word 		OHSphere 				; type 9 Sphere
>ccca	42 c9						.word 		OHQuark 				; type 10 Quark
>cccc	1f cb						.word 		OHProg 					; type 11 Prog
>ccce	05 c9						.word 		OHESpark 				; type 12 Enforcer Sparks.
>ccd0	b4 c8						.word 		OHEnforcer 				; type 13 Enforcer
>ccd2	d4 c9						.word 		OHShell 				; type 14 Shell
>ccd4	8f c9						.word 		OHTank 					; type 15 Tank
>ccd6	50 cb						.word 		OHExplode 				; type 16 Explosion Graphic

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
