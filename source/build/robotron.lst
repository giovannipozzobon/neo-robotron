
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Thu Apr 18 08:04:42 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_EMBRYO	= 16  							; Embryo graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR8_ELECTRODES = 22  						; Set of 8 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=32					GR1_HORIZFIRE = 32  						; Horizontal fire
=33					GR1_VERTFIRE = 33  							; Vertical fire
=34					GR1_SWNEFIRE = 34   						; / fire
=35					GR1_NWSEFIRE = 35  							; \ fire
=108					OBJ_COUNT = 108 								; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04

;******  Return to file: main.asm

.c000	4c 06 c1	jmp $c106			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c ac c0	jmp $c0ac			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag
.c041					_COPos1:
.c041	20 55 c1	jsr $c155			jsr 	Random8Bit  				; value is 0-151
.c044	c9 98		cmp #$98			cmp 	#152
.c046	b0 f9		bcs $c041			bcs 	_COPos1
.c048	69 04		adc #$04			adc 	#4
.c04a	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c04d					_COPos2:
.c04d	20 55 c1	jsr $c155			jsr 	Random8Bit 					; value is 0-103
.c050	29 7f		and #$7f			and 	#$7F
.c052	c9 68		cmp #$68			cmp 	#104
.c054	b0 f7		bcs $c04d			bcs 	_COPos2
.c056	69 04		adc #$04			adc 	#4
.c058	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c05b	38		sec				sec   								; check Y centre offset
.c05c	e9 34		sbc #$34			sbc 	#52
.c05e	20 a4 c0	jsr $c0a4			jsr 	_COAbsolute
.c061	c9 27		cmp #$27			cmp 	#39
.c063	b0 0d		bcs $c072			bcs 	_COIsOkay
.c065	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c068	38		sec				sec
.c069	e9 4b		sbc #$4b			sbc 	#75
.c06b	20 a4 c0	jsr $c0a4			jsr 	_COAbsolute
.c06e	c9 37		cmp #$37			cmp 	#55
.c070	90 cf		bcc $c041			bcc 	_COPos1
.c072					_COIsOkay:
.c072	a9 0a		lda #$0a			lda 	#GR_HULK 					; temporary value.
.c074	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c077	1a		inc a				inc 	a
.c078	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c07b	8a		txa				txa  								; set speed & counter default.
.c07c	29 07		and #$07			and 	#7
.c07e	1a		inc a				inc 	a
.c07f	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c082	a9 01		lda #$01			lda 	#1
.c084	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c087					_CODirection:
.c087	20 55 c1	jsr $c155			jsr 	Random8Bit 					; get valid random direction
.c08a	29 0f		and #$0f			and 	#15
.c08c	f0 f9		beq $c087			beq 	_CODirection 				; stationary (0)
.c08e	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c091	29 03		and #$03			and 	#3 							; check LR not both on.
.c093	c9 03		cmp #$03			cmp 	#3
.c095	f0 f0		beq $c087			beq 	_CODirection
.c097	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c09a	29 0c		and #$0c			and 	#12
.c09c	c9 0c		cmp #$0c			cmp 	#12
.c09e	f0 e7		beq $c087			beq 	_CODirection
.c0a0	20 13 c1	jsr $c113			jsr 	RedrawObject
.c0a3	60		rts				rts
.c0a4					_COAbsolute:
.c0a4	c9 00		cmp #$00			cmp 	#0
.c0a6	10 03		bpl $c0ab			bpl 	_COAExit
.c0a8	49 ff		eor #$ff			eor 	#$FF
.c0aa	1a		inc a				inc 	a
.c0ab					_COAExit:
.c0ab	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0ac					MoveObjects:
.c0ac	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0ae					_MOLoop:
.c0ae	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0b1	30 03		bmi $c0b6			bmi 	_MONoObject
.c0b3	20 bc c0	jsr $c0bc			jsr 	_MoveOneObject
.c0b6					_MONoObject:
.c0b6	e8		inx				inx
.c0b7	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0b9	d0 f3		bne $c0ae			bne 	_MOLoop
.c0bb	60		rts				rts  								; cannot create, exit.
.c0bc					_MoveOneObject:
.c0bc	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0bf	d0 43		bne $c104			bne 	_MONotMove
.c0c1	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0c4	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0c7	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0ca	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c0cd	4a		lsr a				lsr 	a
.c0ce	90 01		bcc $c0d1			bcc 	_MONotLeft
.c0d0	88		dey				dey
.c0d1					_MONotLeft:
.c0d1	4a		lsr a				lsr 	a
.c0d2	90 01		bcc $c0d5			bcc 	_MONotRight
.c0d4	c8		iny				iny
.c0d5					_MONotRight:
.c0d5	5a		phy				phy 								; new Y position on stack
.c0d6	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c0d9	4a		lsr a				lsr 	a
.c0da	90 01		bcc $c0dd			bcc 	_MONotUp
.c0dc	88		dey				dey
.c0dd					_MONotUp:
.c0dd	4a		lsr a				lsr 	a
.c0de	90 01		bcc $c0e1			bcc 	_MONotDown
.c0e0	c8		iny				iny
.c0e1					_MONotDown:
.c0e1	68		pla				pla 								; (A,Y) are new coordinates.
.c0e2	c9 04		cmp #$04			cmp 	#4  						; check out of bounds.
.c0e4	90 1f		bcc $c105			bcc 	_MOHitWall
.c0e6	c9 9c		cmp #$9c			cmp 	#156
.c0e8	b0 1b		bcs $c105			bcs 	_MOHitWall
.c0ea	c0 04		cpy #$04			cpy 	#4
.c0ec	90 17		bcc $c105			bcc 	_MOHitWall
.c0ee	c0 6c		cpy #$6c			cpy 	#108
.c0f0	b0 13		bcs $c105			bcs 	_MOHitWall
.c0f2	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c0f5	98		tya				tya
.c0f6	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c0f9	20 13 c1	jsr $c113			jsr 	RedrawObject
.c0fc	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; toggle animation flag
.c0ff	49 40		eor #$40			eor 	#$40
.c101	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c104					_MONotMove:
.c104	60		rts				rts
.c105					_MOHitWall:
.c105	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c106					ResetObjects:
.c106	a2 00		ldx #$00			ldx 	#0
.c108					_RSLoop:
.c108	a9 ff		lda #$ff			lda 	#$FF
.c10a	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c10d	e8		inx				inx
.c10e	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c110	d0 f6		bne $c108			bne 	_RSLoop
.c112	60		rts				rts
.c113					RedrawObject:
.c113	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c116	d0 fb		bne $c113			bne 	RedrawObject
.c118	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c11b	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c11e	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c121	0a		asl a				asl 	a
.c122	8d 05 ff	sta $ff05			sta 	APIParams+1
.c125	2e 06 ff	rol $ff06			rol 	APIParams+2
.c128	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c12b	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c12e	0a		asl a				asl 	a
.c12f	69 10		adc #$10			adc 	#16 						; allow for top area
.c131	8d 07 ff	sta $ff07			sta 	APIParams+3
.c134	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic
.c137	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c13a	50 03		bvc $c13f			bvc 	_ROUseSprite1
.c13c	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c13f					_ROUseSprite1:
.c13f	8d 09 ff	sta $ff09			sta 	APIParams+5
.c142	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c145	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c147	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c14a					_RONotLeft:
.c14a	a9 02		lda #$02			lda 	#2  						; and draw it.
.c14c	8d 01 ff	sta $ff01			sta 	APIFunction
.c14f	a9 06		lda #$06			lda 	#6
.c151	8d 00 ff	sta $ff00			sta 	APICommand
.c154	60		rts				rts
.c155					Random8Bit:
.c155	5a		phy				phy
.c156	a0 08		ldy #$08			ldy 	#8
.c158	ad 6b c1	lda $c16b			lda 	_R8SeedValue+0
.c15b					_R8RandomLoop
.c15b	0a		asl a				asl     a
.c15c	2e 6c c1	rol $c16c			rol 	_R8SeedValue+1
.c15f	90 02		bcc $c163			bcc 	_R8NotSet
.c161	49 39		eor #$39			eor 	#$39
.c163					_R8NotSet:
.c163	88		dey				dey
.c164	d0 f5		bne $c15b			bne 	_R8RandomLoop
.c166	8d 6b c1	sta $c16b			sta 	_R8SeedValue+0
.c169	7a		ply				ply
.c16a	60		rts				rts
.c16b					_R8SeedValue
>c16b	cd ab						.word 	$ABCD

;******  Return to file: main.asm


;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
