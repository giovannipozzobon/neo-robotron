
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Sat Apr 27 14:09:59 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_GRUNT = 2
=3					TP_ELECTRODE = 3
=4					TP_MUM = 4
=5					TP_DAD = 5
=6					TP_CHILD = 6
=7					TP_HULK = 7
=8					TP_BRAIN = 8
=9					TP_SPHERE = 9
=10					TP_QUARK = 10
=11					TP_PROG = 11
=12					TP_ESPARK = 12
=13					TP_ENFORCER = 13
=14					TP_SHELL = 14
=15					TP_TANK = 15
=16					TP_EXPLODE = 16
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=7					OBH_RANDOM_MASK = 7 						; reduce random to mask
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_PROG = 22 								; Prog (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.
=$06					MSG_SHOT = $06 								; What to do when shot

;******  Return to file: main.asm

.c000					Start:
.c000	4c b8 c1	jmp $c1b8			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 45 c0	jmp $c045			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c b1 cb	jmp $cbb1			jmp 	MainGame 					; $C006 main loop code, speed A
.c009	4c 26 c3	jmp $c326			jmp 	ResetScore 					; $C009 reset the score.
.c00c	4c e1 c3	jmp $c3e1			jmp 	SetWave 					; $C00C New Wave A
.c040					Result:
>c040	00						.byte 	0
.c041					Lives:
>c041	03						.byte 	3
.c042					DScore:
>c042	00 00 00					.byte 	0,0,0

;******  Processing file: create.asm

.c045					CreateObjects:
.c045	e0 00		cpx #$00			cpx 	#0
.c047	f0 0a		beq $c053			beq 	_COExit
.c049	da		phx				phx
.c04a	48		pha				pha
.c04b	20 54 c0	jsr $c054			jsr 	CreateObject
.c04e	68		pla				pla
.c04f	fa		plx				plx
.c050	ca		dex				dex
.c051	d0 f2		bne $c045			bne 	CreateObjects
.c053					_COExit:
.c053	60		rts				rts
.c054					CreateObject:
.c054	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c056	a0 01		ldy #$01			ldy 	#1
.c058	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c05a	f0 18		beq $c074			beq 	_COLoop
.c05c	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c05e	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c060	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c062	f0 10		beq $c074			beq 	_COLoop
.c064	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c066	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c068	c9 07		cmp #$07			cmp 	#TP_CHILD+1
.c06a	b0 04		bcs $c070			bcs 	_CONotHuman
.c06c	c9 04		cmp #$04			cmp 	#TP_MUM
.c06e	b0 04		bcs $c074			bcs 	_COLoop
.c070					_CONotHuman:
.c070	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c072	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c074					_COLoop:
.c074	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c077	30 05		bmi $c07e			bmi 	_COFound
.c079	e8		inx				inx
.c07a	88		dey				dey
.c07b	d0 f7		bne $c074			bne 	_COLoop
.c07d	60		rts				rts  								; cannot create, exit.
.c07e					_COFound:
.c07e	8e 03 c1	stx $c103			stx 	NewObject 					; remember the new object
.c081	9e e8 e5	stz $e5e8,x			stz 	OBObjectData1,x 			; zero object OBObjectData1
.c084	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c087	0a		asl a				asl 	a 							; double -> Y
.c088	a8		tay				tay
.c089	b9 01 cc	lda $cc01,y			lda 	HandlerTable,y  			; put the handler address in.
.c08c	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c08f	b9 02 cc	lda $cc02,y			lda 	HandlerTable+1,y
.c092	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c095					_COPos1:
.c095	20 8e c2	jsr $c28e			jsr 	Random8Bit  				; value is 0-151
.c098	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c09a	b0 f9		bcs $c095			bcs 	_COPos1
.c09c	69 04		adc #$04			adc 	#PF_LEFT
.c09e	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c0a1					_COPos2:
.c0a1	20 8e c2	jsr $c28e			jsr 	Random8Bit 					; value is 0-103
.c0a4	29 7f		and #$7f			and 	#$7F
.c0a6	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c0a8	b0 f7		bcs $c0a1			bcs 	_COPos2
.c0aa	69 04		adc #$04			adc 	#PF_TOP
.c0ac	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c0af	38		sec				sec   								; check Y centre offset
.c0b0	e9 34		sbc #$34			sbc 	#52
.c0b2	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0b5	c9 27		cmp #$27			cmp 	#39
.c0b7	b0 0d		bcs $c0c6			bcs 	_COIsOkay
.c0b9	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c0bc	38		sec				sec
.c0bd	e9 4b		sbc #$4b			sbc 	#75
.c0bf	20 fb c0	jsr $c0fb			jsr 	_COAbsolute
.c0c2	c9 37		cmp #$37			cmp 	#55
.c0c4	90 cf		bcc $c095			bcc 	_COPos1
.c0c6					_COIsOkay:
.c0c6	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c0c8	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c0cb	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c0ce	a9 ff		lda #$ff			lda 	#$FF
.c0d0	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c0d3	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c0d6	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c0d7	29 07		and #$07			and 	#7
.c0d9	1a		inc a				inc 	a
.c0da	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c0dd	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0e0	a9 01		lda #$01			lda 	#1
.c0e2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0e5	a9 0a		lda #$0a			lda 	#10
.c0e7	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0ea	20 3f c2	jsr $c23f			jsr 	ChooseRandomDirection
.c0ed	a9 01		lda #$01			lda 	#MSG_INIT
.c0ef	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.c0f2	90 03		bcc $c0f7			bcc 	_1
.c0f4	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.c0f7					_1:
.c0f7	20 e3 c1	jsr $c1e3			jsr 	RedrawObject
.c0fa	60		rts				rts
.c0fb					_COAbsolute:
.c0fb	c9 00		cmp #$00			cmp 	#0
.c0fd	10 03		bpl $c102			bpl 	_COAExit
.c0ff	49 ff		eor #$ff			eor 	#$FF
.c101	1a		inc a				inc 	a
.c102					_COAExit:
.c102	60		rts				rts
.c103					NewObject:
>c103	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c104					MoveObjects:
.c104	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c106					_MOLoop:
.c106	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c109	30 03		bmi $c10e			bmi 	_MONoObject
.c10b	20 14 c1	jsr $c114			jsr 	_MoveOneObject
.c10e					_MONoObject:
.c10e	e8		inx				inx
.c10f	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c111	d0 f3		bne $c106			bne 	_MOLoop
.c113	60		rts				rts  								; cannot create, exit.
.c114					_MoveOneObject:
.c114	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c117	d0 5f		bne $c178			bne 	_MONotMove
.c119	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c11c	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c11f	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c122	d0 10		bne $c134			bne 	_MONoProcess
.c124	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c127	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c12a	a9 03		lda #$03			lda 	#MSG_CONTROL
.c12c	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.c12f	90 03		bcc $c134			bcc 	_1
.c131	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.c134					_1:
.c134					_MONoProcess:
.c134	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c137	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c13a	4a		lsr a				lsr 	a
.c13b	90 01		bcc $c13e			bcc 	_MONotLeft
.c13d	88		dey				dey
.c13e					_MONotLeft:
.c13e	4a		lsr a				lsr 	a
.c13f	90 01		bcc $c142			bcc 	_MONotRight
.c141	c8		iny				iny
.c142					_MONotRight:
.c142	5a		phy				phy 								; new Y position on stack
.c143	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c146	4a		lsr a				lsr 	a
.c147	90 01		bcc $c14a			bcc 	_MONotUp
.c149	88		dey				dey
.c14a					_MONotUp:
.c14a	4a		lsr a				lsr 	a
.c14b	90 01		bcc $c14e			bcc 	_MONotDown
.c14d	c8		iny				iny
.c14e					_MONotDown:
.c14e	68		pla				pla 								; (A,Y) are new coordinates.
.c14f	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c151	90 26		bcc $c179			bcc 	_MOHitWall
.c153	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c155	b0 22		bcs $c179			bcs 	_MOHitWall
.c157	c0 04		cpy #$04			cpy 	#PF_TOP
.c159	90 1e		bcc $c179			bcc 	_MOHitWall
.c15b	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c15d	b0 1a		bcs $c179			bcs 	_MOHitWall
.c15f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c162	98		tya				tya
.c163	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c166	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c168	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.c16b	90 03		bcc $c170			bcc 	_1
.c16d	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.c170					_1:
.c170	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c173	30 03		bmi $c178			bmi 	_MONotMove
.c175	20 e3 c1	jsr $c1e3			jsr 	RedrawObject 				; repaint.
.c178					_MONotMove:
.c178	60		rts				rts
.c179					_MOHitWall:
.c179	a9 04		lda #$04			lda 	#MSG_HITWALL
.c17b	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.c17e	90 03		bcc $c183			bcc 	_1
.c180	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.c183					_1:
.c183	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c184					AnimatePalette:
.c184	ad 00 ff	lda $ff00			lda 	APICommand
.c187	d0 fb		bne $c184			bne 	AnimatePalette
.c189	ee b7 c1	inc $c1b7			inc 	_APCount
.c18c	ad b7 c1	lda $c1b7			lda 	_APCount
.c18f	4a		lsr a				lsr 	a
.c190	a0 01		ldy #$01			ldy 	#1
.c192	20 ab c1	jsr $c1ab			jsr 	_APBit
.c195	20 ab c1	jsr $c1ab			jsr 	_APBit
.c198	20 ab c1	jsr $c1ab			jsr 	_APBit
.c19b	a9 e0		lda #$e0			lda 	#14*16
.c19d	8d 04 ff	sta $ff04			sta 	APIParams
.c1a0	a9 20		lda #$20			lda 	#32
.c1a2	8d 01 ff	sta $ff01			sta 	APIFunction
.c1a5	a9 05		lda #$05			lda 	#5
.c1a7	8d 00 ff	sta $ff00			sta 	APICommand
.c1aa	60		rts				rts
.c1ab					_APBit:
.c1ab	4a		lsr a				lsr 	a
.c1ac	48		pha				pha
.c1ad	a9 00		lda #$00			lda 	#0
.c1af	e9 00		sbc #$00			sbc 	#0
.c1b1	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c1b4	c8		iny				iny
.c1b5	68		pla				pla
.c1b6	60		rts				rts
.c1b7					_APCount:
>c1b7	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c1b8					ResetObjects:
.c1b8	a2 00		ldx #$00			ldx 	#0
.c1ba					_RSLoop:
.c1ba	a9 ff		lda #$ff			lda 	#$FF
.c1bc	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1bf	e8		inx				inx
.c1c0	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c1c2	d0 f6		bne $c1ba			bne 	_RSLoop
.c1c4	9c 51 cb	stz $cb51			stz 	CollectCount
.c1c7	60		rts				rts
.c1c8					KillObject:
.c1c8	20 33 c4	jsr $c433			jsr 	CensusUpdate 				; update the census.
.c1cb	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1ce	d0 f8		bne $c1c8			bne 	KillObject
.c1d0	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c1d2	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1d5	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c1d8	a9 03		lda #$03			lda 	#3  						; and hide it.
.c1da	8d 01 ff	sta $ff01			sta 	APIFunction
.c1dd	a9 06		lda #$06			lda 	#6
.c1df	8d 00 ff	sta $ff00			sta 	APICommand
.c1e2	60		rts				rts
.c1e3					RedrawObject:
.c1e3	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1e6	d0 fb		bne $c1e3			bne 	RedrawObject
.c1e8	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1eb	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1ee	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1f1	0a		asl a				asl 	a
.c1f2	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1f5	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1f8	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1fb	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1fe	0a		asl a				asl 	a
.c1ff	69 08		adc #$08			adc 	#8 							; allow for top area
.c201	8d 07 ff	sta $ff07			sta 	APIParams+3
.c204	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c207	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c20a	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c20c	f0 0e		beq $c21c			beq 	_ROUseSprite2
.c20e	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c210	d0 03		bne $c215			bne 	_ROHasHorizonMovement
.c212	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c215					_ROHasHorizonMovement:
.c215	98		tya				tya 								; put bit 1 into carry.
.c216	4a		lsr a				lsr 	a
.c217	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c21a	90 03		bcc $c21f			bcc 	_ROUseSprite
.c21c					_ROUseSprite2:
.c21c	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c21f					_ROUseSprite:
.c21f	8d 09 ff	sta $ff09			sta 	APIParams+5
.c222	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c225	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c227	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c22a					_RONotLeft:
.c22a	a9 02		lda #$02			lda 	#MSG_REPAINT
.c22c	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.c22f	90 03		bcc $c234			bcc 	_1
.c231	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.c234					_1:
.c234	a9 02		lda #$02			lda 	#2  						; and draw it.
.c236	8d 01 ff	sta $ff01			sta 	APIFunction
.c239	a9 06		lda #$06			lda 	#6
.c23b	8d 00 ff	sta $ff00			sta 	APICommand
.c23e	60		rts				rts
.c23f					ChooseRandomDirection:
.c23f	20 8e c2	jsr $c28e			jsr 	Random8Bit 					; get valid random direction
.c242	29 0f		and #$0f			and 	#15
.c244	f0 f9		beq $c23f			beq 	ChooseRandomDirection 		; stationary (0)
.c246	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c249	29 03		and #$03			and 	#3 							; check LR not both on.
.c24b	c9 03		cmp #$03			cmp 	#3
.c24d	f0 f0		beq $c23f			beq 	ChooseRandomDirection
.c24f	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c252	29 0c		and #$0c			and 	#12
.c254	c9 0c		cmp #$0c			cmp 	#12
.c256	f0 e7		beq $c23f			beq 	ChooseRandomDirection
.c258	60		rts				rts
.c259					NoControlEffect:
.c259	60		rts				rts
.c25a					ChaseObject:
.c25a	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c25d	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c260	20 79 c2	jsr $c279			jsr 	_ChaseCalculate
.c263	8d 78 c2	sta $c278			sta 	_ChaseTemp
.c266	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c269	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c26c	20 79 c2	jsr $c279			jsr 	_ChaseCalculate
.c26f	0a		asl a				asl 	a
.c270	0a		asl a				asl 	a
.c271	0d 78 c2	ora $c278			ora 	_ChaseTemp
.c274	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c277	60		rts				rts
.c278					_ChaseTemp:
>c278	00						.byte 	0
.c279					_ChaseCalculate:
.c279	f0 08		beq $c283			beq 	_CCNoMove
.c27b	90 03		bcc $c280			bcc 	_CCMoveRight
.c27d	a9 02		lda #$02			lda 	#2
.c27f	60		rts				rts
.c280					_CCMoveRight:
.c280	a9 01		lda #$01			lda 	#1
.c282	60		rts				rts
.c283					_CCNoMove:
.c283	a9 00		lda #$00			lda 	#0
.c285	60		rts				rts
.c286					ChasePlayer:
.c286	5a		phy				phy
.c287	a0 00		ldy #$00			ldy 	#0
.c289	20 5a c2	jsr $c25a			jsr 	ChaseObject
.c28c	7a		ply				ply
.c28d	60		rts				rts
.c28e					Random8Bit:
.c28e	5a		phy				phy
.c28f	a0 08		ldy #$08			ldy 	#8
.c291	ad a4 c2	lda $c2a4			lda 	_R8SeedValue+0
.c294					_R8RandomLoop
.c294	0a		asl a				asl     a
.c295	2e a5 c2	rol $c2a5			rol 	_R8SeedValue+1
.c298	90 02		bcc $c29c			bcc 	_R8NotSet
.c29a	49 39		eor #$39			eor 	#$39
.c29c					_R8NotSet:
.c29c	88		dey				dey
.c29d	d0 f5		bne $c294			bne 	_R8RandomLoop
.c29f	8d a4 c2	sta $c2a4			sta 	_R8SeedValue+0
.c2a2	7a		ply				ply
.c2a3	60		rts				rts
.c2a4					_R8SeedValue
>c2a4	cd ab						.word 	$ABCD
.c2a6					SendObjectMessage:
.c2a6	48		pha				pha
.c2a7	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c2aa	8d b5 c2	sta $c2b5			sta 	_SMCall+1
.c2ad	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c2b0	8d b6 c2	sta $c2b6			sta 	_SMCall+2
.c2b3	68		pla				pla
.c2b4					_SMCall:
.c2b4	4c 00 00	jmp $0000			jmp 	$0000
.c2b7					SetObjectGraphic:
.c2b7	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c2ba	1a		inc a				inc 	a
.c2bb	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c2be	60		rts				rts
.c2bf					CreateSingleObject:
.c2bf	da		phx				phx 								; create player missile object.
.c2c0	5a		phy				phy
.c2c1	20 54 c0	jsr $c054			jsr 	CreateObject
.c2c4	7a		ply				ply
.c2c5	fa		plx				plx
.c2c6	60		rts				rts
.c2c7					CopyStartPosition:
.c2c7	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2ca	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c2cd	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2d0	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2d3	60		rts				rts
.c2d4					ChasePlayerY:
.c2d4	da		phx				phx
.c2d5	98		tya				tya
.c2d6	aa		tax				tax
.c2d7	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c2da	fa		plx				plx
.c2db	60		rts				rts
.c2dc					CheckCollision:
.c2dc	38		sec				sec
.c2dd	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2e0	f9 6c e0	sbc $e06c,y			sbc 	OBXPos,y
.c2e3	10 03		bpl $c2e8			bpl 	_1
.c2e5	49 ff		eor #$ff			eor 	#$FF
.c2e7	1a		inc a				inc 	a
.c2e8					_1
.c2e8	c9 04		cmp #$04			cmp 	#4
.c2ea	b0 11		bcs $c2fd			bcs 	_CCFail
.c2ec	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2ef	f9 d8 e0	sbc $e0d8,y			sbc 	OBYPos,y
.c2f2	10 03		bpl $c2f7			bpl 	_1
.c2f4	49 ff		eor #$ff			eor 	#$FF
.c2f6	1a		inc a				inc 	a
.c2f7					_1
.c2f7	c9 04		cmp #$04			cmp 	#4
.c2f9	b0 02		bcs $c2fd			bcs 	_CCFail
.c2fb	38		sec				sec
.c2fc	60		rts				rts
.c2fd					_CCFail:
.c2fd	18		clc				clc
.c2fe	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: score.asm

.c2ff					AddYAToScore:
.c2ff	da		phx				phx
.c300	18		clc				clc
.c301	f8		sed				sed
.c302	6d 42 c0	adc $c042			adc 	DScore+0
.c305	8d 42 c0	sta $c042			sta 	DScore+0
.c308	98		tya				tya
.c309	6d 43 c0	adc $c043			adc 	DScore+1
.c30c	8d 43 c0	sta $c043			sta 	DScore+1
.c30f	a9 00		lda #$00			lda 	#0
.c311	6d 44 c0	adc $c044			adc 	DScore+2
.c314	8d 44 c0	sta $c044			sta 	DScore+2
.c317	d8		cld				cld
.c318	4a		lsr a				lsr 	a 							; every 20k it's easier. So sue me.
.c319	cd d6 c3	cmp $c3d6			cmp 	LastScore20k
.c31c	8d d6 c3	sta $c3d6			sta 	LastScore20k
.c31f	f0 03		beq $c324			beq 	_NoExtraLife
.c321	ee 41 c0	inc $c041			inc 	Lives
.c324					_NoExtraLife:
.c324	fa		plx				plx
.c325	60		rts				rts
.c326					ResetScore:
.c326	9c 42 c0	stz $c042			stz 	DScore+0
.c329	9c 43 c0	stz $c043			stz 	DScore+1
.c32c	9c 44 c0	stz $c044			stz 	DScore+2
.c32f	9c d6 c3	stz $c3d6			stz 	LastScore20k
.c332	a9 03		lda #$03			lda 	#3
.c334	8d 41 c0	sta $c041			sta 	Lives
.c337	20 69 c3	jsr $c369			jsr 	DrawScore
.c33a	60		rts				rts
.c33b					DrawWave:
.c33b	a2 18		ldx #$18			ldx 	#24
.c33d	a0 1d		ldy #$1d			ldy 	#29
.c33f	20 9f c3	jsr $c39f			jsr 	MoveCursor
.c342	a9 81		lda #$81			lda 	#$81
.c344	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c347	20 60 c3	jsr $c360			jsr 	RSPrintWave
.c34a	a9 82		lda #$82			lda 	#$82
.c34c	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c34f	a9 20		lda #$20			lda 	#32
.c351	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c354	a2 eb		ldx #$eb			ldx 	#235
.c356					_RSPrintWave:
.c356	8a		txa				txa
.c357	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c35a	e8		inx				inx
.c35b	e0 ef		cpx #$ef			cpx 	#239
.c35d	d0 f7		bne $c356			bne 	_RSPrintWave
.c35f	60		rts				rts
.c360					RSPrintWave:
.c360	ad d5 c3	lda $c3d5			lda 	Wave
.c363	c9 10		cmp #$10			cmp 	#$10
.c365	b0 4e		bcs $c3b5			bcs 	PrintByte
.c367	80 55		bra $c3be			bra 	PrintNibble
.c369					DrawScore:
.c369	a2 04		ldx #$04			ldx 	#4
.c36b	a0 00		ldy #$00			ldy 	#0
.c36d	20 9f c3	jsr $c39f			jsr 	MoveCursor
.c370	a9 86		lda #$86			lda 	#$86
.c372	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c375	ad 44 c0	lda $c044			lda 	DScore+2
.c378	20 b5 c3	jsr $c3b5			jsr 	PrintByte
.c37b	ad 43 c0	lda $c043			lda 	DScore+1
.c37e	20 b5 c3	jsr $c3b5			jsr 	PrintByte
.c381	ad 42 c0	lda $c042			lda 	DScore+0
.c384	20 b5 c3	jsr $c3b5			jsr 	PrintByte
.c387	a9 20		lda #$20			lda 	#32
.c389	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c38c	a9 83		lda #$83			lda		#$83
.c38e	ae 41 c0	ldx $c041			ldx 	Lives
.c391	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c394	ca		dex		_DSLoop:dex
.c395	f0 07		beq $c39e			beq 	_DSExit
.c397	a9 ea		lda #$ea			lda 	#234
.c399	20 c2 c3	jsr $c3c2			jsr 	PrintCharacter
.c39c	80 f6		bra $c394			bra 	_DSLoop
.c39e					_DSExit:
.c39e	60		rts				rts
.c39f					MoveCursor:
.c39f	ad 00 ff	lda $ff00			lda 	APICommand
.c3a2	d0 c5		bne $c369			bne 	DrawScore
.c3a4	8c 05 ff	sty $ff05			sty 	APIParams+1
.c3a7	8e 04 ff	stx $ff04			stx 	APIParams+0
.c3aa	a9 07		lda #$07			lda 	#7
.c3ac	8d 01 ff	sta $ff01			sta 	APIFunction
.c3af	a9 02		lda #$02			lda 	#2
.c3b1	8d 00 ff	sta $ff00			sta 	APICommand
.c3b4	60		rts				rts
.c3b5					PrintByte:
.c3b5	48		pha				pha
.c3b6	4a		lsr a				lsr 	a
.c3b7	4a		lsr a				lsr 	a
.c3b8	4a		lsr a				lsr 	a
.c3b9	4a		lsr a				lsr 	a
.c3ba	20 be c3	jsr $c3be			jsr 	PrintNibble
.c3bd	68		pla				pla
.c3be					PrintNibble:
.c3be	29 0f		and #$0f			and 	#15
.c3c0	09 e0		ora #$e0			ora 	#224
.c3c2					PrintCharacter:
.c3c2	ac 00 ff	ldy $ff00			ldy 	APICommand
.c3c5	d0 fb		bne $c3c2			bne 	PrintCharacter
.c3c7	8d 04 ff	sta $ff04			sta 	APIParams+0
.c3ca	a9 06		lda #$06			lda 	#6
.c3cc	8d 01 ff	sta $ff01			sta 	APIFunction
.c3cf	a9 02		lda #$02			lda 	#2
.c3d1	8d 00 ff	sta $ff00			sta 	APICommand
.c3d4	60		rts				rts
.c3d5					Wave:
>c3d5	00						.byte 	0
.c3d6					LastScore20k:
>c3d6	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: census.asm

.c3d7					CurrentLevel:
>c3d7	00 00 00 00 00 00 00 01			.byte 	0,0,0,0,0,0,0,1,0
>c3df	00
.c3e0					WaveIndex:
>c3e0	00					.byte 	0
.c3e1					SetWave:
.c3e1	8d d5 c3	sta $c3d5			sta 	Wave
.c3e4	c9 00		cmp #$00			cmp 	#0 							; if 0, use the level data
.c3e6	f0 33		beq $c41b			beq 	_SWExit
.c3e8	3a		dec a				dec 	a 							; Wave starts from zero
.c3e9	a0 28		ldy #$28			ldy 	#40 						; this is the speed.
.c3eb					_SWGetSet:
.c3eb	c9 28		cmp #$28			cmp 	#40 						; is it in range 0..39 (e.g. waves 1-40)
.c3ed	90 11		bcc $c400			bcc 	_SWHaveWave
.c3ef	38		sec				sec  								; effectively doing mod 40 here.
.c3f0	e9 28		sbc #$28			sbc 	#40
.c3f2	88		dey				dey 								; speed up.
.c3f3	88		dey				dey
.c3f4	88		dey				dey
.c3f5	88		dey				dey
.c3f6	88		dey				dey
.c3f7	88		dey				dey
.c3f8	88		dey				dey
.c3f9	88		dey				dey
.c3fa	10 ef		bpl $c3eb			bpl 	_SWGetSet 					; no borrow
.c3fc	a0 00		ldy #$00			ldy 	#0 							; as fast as we can go
.c3fe	80 eb		bra $c3eb			bra 	_SWGetSet
.c400					_SWHaveWave:
.c400	8d e0 c3	sta $c3e0			sta 	WaveIndex					; 0-39 identifying the wave.
.c403	8c 00 cc	sty $cc00			sty 	MoveSpeed 					; the move speed.
.c406	0a		asl a				asl 	a 							; multiply by 9.
.c407	0a		asl a				asl 	a
.c408	0a		asl a				asl 	a
.c409	6d e0 c3	adc $c3e0			adc 	WaveIndex
.c40c	aa		tax				tax
.c40d	a0 00		ldy #$00			ldy 	#0 							; copy the wave data in
.c40f					_SWCopyCensus:
.c40f	bd 45 c4	lda $c445,x			lda 	LevelData,x
.c412	99 d7 c3	sta $c3d7,y			sta 	CurrentLevel,y
.c415	e8		inx				inx
.c416	c8		iny				iny
.c417	c0 09		cpy #$09			cpy 	#9
.c419	d0 f4		bne $c40f			bne 	_SWCopyCensus
.c41b					_SWExit:
.c41b	60		rts				rts
.c41c					CreateCurrentObjects:
.c41c	a0 00		ldy #$00			ldy 	#0
.c41e					_CreateLoop1:
.c41e	b9 d7 c3	lda $c3d7,y			lda 	CurrentLevel,y 				; how many of these
.c421	aa		tax				tax 								; into X
.c422	98		tya				tya 								; get object ID
.c423	18		clc				clc
.c424	69 02		adc #$02			adc 	#TP_GRUNT
.c426	da		phx				phx
.c427	5a		phy				phy
.c428	20 45 c0	jsr $c045			jsr 	CreateObjects
.c42b	7a		ply				ply
.c42c	fa		plx				plx
.c42d	c8		iny				iny 								; do all 9 types
.c42e	c0 09		cpy #$09			cpy 	#9
.c430	d0 ec		bne $c41e			bne 	_CreateLoop1
.c432	60		rts				rts
.c433					CensusUpdate:
.c433	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; get the object ID
.c436	29 1f		and #$1f			and 	#$1F
.c438	3a		dec a				dec 	a 							; in range for census objects 2-11
.c439	3a		dec a				dec 	a
.c43a	c9 09		cmp #$09			cmp 	#9
.c43c	b0 06		bcs $c444			bcs 	_UCExit 					; not a census object
.c43e	da		phx				phx 								; decrement that count so if we restart it is right
.c43f	aa		tax				tax
.c440	de d7 c3	dec $c3d7,x			dec 	CurrentLevel,x
.c443	fa		plx				plx
.c444					_UCExit:
.c444	60		rts				rts
.c445					LevelData:
>c445	0f 05 01 01 00 00 00 00			.byte	15,5,1,1,0,0,0,0,0
>c44d	00
>c44e	11 0f 01 01 01 05 00 01			.byte	17,15,1,1,1,5,0,1,0
>c456	00
>c457	16 19 02 02 02 06 00 03			.byte	22,25,2,2,2,6,0,3,0
>c45f	00
>c460	22 19 02 02 02 07 00 04			.byte	34,25,2,2,2,7,0,4,0
>c468	00
>c469	14 14 0f 00 01 00 0f 01			.byte	20,20,15,0,1,0,15,1,0
>c471	00
>c472	20 19 03 03 03 07 00 04			.byte	32,25,3,3,3,7,0,4,0
>c47a	00
>c47b	00 00 04 04 04 0c 00 00			.byte	0,0,4,4,4,12,0,0,10
>c483	0a
>c484	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c48c	00
>c48d	3c 00 03 03 03 04 00 05			.byte	60,0,3,3,3,4,0,5,0
>c495	00
>c496	19 14 00 16 00 00 14 01			.byte	25,20,0,22,0,0,20,1,0
>c49e	00
>c49f	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4a7	00
>c4a8	00 00 03 03 03 0d 00 00			.byte	0,0,3,3,3,13,0,0,12
>c4b0	0c
>c4b1	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4b9	00
>c4ba	1b 05 05 05 05 14 00 02			.byte	27,5,5,5,5,20,0,2,0
>c4c2	00
>c4c3	19 14 00 00 16 02 14 01			.byte	25,20,0,0,22,2,20,1,0
>c4cb	00
>c4cc	23 19 03 03 03 03 00 05			.byte	35,25,3,3,3,3,0,5,0
>c4d4	00
>c4d5	00 00 03 03 03 0e 00 00			.byte	0,0,3,3,3,14,0,0,12
>c4dd	0c
>c4de	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c4e6	00
>c4e7	46 00 03 03 03 03 00 05			.byte	70,0,3,3,3,3,0,5,0
>c4ef	00
>c4f0	19 14 08 08 08 02 14 02			.byte	25,20,8,8,8,2,20,2,0
>c4f8	00
>c4f9	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c501	00
>c502	00 00 03 03 03 0f 00 00			.byte	0,0,3,3,3,15,0,0,12
>c50a	0c
>c50b	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c513	00
>c514	00 00 03 03 03 0d 00 06			.byte	0,0,3,3,3,13,0,6,7
>c51c	07
>c51d	19 14 19 00 01 01 15 01			.byte	25,20,25,0,1,1,21,1,0
>c525	00
>c526	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,0
>c52e	00
>c52f	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,12
>c537	0c
>c538	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c540	01
>c541	4b 00 03 03 03 04 00 05			.byte	75,0,3,3,3,4,0,5,1
>c549	01
>c54a	19 14 00 19 00 01 16 01			.byte	25,20,0,25,0,1,22,1,1
>c552	01
>c553	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c55b	01
>c55c	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,13
>c564	0d
>c565	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,1
>c56d	01
>c56e	1e 00 03 03 03 19 00 02			.byte	30,0,3,3,3,25,0,2,2
>c576	02
>c577	1b 0f 00 00 19 02 17 01			.byte	27,15,0,0,25,2,23,1,2
>c57f	02
>c580	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c588	02
>c589	00 00 03 03 03 10 00 00			.byte	0,0,3,3,3,16,0,0,14
>c591	0e
>c592	23 19 03 03 03 08 00 05			.byte	35,25,3,3,3,8,0,5,2
>c59a	02
>c59b	50 00 03 03 03 06 00 05			.byte	80,0,3,3,3,6,0,5,1
>c5a3	01
>c5a4	1e 0f 0a 0a 0a 02 19 01			.byte	30,15,10,10,10,2,25,1,1
>c5ac	01

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c5ad					DefaultHandler:
.c5ad	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c5af	d0 05		bne $c5b6			bne 	_1
.c5b1	20 ca c5	jsr $c5ca			jsr 	DefaultControl
.c5b4	18		clc				clc
.c5b5	60		rts				rts
.c5b6					_1:
.c5b6	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c5b8	d0 05		bne $c5bf			bne 	_1
.c5ba	20 cd c5	jsr $c5cd			jsr 	DefaultHitWall
.c5bd	18		clc				clc
.c5be	60		rts				rts
.c5bf					_1:
.c5bf	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c5c1	d0 05		bne $c5c8			bne 	_1
.c5c3	20 d0 c5	jsr $c5d0			jsr 	DefaultShot
.c5c6	18		clc				clc
.c5c7	60		rts				rts
.c5c8					_1:
.c5c8	38		sec				sec
.c5c9	60		rts				rts
.c5ca					DefaultControl:
.c5ca	4c 3f c2	jmp $c23f			jmp 	ChooseRandomDirection
.c5cd					DefaultHitWall:
.c5cd	4c 3f c2	jmp $c23f			jmp 	ChooseRandomDirection
.c5d0					DefaultShot:
.c5d0	a9 10		lda #$10			lda 	#TP_EXPLODE 				; spawn an explosion
.c5d2	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c5d5	ac 03 c1	ldy $c103			ldy 	NewObject
.c5d8	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.c5db	20 df c5	jsr $c5df			jsr 	RemoveAndScoreObject 		; remove object and score it
.c5de	60		rts				rts
.c5df					RemoveAndScoreObject:
.c5df	bd 10 e5	lda $e510,x			lda 	OBScoreLow,x 				; get score into YA
.c5e2	bc 7c e5	ldy $e57c,x			ldy 	OBScoreHigh,x
.c5e5	da		phx				phx
.c5e6	20 ff c2	jsr $c2ff			jsr 	AddYAToScore 				; add to score
.c5e9	fa		plx				plx
.c5ea	4c c8 c1	jmp $c1c8			jmp 	KillObject 					; delete the object

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c5ed					OHPlayer:
.c5ed	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5ef	d0 05		bne $c5f6			bne 	_1
.c5f1	20 0a c6	jsr $c60a			jsr 	OHPInitHandler
.c5f4	18		clc				clc
.c5f5	60		rts				rts
.c5f6					_1:
.c5f6	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c5f8	d0 05		bne $c5ff			bne 	_1
.c5fa	20 1f c6	jsr $c61f			jsr 	OHPRepaintHandler
.c5fd	18		clc				clc
.c5fe	60		rts				rts
.c5ff					_1:
.c5ff	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c601	d0 05		bne $c608			bne 	_1
.c603	20 4e c6	jsr $c64e			jsr 	OHPControlHandler
.c606	18		clc				clc
.c607	60		rts				rts
.c608					_1:
.c608	38		sec				sec
.c609	60		rts				rts
.c60a					OHPInitHandler:
.c60a	a9 50		lda #$50			lda 	#160/2
.c60c	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c60f	a9 40		lda #$40			lda 	#128/2
.c611	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c614	a9 02		lda #$02			lda 	#2
.c616	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c619	a9 01		lda #$01			lda 	#1
.c61b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c61e	60		rts				rts
.c61f					OHPRepaintHandler:
.c61f	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c622	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c625	29 03		and #$03			and 	#3
.c627	d0 03		bne $c62c			bne 	_OHPUseVertical
.c629	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c62c					_OHPUseVertical:
.c62c	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c62f	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c632	98		tya				tya
.c633	29 10		and #$10			and 	#16
.c635	f0 03		beq $c63a			beq 	_OHPNoAlternate
.c637	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c63a					_OHPNoAlternate:
.c63a	60		rts				rts
.c63b					OHPSetGraphic:
.c63b	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c63e	29 03		and #$03			and 	#3
.c640	d0 06		bne $c648			bne 	_OHPRHorizontal
.c642	a9 02		lda #$02			lda 	#GR_PLAYERV
.c644	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c647	60		rts				rts
.c648					_OHPRHorizontal:
.c648	a9 00		lda #$00			lda 	#GR_PLAYERH
.c64a	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c64d	60		rts				rts
.c64e					OHPControlHandler:
.c64e	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c651	d0 fb		bne $c64e			bne 	OHPControlHandler
.c653	a9 01		lda #$01			lda 	#1  						; and draw it.
.c655	8d 01 ff	sta $ff01			sta 	APIFunction
.c658	a9 07		lda #$07			lda 	#7
.c65a	8d 00 ff	sta $ff00			sta 	APICommand
.c65d					_OHPWait
.c65d	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c660	d0 fb		bne $c65d			bne 	_OHPWait
.c662	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c665	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c667	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c66a	f0 0d		beq $c679			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c66c	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c66f	29 f0		and #$f0			and 	#$F0
.c671	d0 06		bne $c679			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c673	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c676	8d 8c c6	sta $c68c			sta 	OHPLastDirection
.c679					_OHPNoSetLast:
.c679	ee 8d c6	inc $c68d			inc 	OHPFireCount 				; fire one time in 15
.c67c	ad 8d c6	lda $c68d			lda 	OHPFireCount
.c67f	29 0f		and #$0f			and 	#15
.c681	d0 05		bne $c688			bne 	_OHPNoFire
.c683	a9 01		lda #$01			lda 	#1
.c685	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c688					_OHPNoFire:
.c688	20 3b c6	jsr $c63b			jsr 	OHPSetGraphic
.c68b	60		rts				rts
.c68c					OHPLastDirection:
>c68c	02						.byte 	2
.c68d					OHPFireCount:
>c68d	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c68e					OHMissile:
.c68e	c9 01		cmp #$01			cmp 	#MSG_INIT
.c690	d0 05		bne $c697			bne 	_1
.c692	20 bd c6	jsr $c6bd			jsr 	OHMInitHandler
.c695	18		clc				clc
.c696	60		rts				rts
.c697					_1:
.c697	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c699	d0 05		bne $c6a0			bne 	_1
.c69b	20 da c6	jsr $c6da			jsr 	OHMRepaintHandler
.c69e	18		clc				clc
.c69f	60		rts				rts
.c6a0					_1:
.c6a0	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c6a2	d0 05		bne $c6a9			bne 	_1
.c6a4	20 fa c6	jsr $c6fa			jsr 	OHMControl
.c6a7	18		clc				clc
.c6a8	60		rts				rts
.c6a9					_1:
.c6a9	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c6ab	d0 05		bne $c6b2			bne 	_1
.c6ad	20 04 c7	jsr $c704			jsr 	OHMHitWall
.c6b0	18		clc				clc
.c6b1	60		rts				rts
.c6b2					_1:
.c6b2	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c6b4	d0 05		bne $c6bb			bne 	_1
.c6b6	20 fb c6	jsr $c6fb			jsr 	OHMOnMove
.c6b9	18		clc				clc
.c6ba	60		rts				rts
.c6bb					_1:
.c6bb	38		sec				sec
.c6bc	60		rts				rts
.c6bd					OHMInitHandler:
.c6bd	a9 01		lda #$01			lda 	#1
.c6bf	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c6c2	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c6c5	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c6c8	ad d8 e0	lda $e0d8			lda 	OBYPos
.c6cb	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c6ce	ad 8c c6	lda $c68c			lda 	OHPLastDirection 			; copy direction
.c6d1	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c6d4	a9 03		lda #$03			lda 	#3  						; stops collision testing straight after fire.
.c6d6	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c6d9	60		rts				rts
.c6da					OHMRepaintHandler:
.c6da	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c6dd	b9 ea c6	lda $c6ea,y			lda 	OHMGraphic,y 				; set graphic.
.c6e0	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c6e3	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c6e6	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c6e9	60		rts				rts
.c6ea					OHMGraphic:
>c6ea	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c6ee	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c6f2	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c6f6	00 00 00 00					.byte 	0,0,0,0
.c6fa					OHMControl:
.c6fa	60		rts				rts
.c6fb					OHMOnMove:
.c6fb	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c6fe	f0 03		beq $c703			beq 	_OHMExit
.c700	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c703					_OHMExit:
.c703	60		rts				rts
.c704					OHMHitWall:
.c704	20 c8 c1	jsr $c1c8			jsr 	KillObject
.c707	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c708					OHHuman1:
.c708	c9 01		cmp #$01			cmp 	#MSG_INIT
.c70a	d0 05		bne $c711			bne 	_1
.c70c	20 34 c7	jsr $c734			jsr 	OHHInitHandler1
.c70f	18		clc				clc
.c710	60		rts				rts
.c711					_1:
.c711	38		sec				sec
.c712	60		rts				rts
.c713					OHHuman2:
.c713	c9 01		cmp #$01			cmp 	#MSG_INIT
.c715	d0 05		bne $c71c			bne 	_1
.c717	20 3b c7	jsr $c73b			jsr 	OHHInitHandler2
.c71a	18		clc				clc
.c71b	60		rts				rts
.c71c					_1:
.c71c	38		sec				sec
.c71d	60		rts				rts
.c71e					OHHuman3:
.c71e	c9 01		cmp #$01			cmp 	#MSG_INIT
.c720	d0 05		bne $c727			bne 	_1
.c722	20 42 c7	jsr $c742			jsr 	OHHInitHandler3
.c725	18		clc				clc
.c726	60		rts				rts
.c727					_1:
.c727	38		sec				sec
.c728	60		rts				rts
.c729					OHHInitHandlerMain:
.c729	a9 1e		lda #$1e			lda 	#30
.c72b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c72e	a9 0f		lda #$0f			lda 	#15
.c730	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c733	60		rts				rts
.c734					OHHInitHandler1:
.c734	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c736	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c739	80 ee		bra $c729			bra 	OHHInitHandlerMain
.c73b					OHHInitHandler2:
.c73b	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c73d	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c740	80 e7		bra $c729			bra 	OHHInitHandlerMain
.c742					OHHInitHandler3:
.c742	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c744	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c747	80 e0		bra $c729			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c749					OHGrunt:
.c749	c9 01		cmp #$01			cmp 	#MSG_INIT
.c74b	d0 05		bne $c752			bne 	_1
.c74d	20 5d c7	jsr $c75d			jsr 	OHGInitHandler
.c750	18		clc				clc
.c751	60		rts				rts
.c752					_1:
.c752	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c754	d0 05		bne $c75b			bne 	_1
.c756	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c759	18		clc				clc
.c75a	60		rts				rts
.c75b					_1:
.c75b	38		sec				sec
.c75c	60		rts				rts
.c75d					OHGInitHandler:
.c75d	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c75f	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c762	a9 20		lda #$20			lda 	#32
.c764	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c767	a9 01		lda #$01			lda 	#1
.c769	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c76c	a9 00		lda #$00			lda 	#($100 & 255)
.c76e	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c771	a9 01		lda #$01			lda 	#($100 >> 8)
.c773	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c776	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c777					OHHulk:
.c777	c9 01		cmp #$01			cmp 	#MSG_INIT
.c779	d0 05		bne $c780			bne 	_1
.c77b	20 94 c7	jsr $c794			jsr 	OHHUInitHandler
.c77e	18		clc				clc
.c77f	60		rts				rts
.c780					_1:
.c780	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c782	d0 05		bne $c789			bne 	_1
.c784	20 99 c7	jsr $c799			jsr 	OHHUControl
.c787	18		clc				clc
.c788	60		rts				rts
.c789					_1:
.c789	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c78b	d0 05		bne $c792			bne 	_1
.c78d	20 a7 c7	jsr $c7a7			jsr 	OHHUOnHit
.c790	18		clc				clc
.c791	60		rts				rts
.c792					_1:
.c792	38		sec				sec
.c793	60		rts				rts
.c794					OHHUInitHandler:
.c794	a9 0a		lda #$0a			lda 	#GR_HULK
.c796	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c799					OHHUControl:
.c799	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c79c	a9 40		lda #$40			lda 	#64
.c79e	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7a1	a9 01		lda #$01			lda 	#1
.c7a3	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7a6	60		rts				rts
.c7a7					OHHUOnHit:
.c7a7	b9 1c e2	lda $e21c,y			lda 	OBDirection,y
.c7aa	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c7ad	a9 07		lda #$07			lda 	#7
.c7af	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7b2	a9 03		lda #$03			lda 	#3
.c7b4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7b7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c7b8					OHSphere:
.c7b8	c9 01		cmp #$01			cmp 	#MSG_INIT
.c7ba	d0 05		bne $c7c1			bne 	_1
.c7bc	20 de c7	jsr $c7de			jsr 	OHSInitHandler
.c7bf	18		clc				clc
.c7c0	60		rts				rts
.c7c1					_1:
.c7c1	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c7c3	d0 05		bne $c7ca			bne 	_1
.c7c5	20 00 c8	jsr $c800			jsr 	OHSControl
.c7c8	18		clc				clc
.c7c9	60		rts				rts
.c7ca					_1:
.c7ca	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c7cc	d0 05		bne $c7d3			bne 	_1
.c7ce	20 0d c8	jsr $c80d			jsr 	OHSCheckFire
.c7d1	18		clc				clc
.c7d2	60		rts				rts
.c7d3					_1:
.c7d3	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c7d5	d0 05		bne $c7dc			bne 	_1
.c7d7	20 21 c8	jsr $c821			jsr 	OHSRepaint
.c7da	18		clc				clc
.c7db	60		rts				rts
.c7dc					_1:
.c7dc	38		sec				sec
.c7dd	60		rts				rts
.c7de					OHSInitHandler:
.c7de	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c7e0	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c7e3	a9 08		lda #$08			lda 	#8
.c7e5	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7e8	a9 28		lda #$28			lda 	#40
.c7ea	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7ed	a9 00		lda #$00			lda 	#($1000 & 255)
.c7ef	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c7f2	a9 10		lda #$10			lda 	#($1000 >> 8)
.c7f4	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c7f7	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c7fa	29 3f		and #$3f			and 	#63
.c7fc	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c7ff	60		rts				rts
.c800					OHSControl:
.c800	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c803	d0 04		bne $c809			bne 	_OHSNoMove
.c805	20 3f c2	jsr $c23f			jsr		ChooseRandomDirection
.c808	60		rts				rts
.c809					_OHSNoMove:
.c809	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c80c	60		rts				rts
.c80d					OHSCheckFire:
.c80d	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c810	29 3f		and #$3f			and 	#63
.c812	d0 0c		bne $c820			bne 	_OHSCFExit
.c814	a9 0d		lda #$0d			lda 	#TP_ENFORCER
.c816	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c819	ac 03 c1	ldy $c103			ldy 	NewObject
.c81c	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.c81f	60		rts				rts
.c820					_OHSCFExit:
.c820	60		rts				rts
.c821					OHSRepaint:
.c821	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c824	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c827	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c82a	4a		lsr a				lsr 	a
.c82b	2e 09 ff	rol $ff09			rol 	APIParams+5
.c82e	60		rts				rts
.c82f					OHEnforcer:
.c82f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c831	d0 05		bne $c838			bne 	_1
.c833	20 4c c8	jsr $c84c			jsr 	OHENInitHandler
.c836	18		clc				clc
.c837	60		rts				rts
.c838					_1:
.c838	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c83a	d0 05		bne $c841			bne 	_1
.c83c	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c83f	18		clc				clc
.c840	60		rts				rts
.c841					_1:
.c841	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c843	d0 05		bne $c84a			bne 	_1
.c845	20 69 c8	jsr $c869			jsr 	OHENCheckFire
.c848	18		clc				clc
.c849	60		rts				rts
.c84a					_1:
.c84a	38		sec				sec
.c84b	60		rts				rts
.c84c					OHENInitHandler:
.c84c	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c84e	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c851	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c854	a9 0f		lda #$0f			lda 	#15
.c856	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c859	a9 1e		lda #$1e			lda 	#30
.c85b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c85e	a9 50		lda #$50			lda 	#($150 & 255)
.c860	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c863	a9 01		lda #$01			lda 	#($150 >> 8)
.c865	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c868	60		rts				rts
.c869					OHENCheckFire:
.c869	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c86c	29 1f		and #$1f			and 	#31
.c86e	d0 0f		bne $c87f			bne 	_OHENCFExit
.c870	a9 0c		lda #$0c			lda 	#TP_ESPARK
.c872	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c875	ac 03 c1	ldy $c103			ldy 	NewObject
.c878	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.c87b	20 d4 c2	jsr $c2d4			jsr 	ChasePlayerY
.c87e	60		rts				rts
.c87f					_OHENCFExit:
.c87f	60		rts				rts
.c880					OHESpark:
.c880	c9 01		cmp #$01			cmp 	#MSG_INIT
.c882	d0 05		bne $c889			bne 	_1
.c884	20 9d c8	jsr $c89d			jsr 	OHESInitHandler
.c887	18		clc				clc
.c888	60		rts				rts
.c889					_1:
.c889	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c88b	d0 05		bne $c892			bne 	_1
.c88d	20 c8 c1	jsr $c1c8			jsr 	KillObject
.c890	18		clc				clc
.c891	60		rts				rts
.c892					_1:
.c892	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c894	d0 05		bne $c89b			bne 	_1
.c896	20 59 c2	jsr $c259			jsr 	NoControlEffect
.c899	18		clc				clc
.c89a	60		rts				rts
.c89b					_1:
.c89b	38		sec				sec
.c89c	60		rts				rts
.c89d					OHESInitHandler:
.c89d	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c8a0	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c8a2	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c8a5	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c8a8	a9 07		lda #$07			lda 	#7
.c8aa	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c8ad	a9 ff		lda #$ff			lda 	#255
.c8af	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c8b2	a9 25		lda #$25			lda 	#($25 & 255)
.c8b4	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c8b7	a9 00		lda #$00			lda 	#($25 >> 8)
.c8b9	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c8bc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c8bd					OHQuark:
.c8bd	c9 01		cmp #$01			cmp 	#MSG_INIT
.c8bf	d0 05		bne $c8c6			bne 	_1
.c8c1	20 d1 c8	jsr $c8d1			jsr 	OHQInitHandler
.c8c4	18		clc				clc
.c8c5	60		rts				rts
.c8c6					_1:
.c8c6	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c8c8	d0 05		bne $c8cf			bne 	_1
.c8ca	20 f6 c8	jsr $c8f6			jsr 	OHQCheckFire
.c8cd	18		clc				clc
.c8ce	60		rts				rts
.c8cf					_1:
.c8cf	38		sec				sec
.c8d0	60		rts				rts
.c8d1					OHQInitHandler:
.c8d1	a9 11		lda #$11			lda 	#GR1_QUARK
.c8d3	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c8d6	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c8d9	a9 0a		lda #$0a			lda 	#10
.c8db	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c8de	a9 1e		lda #$1e			lda 	#30
.c8e0	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c8e3	a9 00		lda #$00			lda 	#($1000 & 255)
.c8e5	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c8e8	a9 10		lda #$10			lda 	#($1000 >> 8)
.c8ea	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c8ed	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c8f0	29 3f		and #$3f			and 	#63
.c8f2	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c8f5	60		rts				rts
.c8f6					OHQCheckFire:
.c8f6	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c8f9	29 3f		and #$3f			and 	#63
.c8fb	d0 0c		bne $c909			bne 	_OHQCFExit
.c8fd	a9 0f		lda #$0f			lda 	#TP_TANK
.c8ff	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c902	ac 03 c1	ldy $c103			ldy 	NewObject
.c905	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.c908	60		rts				rts
.c909					_OHQCFExit:
.c909	60		rts				rts
.c90a					OHTank:
.c90a	c9 01		cmp #$01			cmp 	#MSG_INIT
.c90c	d0 05		bne $c913			bne 	_1
.c90e	20 1e c9	jsr $c91e			jsr 	OHTNInitHandler
.c911	18		clc				clc
.c912	60		rts				rts
.c913					_1:
.c913	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c915	d0 05		bne $c91c			bne 	_1
.c917	20 38 c9	jsr $c938			jsr 	OHTNCheckFire
.c91a	18		clc				clc
.c91b	60		rts				rts
.c91c					_1:
.c91c	38		sec				sec
.c91d	60		rts				rts
.c91e					OHTNInitHandler:
.c91e	a9 12		lda #$12			lda 	#GR_TANK
.c920	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.c923	a9 0f		lda #$0f			lda 	#15
.c925	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c928	a9 1e		lda #$1e			lda 	#30
.c92a	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c92d	a9 00		lda #$00			lda 	#($200 & 255)
.c92f	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c932	a9 02		lda #$02			lda 	#($200 >> 8)
.c934	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c937	60		rts				rts
.c938					OHTNCheckFire:
.c938	20 8e c2	jsr $c28e			jsr 	Random8Bit
.c93b	29 1f		and #$1f			and 	#31
.c93d	d0 0f		bne $c94e			bne 	_OHTNCFExit
.c93f	a9 0e		lda #$0e			lda 	#TP_SHELL
.c941	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.c944	ac 03 c1	ldy $c103			ldy 	NewObject
.c947	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.c94a	20 d4 c2	jsr $c2d4			jsr 	ChasePlayerY
.c94d	60		rts				rts
.c94e					_OHTNCFExit:
.c94e	60		rts				rts
.c94f					OHShell:
.c94f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c951	d0 05		bne $c958			bne 	_1
.c953	20 7e c9	jsr $c97e			jsr 	OHSHInitHandler
.c956	18		clc				clc
.c957	60		rts				rts
.c958					_1:
.c958	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c95a	d0 05		bne $c961			bne 	_1
.c95c	20 a3 c9	jsr $c9a3			jsr 	OHSHHitWall
.c95f	18		clc				clc
.c960	60		rts				rts
.c961					_1:
.c961	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c963	d0 05		bne $c96a			bne 	_1
.c965	20 59 c2	jsr $c259			jsr 	NoControlEffect
.c968	18		clc				clc
.c969	60		rts				rts
.c96a					_1:
.c96a	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c96c	d0 05		bne $c973			bne 	_1
.c96e	20 75 c9	jsr $c975			jsr 	OHSHCheckLife
.c971	18		clc				clc
.c972	60		rts				rts
.c973					_1:
.c973	38		sec				sec
.c974	60		rts				rts
.c975					OHSHCheckLife:
.c975	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c978	d0 03		bne $c97d			bne 	_OHSHCLExit
.c97a	20 c8 c1	jsr $c1c8			jsr 	KillObject
.c97d					_OHSHCLExit:
.c97d	60		rts				rts
.c97e					OHSHInitHandler:
.c97e	20 86 c2	jsr $c286			jsr 	ChasePlayer
.c981	a9 1f		lda #$1f			lda 	#GR1_MISSILE1
.c983	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c986	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c989	a9 05		lda #$05			lda 	#5
.c98b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c98e	a9 ff		lda #$ff			lda 	#255
.c990	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c993	a9 50		lda #$50			lda 	#($50 & 255)
.c995	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c998	a9 00		lda #$00			lda 	#($50 >> 8)
.c99a	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c99d	a9 c8		lda #$c8			lda 	#200
.c99f	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c9a2	60		rts				rts
.c9a3					OHSHHitWall:
.c9a3	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c9a6	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c9a8	90 04		bcc $c9ae			bcc 	_OHSH1
.c9aa	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c9ac	90 08		bcc $c9b6			bcc 	_OHSHCheckVertical
.c9ae					_OHSH1:
.c9ae	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c9b1	49 03		eor #$03			eor 	#3
.c9b3	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c9b6					_OHSHCheckVertical:
.c9b6	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c9b9	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c9bb	90 04		bcc $c9c1			bcc 	_OHSH2
.c9bd	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c9bf	90 08		bcc $c9c9			bcc 	_OHSHExit
.c9c1					_OHSH2:
.c9c1	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c9c4	49 0c		eor #$0c			eor 	#12
.c9c6	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c9c9					_OHSHExit:
.c9c9	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c9ca					OHElectrode:
.c9ca	c9 01		cmp #$01			cmp 	#MSG_INIT
.c9cc	d0 05		bne $c9d3			bne 	_1
.c9ce	20 e7 c9	jsr $c9e7			jsr 	OHELInitHandler
.c9d1	18		clc				clc
.c9d2	60		rts				rts
.c9d3					_1:
.c9d3	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c9d5	d0 05		bne $c9dc			bne 	_1
.c9d7	20 03 ca	jsr $ca03			jsr 	OHELFreeze
.c9da	18		clc				clc
.c9db	60		rts				rts
.c9dc					_1:
.c9dc	c9 06		cmp #$06			cmp 	#MSG_SHOT
.c9de	d0 05		bne $c9e5			bne 	_1
.c9e0	20 c8 c1	jsr $c1c8			jsr 	KillObject
.c9e3	18		clc				clc
.c9e4	60		rts				rts
.c9e5					_1:
.c9e5	38		sec				sec
.c9e6	60		rts				rts
.c9e7					OHELInitHandler:
.c9e7	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.c9e9	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c9ec	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c9ef	a9 00		lda #$00			lda 	#0
.c9f1	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c9f4	a9 00		lda #$00			lda 	#0
.c9f6	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c9f9	a9 00		lda #$00			lda 	#($0 & 255)
.c9fb	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c9fe	a9 00		lda #$00			lda 	#($0 >> 8)
.ca00	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca03					OHELFreeze:
.ca03	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.ca06	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/brains.asm

.ca07					OHBrain:
.ca07	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca09	d0 05		bne $ca10			bne 	_1
.ca0b	20 2d ca	jsr $ca2d			jsr 	OHBInitHandler
.ca0e	18		clc				clc
.ca0f	60		rts				rts
.ca10					_1:
.ca10	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.ca12	d0 05		bne $ca19			bne 	_1
.ca14	20 4a ca	jsr $ca4a			jsr 	OHBCheckEat
.ca17	18		clc				clc
.ca18	60		rts				rts
.ca19					_1:
.ca19	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.ca1b	d0 05		bne $ca22			bne 	_1
.ca1d	20 73 ca	jsr $ca73			jsr 	OHBChaseHuman
.ca20	18		clc				clc
.ca21	60		rts				rts
.ca22					_1:
.ca22	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.ca24	d0 05		bne $ca2b			bne 	_1
.ca26	20 3f c2	jsr $c23f			jsr 	ChooseRandomDirection
.ca29	18		clc				clc
.ca2a	60		rts				rts
.ca2b					_1:
.ca2b	38		sec				sec
.ca2c	60		rts				rts
.ca2d					OHBInitHandler:
.ca2d	a9 14		lda #$14			lda 	#GR_BRAIN
.ca2f	20 b7 c2	jsr $c2b7			jsr 	SetObjectGraphic
.ca32	a9 18		lda #$18			lda 	#24
.ca34	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.ca37	a9 01		lda #$01			lda 	#1
.ca39	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.ca3c	a9 00		lda #$00			lda 	#($500 & 255)
.ca3e	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.ca41	a9 05		lda #$05			lda 	#($500 >> 8)
.ca43	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.ca46	20 3f c2	jsr $c23f			jsr 	ChooseRandomDirection
.ca49	60		rts				rts
.ca4a					OHBCheckEat:
.ca4a	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; object being chased.
.ca4d	f0 23		beq $ca72			beq 	_OHBCEExit 					; none
.ca4f	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; actual object
.ca52	30 1e		bmi $ca72			bmi 	_OHBCEExit 					; not existing.
.ca54	20 dc c2	jsr $c2dc			jsr 	CheckCollision 				; are Y/X colliding ?
.ca57	90 19		bcc $ca72			bcc 	_OHBCEExit
.ca59	da		phx				phx
.ca5a	a9 0b		lda #$0b			lda 	#TP_PROG 					; create a PROG here
.ca5c	20 bf c2	jsr $c2bf			jsr 	CreateSingleObject
.ca5f	ac 03 c1	ldy $c103			ldy 	NewObject
.ca62	20 c7 c2	jsr $c2c7			jsr 	CopyStartPosition
.ca65	fa		plx				plx
.ca66	da		phx				phx
.ca67	20 c8 c1	jsr $c1c8			jsr 	KillObject	 				; kill the parent object
.ca6a	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x 			; and the thing it collided with, the human.
.ca6d	aa		tax				tax
.ca6e	20 c8 c1	jsr $c1c8			jsr 	KillObject
.ca71	fa		plx				plx
.ca72					_OHBCEExit:
.ca72	60		rts				rts
.ca73					OHBChaseHuman:
.ca73	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; check chase
.ca76	f0 05		beq $ca7d			beq 	_OHBNewChoose
.ca78	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; chased still alive ?
.ca7b	10 16		bpl $ca93			bpl 	_OHBChaseIt
.ca7d					_OHBNewChoose:
.ca7d	20 8e c2	jsr $c28e			jsr 	Random8Bit 					; no, keep randomly trying till found a live one.
.ca80	29 07		and #$07			and 	#OBH_RANDOM_MASK
.ca82	c9 06		cmp #$06			cmp 	#OBC_HUMANS
.ca84	b0 f7		bcs $ca7d			bcs 	_OHBNewChoose
.ca86	69 05		adc #$05			adc 	#OB_HUMANS
.ca88	a8		tay				tay
.ca89	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y
.ca8c	30 0b		bmi $ca99			bmi 	_OHBExit
.ca8e	98		tya				tya
.ca8f	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.ca92	60		rts				rts
.ca93					_OHBChaseIt:
.ca93	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x
.ca96	20 5a c2	jsr $c25a			jsr 	ChaseObject
.ca99					_OHBExit:
.ca99	60		rts				rts
.ca9a					OHProg:
.ca9a	c9 01		cmp #$01			cmp 	#MSG_INIT
.ca9c	d0 05		bne $caa3			bne 	_1
.ca9e	20 ae ca	jsr $caae			jsr 	OHPRInitHandler
.caa1	18		clc				clc
.caa2	60		rts				rts
.caa3					_1:
.caa3	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.caa5	d0 05		bne $caac			bne 	_1
.caa7	20 86 c2	jsr $c286			jsr 	ChasePlayer
.caaa	18		clc				clc
.caab	60		rts				rts
.caac					_1:
.caac	38		sec				sec
.caad	60		rts				rts
.caae					OHPRInitHandler:
.caae	a9 16		lda #$16			lda 	#GR1_PROG
.cab0	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cab3	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cab6	a9 04		lda #$04			lda 	#4
.cab8	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.cabb	a9 01		lda #$01			lda 	#1
.cabd	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cac0	a9 00		lda #$00			lda 	#($100 & 255)
.cac2	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.cac5	a9 01		lda #$01			lda 	#($100 >> 8)
.cac7	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.caca	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/explode.asm

.cacb					OHExplode:
.cacb	c9 01		cmp #$01			cmp 	#MSG_INIT
.cacd	d0 05		bne $cad4			bne 	_1
.cacf	20 f1 ca	jsr $caf1			jsr 	OHXInitHandler
.cad2	18		clc				clc
.cad3	60		rts				rts
.cad4					_1:
.cad4	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.cad6	d0 05		bne $cadd			bne 	_1
.cad8	20 02 cb	jsr $cb02			jsr 	OHXOnMove
.cadb	18		clc				clc
.cadc	60		rts				rts
.cadd					_1:
.cadd	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.cadf	d0 05		bne $cae6			bne 	_1
.cae1	20 fe ca	jsr $cafe			jsr 	OHXNoMove
.cae4	18		clc				clc
.cae5	60		rts				rts
.cae6					_1:
.cae6	c9 06		cmp #$06			cmp 	#MSG_SHOT
.cae8	d0 05		bne $caef			bne 	_1
.caea	20 01 cb	jsr $cb01			jsr 	OHXNoHit
.caed	18		clc				clc
.caee	60		rts				rts
.caef					_1:
.caef	38		sec				sec
.caf0	60		rts				rts
.caf1					OHXInitHandler:
.caf1	20 17 cb	jsr $cb17			jsr 	UpdateAnimation
.caf4	a9 08		lda #$08			lda 	#8
.caf6	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.caf9	a9 ff		lda #$ff			lda 	#255
.cafb	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.cafe					OHXNoMove:
.cafe	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb01					OHXNoHit:
.cb01	60		rts				rts
.cb02					OHXOnMove:
.cb02	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb05	c9 04		cmp #$04			cmp 	#4
.cb07	f0 0a		beq $cb13			beq 	_OHXKill
.cb09	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.cb0c	20 17 cb	jsr $cb17			jsr 	UpdateAnimation
.cb0f	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.cb12	60		rts				rts
.cb13					_OHXKill:
.cb13	20 c8 c1	jsr $c1c8			jsr 	KillObject
.cb16	60		rts				rts
.cb17					UpdateAnimation:
.cb17	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.cb1a	09 c0		ora #$c0			ora 	#$C0
.cb1c	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.cb1f	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.cb22	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/human.asm

.cb23					CheckPlayerHuman:
.cb23	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; check player human collisions
.cb25					_CPHLoop:
.cb25	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check live
.cb28	30 21		bmi $cb4b			bmi 	_CPHFail
.cb2a	a0 00		ldy #$00			ldy 	#0 							; check collision with player
.cb2c	20 dc c2	jsr $c2dc			jsr 	CheckCollision
.cb2f	90 1a		bcc $cb4b			bcc 	_CPHFail
.cb31	20 c8 c1	jsr $c1c8			jsr 	KillObject 					; delete the human as collected
.cb34	ad 51 cb	lda $cb51			lda 	CollectCount 				; bump collect count, limit to 5
.cb37	1a		inc a				inc 	a
.cb38	c9 06		cmp #$06			cmp 	#6
.cb3a	90 02		bcc $cb3e			bcc 	_CPHMax5
.cb3c	a9 05		lda #$05			lda 	#5
.cb3e					_CPHMax5:
.cb3e	8d 51 cb	sta $cb51			sta 	CollectCount
.cb41	0a		asl a				asl 	a 							; make to BCD x000
.cb42	0a		asl a				asl 	a
.cb43	0a		asl a				asl 	a
.cb44	0a		asl a				asl 	a
.cb45	a8		tay				tay
.cb46	a9 00		lda #$00			lda 	#0
.cb48	20 ff c2	jsr $c2ff			jsr 	AddYAToScore
.cb4b					_CPHFail:
.cb4b	e8		inx				inx
.cb4c	e0 0c		cpx #$0c			cpx 	#OB_ENEMIES+1
.cb4e	d0 d5		bne $cb25			bne 	_CPHLoop
.cb50	60		rts				rts
.cb51					CollectCount:
>cb51	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: checks/missiles.asm

.cb52					CheckHitRobots:
.cb52	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check enemies collide ?
.cb54					_CHRLoop1:
.cb54	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; check enemy alive
.cb57	30 2b		bmi $cb84			bmi 	_CHRNext1
.cb59	a0 01		ldy #$01			ldy 	#OB_PLAYERMISSILE 			; check missiles
.cb5b					_CHRLoop2:
.cb5b	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; missile in use
.cb5e	30 1f		bmi $cb7f			bmi 	_CHRNext2
.cb60	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y 			; not immediately fired
.cb63	d0 1a		bne $cb7f			bne 	_CHRNext2
.cb65	20 dc c2	jsr $c2dc			jsr 	CheckCollision 				; check collision.
.cb68	90 15		bcc $cb7f			bcc 	_CHRNext2
.cb6a	5a		phy				phy
.cb6b	a9 06		lda #$06			lda 	#MSG_SHOT
.cb6d	20 a6 c2	jsr $c2a6			jsr 	SendObjectMessage
.cb70	90 03		bcc $cb75			bcc 	_1
.cb72	20 ad c5	jsr $c5ad			jsr 	DefaultHandler
.cb75					_1:
.cb75	7a		ply				ply
.cb76	da		phx				phx 								; kill this missile.
.cb77	98		tya				tya
.cb78	aa		tax				tax
.cb79	20 c8 c1	jsr $c1c8			jsr		KillObject
.cb7c	fa		plx				plx
.cb7d	80 05		bra $cb84			bra 	_CHRNext1 					; go to check next human
.cb7f					_CHRNext2:
.cb7f	c8		iny				iny
.cb80	c0 05		cpy #$05			cpy		#OB_HUMANS 					; reached the end
.cb82	d0 d7		bne $cb5b			bne 	_CHRLoop2
.cb84					_CHRNext1:
.cb84	e8		inx				inx
.cb85	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cb87	d0 cb		bne $cb54			bne 	_CHRLoop1
.cb89	60		rts				rts
.cb8a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: checks/complete.asm

.cb8b					CheckComplete:
.cb8b	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES
.cb8d					_CheckLoop:
.cb8d	bd 00 e0	lda $e000,x			lda 	OBFlags,x
.cb90	30 16		bmi $cba8			bmi 	_CheckNext 					; not in use
.cb92	29 1f		and #$1f			and 	#31 						; object ID
.cb94	c9 02		cmp #$02			cmp		#TP_GRUNT 					; must be none of these left.
.cb96	f0 17		beq $cbaf			beq		_CheckFail  				; don't have to destroy everything
.cb98	c9 08		cmp #$08			cmp		#TP_BRAIN
.cb9a	f0 13		beq $cbaf			beq		_CheckFail
.cb9c	c9 09		cmp #$09			cmp		#TP_SPHERE
.cb9e	f0 0f		beq $cbaf			beq		_CheckFail
.cba0	c9 0a		cmp #$0a			cmp		#TP_QUARK
.cba2	f0 0b		beq $cbaf			beq		_CheckFail
.cba4	c9 0b		cmp #$0b			cmp		#TP_PROG
.cba6	f0 07		beq $cbaf			beq		_CheckFail
.cba8					_CheckNext:
.cba8	e8		inx				inx
.cba9	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.cbab	d0 e0		bne $cb8d			bne 	_CheckLoop
.cbad	38		sec				sec
.cbae	60		rts				rts
.cbaf					_CheckFail:
.cbaf	18		clc				clc
.cbb0	60		rts				rts

;******  Return to file: main.asm

.cbb1					MainGame:
.cbb1	20 b8 c1	jsr $c1b8			jsr 	ResetObjects 				; reset all game objects
.cbb4	a9 00		lda #$00			lda 	#0 							; create player
.cbb6	a2 01		ldx #$01			ldx 	#1
.cbb8	20 45 c0	jsr $c045			jsr 	CreateObjects
.cbbb	20 1c c4	jsr $c41c			jsr 	CreateCurrentObjects 		; create the objects expected.
.cbbe	20 3b c3	jsr $c33b			jsr 	DrawWave
.cbc1	20 69 c3	jsr $c369			jsr 	DrawScore
.cbc4					MainLoop:
.cbc4	ee f1 cb	inc $cbf1			inc 	FrameCount 					; bump frame counter
.cbc7	20 8b cb	jsr $cb8b			jsr 	CheckComplete 				; check completed first.
.cbca	b0 21		bcs $cbed			bcs 	_MLComplete
.cbcc	20 84 c1	jsr $c184			jsr 	AnimatePalette 				; causes flashing effects
.cbcf	20 04 c1	jsr $c104			jsr 	MoveObjects 				; move all objects
.cbd2	20 f2 cb	jsr $cbf2			jsr 	ClockDelay 					; delay to stop it being insanely fast.
.cbd5	20 23 cb	jsr $cb23			jsr 	CheckPlayerHuman 			; collect ?
.cbd8	20 52 cb	jsr $cb52			jsr 	CheckHitRobots 				; check if hit robot.
.cbdb	ad f1 cb	lda $cbf1			lda 	FrameCount
.cbde	29 07		and #$07			and 	#7
.cbe0	d0 03		bne $cbe5			bne 	_MainNoScore
.cbe2	20 69 c3	jsr $c369			jsr 	DrawScore
.cbe5					_MainNoScore:
.cbe5	80 dd		bra $cbc4			bra 	MainLoop
.cbe7					_MLKilled:
.cbe7	a9 01		lda #$01			lda 	#1
.cbe9	8d 40 c0	sta $c040			sta 	Result
.cbec	60		rts				rts
.cbed					_MLComplete:
.cbed	9c 40 c0	stz $c040			stz 	Result						; return 0 (level complete, not dead)
.cbf0	60		rts				rts
.cbf1					FrameCount:
>cbf1	00						.byte 	0
.cbf2					ClockDelay:
.cbf2	da		phx				phx
.cbf3	5a		phy				phy
.cbf4	ae 00 cc	ldx $cc00			ldx 	MoveSpeed
.cbf7					_MLDelay:
.cbf7	88		dey				dey
.cbf8	d0 fd		bne $cbf7			bne 	_MLDelay
.cbfa	ca		dex				dex
.cbfb	d0 fa		bne $cbf7			bne 	_MLDelay
.cbfd	7a		ply				ply
.cbfe	fa		plx				plx
.cbff	60		rts				rts
.cc00					MoveSpeed:
>cc00	28						.byte 	40
.cc01					HandlerTable:
>cc01	ed c5						.word 		OHPlayer 				; type 0 Player
>cc03	8e c6						.word 		OHMissile 				; type 1 Player missile
>cc05	49 c7						.word 		OHGrunt 				; type 2 Grunt
>cc07	ca c9						.word 		OHElectrode 			; type 3 Electrode
>cc09	08 c7						.word 		OHHuman1 				; type 4-6 Humans
>cc0b	13 c7						.word 		OHHuman2
>cc0d	1e c7						.word 		OHHuman3
>cc0f	77 c7						.word 		OHHulk 					; type 7 Hulk
>cc11	07 ca						.word 		OHBrain 				; type 8 Brain
>cc13	b8 c7						.word 		OHSphere 				; type 9 Sphere
>cc15	bd c8						.word 		OHQuark 				; type 10 Quark
>cc17	9a ca						.word 		OHProg 					; type 11 Prog
>cc19	80 c8						.word 		OHESpark 				; type 12 Enforcer Sparks.
>cc1b	2f c8						.word 		OHEnforcer 				; type 13 Enforcer
>cc1d	4f c9						.word 		OHShell 				; type 14 Shell
>cc1f	0a c9						.word 		OHTank 					; type 15 Tank
>cc21	cb ca						.word 		OHExplode 				; type 16 Explosion Graphic

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
