
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Fri Apr 19 11:59:07 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_EMBRYO	= 16  							; Embryo graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_HORIZFIRE = 22  						; Horizontal fire
=23					GR1_VERTFIRE = 23  							; Vertical fire
=24					GR1_SWNEFIRE = 24   						; / fire
=25					GR1_NWSEFIRE = 25  							; \ fire
=26					GR4_ELECTRODES = 26  						; Set of 3 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.

;******  Return to file: main.asm

.c000	4c 41 c1	jmp $c141			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c d0 c0	jmp $c0d0			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c041	0a		asl a				asl 	a 							; double -> Y
.c042	a8		tay				tay
.c043	b9 b5 c2	lda $c2b5,y			lda 	HandlerTable,y  			; put the handler address in.
.c046	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c049	b9 b6 c2	lda $c2b6,y			lda 	HandlerTable+1,y
.c04c	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c04f					_COPos1:
.c04f	20 ac c1	jsr $c1ac			jsr 	Random8Bit  				; value is 0-151
.c052	c9 98		cmp #$98			cmp 	#152
.c054	b0 f9		bcs $c04f			bcs 	_COPos1
.c056	69 04		adc #$04			adc 	#4
.c058	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05b					_COPos2:
.c05b	20 ac c1	jsr $c1ac			jsr 	Random8Bit 					; value is 0-103
.c05e	29 7f		and #$7f			and 	#$7F
.c060	c9 68		cmp #$68			cmp 	#104
.c062	b0 f7		bcs $c05b			bcs 	_COPos2
.c064	69 04		adc #$04			adc 	#4
.c066	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c069	38		sec				sec   								; check Y centre offset
.c06a	e9 34		sbc #$34			sbc 	#52
.c06c	20 ae c0	jsr $c0ae			jsr 	_COAbsolute
.c06f	c9 27		cmp #$27			cmp 	#39
.c071	b0 0d		bcs $c080			bcs 	_COIsOkay
.c073	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c076	38		sec				sec
.c077	e9 4b		sbc #$4b			sbc 	#75
.c079	20 ae c0	jsr $c0ae			jsr 	_COAbsolute
.c07c	c9 37		cmp #$37			cmp 	#55
.c07e	90 cf		bcc $c04f			bcc 	_COPos1
.c080					_COIsOkay:
.c080	a9 0a		lda #$0a			lda 	#GR_HULK 					; temporary value.
.c082	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c085	1a		inc a				inc 	a
.c086	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c089	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c08a	29 07		and #$07			and 	#7
.c08c	1a		inc a				inc 	a
.c08d	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c090	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c093	a9 01		lda #$01			lda 	#1
.c095	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c098	a9 0a		lda #$0a			lda 	#10
.c09a	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c09d	20 b6 c0	jsr $c0b6			jsr 	ChooseRandomDirection
.c0a0	a9 01		lda #$01			lda 	#MSG_INIT
.c0a2	20 c4 c1	jsr $c1c4			jsr 	SendObjectMessage
.c0a5	90 03		bcc $c0aa			bcc 	_1
.c0a7	20 dd c1	jsr $c1dd			jsr 	DefaultHandler
.c0aa					_1:
.c0aa	20 4e c1	jsr $c14e			jsr 	RedrawObject
.c0ad	60		rts				rts
.c0ae					_COAbsolute:
.c0ae	c9 00		cmp #$00			cmp 	#0
.c0b0	10 03		bpl $c0b5			bpl 	_COAExit
.c0b2	49 ff		eor #$ff			eor 	#$FF
.c0b4	1a		inc a				inc 	a
.c0b5					_COAExit:
.c0b5	60		rts				rts
.c0b6					ChooseRandomDirection:
.c0b6	20 ac c1	jsr $c1ac			jsr 	Random8Bit 					; get valid random direction
.c0b9	29 0f		and #$0f			and 	#15
.c0bb	f0 f9		beq $c0b6			beq 	ChooseRandomDirection 				; stationary (0)
.c0bd	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c0c0	29 03		and #$03			and 	#3 							; check LR not both on.
.c0c2	c9 03		cmp #$03			cmp 	#3
.c0c4	f0 f0		beq $c0b6			beq 	ChooseRandomDirection
.c0c6	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c0c9	29 0c		and #$0c			and 	#12
.c0cb	c9 0c		cmp #$0c			cmp 	#12
.c0cd	f0 e7		beq $c0b6			beq 	ChooseRandomDirection
.c0cf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0d0					MoveObjects:
.c0d0	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0d2					_MOLoop:
.c0d2	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0d5	30 03		bmi $c0da			bmi 	_MONoObject
.c0d7	20 e0 c0	jsr $c0e0			jsr 	_MoveOneObject
.c0da					_MONoObject:
.c0da	e8		inx				inx
.c0db	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0dd	d0 f3		bne $c0d2			bne 	_MOLoop
.c0df	60		rts				rts  								; cannot create, exit.
.c0e0					_MoveOneObject:
.c0e0	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0e3	d0 50		bne $c135			bne 	_MONotMove
.c0e5	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0e8	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0eb	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0ee	d0 10		bne $c100			bne 	_MONoProcess
.c0f0	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0f3	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0f6	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0f8	20 c4 c1	jsr $c1c4			jsr 	SendObjectMessage
.c0fb	90 03		bcc $c100			bcc 	_1
.c0fd	20 dd c1	jsr $c1dd			jsr 	DefaultHandler
.c100					_1:
.c100					_MONoProcess:
.c100	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c103	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c106	4a		lsr a				lsr 	a
.c107	90 01		bcc $c10a			bcc 	_MONotLeft
.c109	88		dey				dey
.c10a					_MONotLeft:
.c10a	4a		lsr a				lsr 	a
.c10b	90 01		bcc $c10e			bcc 	_MONotRight
.c10d	c8		iny				iny
.c10e					_MONotRight:
.c10e	5a		phy				phy 								; new Y position on stack
.c10f	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c112	4a		lsr a				lsr 	a
.c113	90 01		bcc $c116			bcc 	_MONotUp
.c115	88		dey				dey
.c116					_MONotUp:
.c116	4a		lsr a				lsr 	a
.c117	90 01		bcc $c11a			bcc 	_MONotDown
.c119	c8		iny				iny
.c11a					_MONotDown:
.c11a	68		pla				pla 								; (A,Y) are new coordinates.
.c11b	c9 04		cmp #$04			cmp 	#4  						; check out of bounds.
.c11d	90 17		bcc $c136			bcc 	_MOHitWall
.c11f	c9 9c		cmp #$9c			cmp 	#156
.c121	b0 13		bcs $c136			bcs 	_MOHitWall
.c123	c0 04		cpy #$04			cpy 	#4
.c125	90 0f		bcc $c136			bcc 	_MOHitWall
.c127	c0 6c		cpy #$6c			cpy 	#108
.c129	b0 0b		bcs $c136			bcs 	_MOHitWall
.c12b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c12e	98		tya				tya
.c12f	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c132	20 4e c1	jsr $c14e			jsr 	RedrawObject 				; repaint.
.c135					_MONotMove:
.c135	60		rts				rts
.c136					_MOHitWall:
.c136	a9 04		lda #$04			lda 	#MSG_HITWALL
.c138	20 c4 c1	jsr $c1c4			jsr 	SendObjectMessage
.c13b	90 03		bcc $c140			bcc 	_1
.c13d	20 dd c1	jsr $c1dd			jsr 	DefaultHandler
.c140					_1:
.c140	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c141					ResetObjects:
.c141	a2 00		ldx #$00			ldx 	#0
.c143					_RSLoop:
.c143	a9 ff		lda #$ff			lda 	#$FF
.c145	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c148	e8		inx				inx
.c149	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c14b	d0 f6		bne $c143			bne 	_RSLoop
.c14d	60		rts				rts
.c14e					RedrawObject:
.c14e	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c151	d0 fb		bne $c14e			bne 	RedrawObject
.c153	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c156	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c159	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c15c	0a		asl a				asl 	a
.c15d	8d 05 ff	sta $ff05			sta 	APIParams+1
.c160	2e 06 ff	rol $ff06			rol 	APIParams+2
.c163	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c166	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c169	0a		asl a				asl 	a
.c16a	69 10		adc #$10			adc 	#16 						; allow for top area
.c16c	8d 07 ff	sta $ff07			sta 	APIParams+3
.c16f	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c172	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c175	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c177	f0 10		beq $c189			beq 	_ROUseSprite2
.c179	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c17b	d0 03		bne $c180			bne 	_ROHasHorizonMovement
.c17d	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c180					_ROHasHorizonMovement:
.c180	98		tya				tya 								; put bit 2 into carry.
.c181	4a		lsr a				lsr 	a
.c182	4a		lsr a				lsr 	a
.c183	4a		lsr a				lsr 	a
.c184	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c187	90 03		bcc $c18c			bcc 	_ROUseSprite
.c189					_ROUseSprite2:
.c189	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c18c					_ROUseSprite:
.c18c	8d 09 ff	sta $ff09			sta 	APIParams+5
.c18f	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c192	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c194	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c197					_RONotLeft:
.c197	a9 02		lda #$02			lda 	#MSG_REPAINT
.c199	20 c4 c1	jsr $c1c4			jsr 	SendObjectMessage
.c19c	90 03		bcc $c1a1			bcc 	_1
.c19e	20 dd c1	jsr $c1dd			jsr 	DefaultHandler
.c1a1					_1:
.c1a1	a9 02		lda #$02			lda 	#2  						; and draw it.
.c1a3	8d 01 ff	sta $ff01			sta 	APIFunction
.c1a6	a9 06		lda #$06			lda 	#6
.c1a8	8d 00 ff	sta $ff00			sta 	APICommand
.c1ab	60		rts				rts
.c1ac					Random8Bit:
.c1ac	5a		phy				phy
.c1ad	a0 08		ldy #$08			ldy 	#8
.c1af	ad c2 c1	lda $c1c2			lda 	_R8SeedValue+0
.c1b2					_R8RandomLoop
.c1b2	0a		asl a				asl     a
.c1b3	2e c3 c1	rol $c1c3			rol 	_R8SeedValue+1
.c1b6	90 02		bcc $c1ba			bcc 	_R8NotSet
.c1b8	49 39		eor #$39			eor 	#$39
.c1ba					_R8NotSet:
.c1ba	88		dey				dey
.c1bb	d0 f5		bne $c1b2			bne 	_R8RandomLoop
.c1bd	8d c2 c1	sta $c1c2			sta 	_R8SeedValue+0
.c1c0	7a		ply				ply
.c1c1	60		rts				rts
.c1c2					_R8SeedValue
>c1c2	cd ab						.word 	$ABCD
.c1c4					SendObjectMessage:
.c1c4	48		pha				pha
.c1c5	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c1c8	8d d3 c1	sta $c1d3			sta 	_SMCall+1
.c1cb	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c1ce	8d d4 c1	sta $c1d4			sta 	_SMCall+2
.c1d1	68		pla				pla
.c1d2					_SMCall:
.c1d2	4c 00 00	jmp $0000			jmp 	$0000
.c1d5					SetObjectGraphic:
.c1d5	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c1d8	1a		inc a				inc 	a
.c1d9	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c1dc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c1dd					DefaultHandler:
.c1dd	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c1df	d0 05		bne $c1e6			bne 	_1
.c1e1	20 f1 c1	jsr $c1f1			jsr 	DefaultControl
.c1e4	18		clc				clc
.c1e5	60		rts				rts
.c1e6					_1:
.c1e6	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c1e8	d0 05		bne $c1ef			bne 	_1
.c1ea	20 f4 c1	jsr $c1f4			jsr 	DefaultHitWall
.c1ed	18		clc				clc
.c1ee	60		rts				rts
.c1ef					_1:
.c1ef	38		sec				sec
.c1f0	60		rts				rts
.c1f1					DefaultControl:
.c1f1	4c b6 c0	jmp $c0b6			jmp 	ChooseRandomDirection
.c1f4					DefaultHitWall:
.c1f4	4c b6 c0	jmp $c0b6			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c1f7					OHPlayer:
.c1f7	c9 01		cmp #$01			cmp 	#MSG_INIT
.c1f9	d0 05		bne $c200			bne 	_1
.c1fb	20 14 c2	jsr $c214			jsr 	OHPInitHandler
.c1fe	18		clc				clc
.c1ff	60		rts				rts
.c200					_1:
.c200	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c202	d0 05		bne $c209			bne 	_1
.c204	20 29 c2	jsr $c229			jsr 	OHPRepaintHandler
.c207	18		clc				clc
.c208	60		rts				rts
.c209					_1:
.c209	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c20b	d0 05		bne $c212			bne 	_1
.c20d	20 3c c2	jsr $c23c			jsr 	OHPControlHandler
.c210	18		clc				clc
.c211	60		rts				rts
.c212					_1:
.c212	38		sec				sec
.c213	60		rts				rts
.c214					OHPInitHandler:
.c214	a9 50		lda #$50			lda 	#160/2
.c216	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c219	a9 40		lda #$40			lda 	#128/2
.c21b	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c21e	a9 02		lda #$02			lda 	#2
.c220	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c223	a9 01		lda #$01			lda 	#1
.c225	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c228	60		rts				rts
.c229					OHPRepaintHandler:
.c229	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c22c	29 03		and #$03			and 	#3
.c22e	d0 06		bne $c236			bne 	_OHPRHorizontal
.c230	a9 02		lda #$02			lda 	#GR_PLAYERV
.c232	20 d5 c1	jsr $c1d5			jsr 	SetObjectGraphic
.c235	60		rts				rts
.c236					_OHPRHorizontal:
.c236	a9 00		lda #$00			lda 	#GR_PLAYERH
.c238	20 d5 c1	jsr $c1d5			jsr 	SetObjectGraphic
.c23b	60		rts				rts
.c23c					OHPControlHandler:
.c23c	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c23f	d0 fb		bne $c23c			bne 	OHPControlHandler
.c241	a9 01		lda #$01			lda 	#1  						; and draw it.
.c243	8d 01 ff	sta $ff01			sta 	APIFunction
.c246	a9 07		lda #$07			lda 	#7
.c248	8d 00 ff	sta $ff00			sta 	APICommand
.c24b					_OHPWait
.c24b	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c24e	d0 fb		bne $c24b			bne 	_OHPWait
.c250	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c253	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c255	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c258	f0 03		beq $c25d			beq 	_OHPNoSetLast 				; set last direction if non zero
.c25a	8d 5e c2	sta $c25e			sta 	OHPLastDirection
.c25d					_OHPNoSetLast:
.c25d	60		rts				rts
.c25e					OHPLastDirection:
>c25e	02						.byte 	2

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c25f					OHMissile:
.c25f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c261	d0 05		bne $c268			bne 	_1
.c263	20 7c c2	jsr $c27c			jsr 	OHMInitHandler
.c266	18		clc				clc
.c267	60		rts				rts
.c268					_1:
.c268	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c26a	d0 05		bne $c271			bne 	_1
.c26c	20 94 c2	jsr $c294			jsr 	OHMRepaintHandler
.c26f	18		clc				clc
.c270	60		rts				rts
.c271					_1:
.c271	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c273	d0 05		bne $c27a			bne 	_1
.c275	20 b4 c2	jsr $c2b4			jsr 	OHMControl
.c278	18		clc				clc
.c279	60		rts				rts
.c27a					_1:
.c27a	38		sec				sec
.c27b	60		rts				rts
.c27c					OHMInitHandler:
.c27c	a9 01		lda #$01			lda 	#1
.c27e	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c281	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c284	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c287	ad d8 e0	lda $e0d8			lda 	OBYPos
.c28a	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c28d	ad 5e c2	lda $c25e			lda 	OHPLastDirection 			; copy direction
.c290	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c293	60		rts				rts
.c294					OHMRepaintHandler:
.c294	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c297	b9 a4 c2	lda $c2a4,y			lda 	OHMGraphic,y 				; set graphic.
.c29a	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c29d	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c2a0	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c2a3	60		rts				rts
.c2a4					OHMGraphic:
>c2a4	00 16 16 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c2a8	17 19 18 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c2ac	17 18 19 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c2b0	00 00 00 00					.byte 	0,0,0,0
.c2b4					_OHMIVertical:
.c2b4					OHMControl:
.c2b4	60		rts				rts

;******  Return to file: main.asm

.c2b5					HandlerTable:
>c2b5	f7 c1						.word 		OHPlayer 				; type 0, player object
>c2b7	5f c2						.word 		OHMissile 				; type 1, player missile object

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
