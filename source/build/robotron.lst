
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Tue Apr 23 17:41:16 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=5					TP_GRUNT = 5
=6					TP_HULK = 6
=7					TP_ESPARK = 7
=8					TP_ENFORCER = 8
=9					TP_SPHERE = 9
=10					TP_SHELL = 10
=11					TP_TANK = 11
=12					TP_QUARK = 12
=13					TP_ELECTRODE = 13
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_HORIZFIRE = 22  						; Horizontal fire
=23					GR1_VERTFIRE = 23  							; Vertical fire
=24					GR1_SWNEFIRE = 24   						; / fire
=25					GR1_NWSEFIRE = 25  							; \ fire
=26					GR4_ELECTRODES = 26  						; Set of 3 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 45 c1	jmp $c145			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c c1 c0	jmp $c0c1			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	8e c0 c0	stx $c0c0			stx 	NewObject 					; remember the new object
.c041	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c044	0a		asl a				asl 	a 							; double -> Y
.c045	a8		tay				tay
.c046	b9 5a c6	lda $c65a,y			lda 	HandlerTable,y  			; put the handler address in.
.c049	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c04c	b9 5b c6	lda $c65b,y			lda 	HandlerTable+1,y
.c04f	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c052					_COPos1:
.c052	20 15 c2	jsr $c215			jsr 	Random8Bit  				; value is 0-151
.c055	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c057	b0 f9		bcs $c052			bcs 	_COPos1
.c059	69 04		adc #$04			adc 	#PF_LEFT
.c05b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05e					_COPos2:
.c05e	20 15 c2	jsr $c215			jsr 	Random8Bit 					; value is 0-103
.c061	29 7f		and #$7f			and 	#$7F
.c063	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c065	b0 f7		bcs $c05e			bcs 	_COPos2
.c067	69 04		adc #$04			adc 	#PF_TOP
.c069	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c06c	38		sec				sec   								; check Y centre offset
.c06d	e9 34		sbc #$34			sbc 	#52
.c06f	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c072	c9 27		cmp #$27			cmp 	#39
.c074	b0 0d		bcs $c083			bcs 	_COIsOkay
.c076	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c079	38		sec				sec
.c07a	e9 4b		sbc #$4b			sbc 	#75
.c07c	20 b8 c0	jsr $c0b8			jsr 	_COAbsolute
.c07f	c9 37		cmp #$37			cmp 	#55
.c081	90 cf		bcc $c052			bcc 	_COPos1
.c083					_COIsOkay:
.c083	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c085	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c088	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c08b	a9 ff		lda #$ff			lda 	#$FF
.c08d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c090	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c093	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c094	29 07		and #$07			and 	#7
.c096	1a		inc a				inc 	a
.c097	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c09a	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c09d	a9 01		lda #$01			lda 	#1
.c09f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0a2	a9 0a		lda #$0a			lda 	#10
.c0a4	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0a7	20 c6 c1	jsr $c1c6			jsr 	ChooseRandomDirection
.c0aa	a9 01		lda #$01			lda 	#MSG_INIT
.c0ac	20 2d c2	jsr $c22d			jsr 	SendObjectMessage
.c0af	90 03		bcc $c0b4			bcc 	_1
.c0b1	20 63 c2	jsr $c263			jsr 	DefaultHandler
.c0b4					_1:
.c0b4	20 6a c1	jsr $c16a			jsr 	RedrawObject
.c0b7	60		rts				rts
.c0b8					_COAbsolute:
.c0b8	c9 00		cmp #$00			cmp 	#0
.c0ba	10 03		bpl $c0bf			bpl 	_COAExit
.c0bc	49 ff		eor #$ff			eor 	#$FF
.c0be	1a		inc a				inc 	a
.c0bf					_COAExit:
.c0bf	60		rts				rts
.c0c0					NewObject:
>c0c0	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0c1					MoveObjects:
.c0c1	ee 44 c1	inc $c144			inc 	FrameCount
.c0c4	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0c6					_MOLoop:
.c0c6	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0c9	30 03		bmi $c0ce			bmi 	_MONoObject
.c0cb	20 d4 c0	jsr $c0d4			jsr 	_MoveOneObject
.c0ce					_MONoObject:
.c0ce	e8		inx				inx
.c0cf	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0d1	d0 f3		bne $c0c6			bne 	_MOLoop
.c0d3	60		rts				rts  								; cannot create, exit.
.c0d4					_MoveOneObject:
.c0d4	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0d7	d0 5f		bne $c138			bne 	_MONotMove
.c0d9	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0dc	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0df	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0e2	d0 10		bne $c0f4			bne 	_MONoProcess
.c0e4	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0e7	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0ea	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0ec	20 2d c2	jsr $c22d			jsr 	SendObjectMessage
.c0ef	90 03		bcc $c0f4			bcc 	_1
.c0f1	20 63 c2	jsr $c263			jsr 	DefaultHandler
.c0f4					_1:
.c0f4					_MONoProcess:
.c0f4	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c0f7	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c0fa	4a		lsr a				lsr 	a
.c0fb	90 01		bcc $c0fe			bcc 	_MONotLeft
.c0fd	88		dey				dey
.c0fe					_MONotLeft:
.c0fe	4a		lsr a				lsr 	a
.c0ff	90 01		bcc $c102			bcc 	_MONotRight
.c101	c8		iny				iny
.c102					_MONotRight:
.c102	5a		phy				phy 								; new Y position on stack
.c103	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c106	4a		lsr a				lsr 	a
.c107	90 01		bcc $c10a			bcc 	_MONotUp
.c109	88		dey				dey
.c10a					_MONotUp:
.c10a	4a		lsr a				lsr 	a
.c10b	90 01		bcc $c10e			bcc 	_MONotDown
.c10d	c8		iny				iny
.c10e					_MONotDown:
.c10e	68		pla				pla 								; (A,Y) are new coordinates.
.c10f	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c111	90 26		bcc $c139			bcc 	_MOHitWall
.c113	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c115	b0 22		bcs $c139			bcs 	_MOHitWall
.c117	c0 04		cpy #$04			cpy 	#PF_TOP
.c119	90 1e		bcc $c139			bcc 	_MOHitWall
.c11b	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c11d	b0 1a		bcs $c139			bcs 	_MOHitWall
.c11f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c122	98		tya				tya
.c123	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c126	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c128	20 2d c2	jsr $c22d			jsr 	SendObjectMessage
.c12b	90 03		bcc $c130			bcc 	_1
.c12d	20 63 c2	jsr $c263			jsr 	DefaultHandler
.c130					_1:
.c130	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c133	30 03		bmi $c138			bmi 	_MONotMove
.c135	20 6a c1	jsr $c16a			jsr 	RedrawObject 				; repaint.
.c138					_MONotMove:
.c138	60		rts				rts
.c139					_MOHitWall:
.c139	a9 04		lda #$04			lda 	#MSG_HITWALL
.c13b	20 2d c2	jsr $c22d			jsr 	SendObjectMessage
.c13e	90 03		bcc $c143			bcc 	_1
.c140	20 63 c2	jsr $c263			jsr 	DefaultHandler
.c143					_1:
.c143	60		rts				rts
.c144					FrameCount:
>c144	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c145					ResetObjects:
.c145	a2 00		ldx #$00			ldx 	#0
.c147					_RSLoop:
.c147	a9 ff		lda #$ff			lda 	#$FF
.c149	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c14c	e8		inx				inx
.c14d	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c14f	d0 f6		bne $c147			bne 	_RSLoop
.c151	60		rts				rts
.c152					KillObject:
.c152	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c155	d0 fb		bne $c152			bne 	KillObject
.c157	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c159	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c15c	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c15f	a9 03		lda #$03			lda 	#3  						; and hide it.
.c161	8d 01 ff	sta $ff01			sta 	APIFunction
.c164	a9 06		lda #$06			lda 	#6
.c166	8d 00 ff	sta $ff00			sta 	APICommand
.c169	60		rts				rts
.c16a					RedrawObject:
.c16a	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c16d	d0 fb		bne $c16a			bne 	RedrawObject
.c16f	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c172	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c175	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c178	0a		asl a				asl 	a
.c179	8d 05 ff	sta $ff05			sta 	APIParams+1
.c17c	2e 06 ff	rol $ff06			rol 	APIParams+2
.c17f	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c182	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c185	0a		asl a				asl 	a
.c186	69 08		adc #$08			adc 	#8 							; allow for top area
.c188	8d 07 ff	sta $ff07			sta 	APIParams+3
.c18b	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c18e	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c191	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c193	f0 0e		beq $c1a3			beq 	_ROUseSprite2
.c195	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c197	d0 03		bne $c19c			bne 	_ROHasHorizonMovement
.c199	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c19c					_ROHasHorizonMovement:
.c19c	98		tya				tya 								; put bit 1 into carry.
.c19d	4a		lsr a				lsr 	a
.c19e	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c1a1	90 03		bcc $c1a6			bcc 	_ROUseSprite
.c1a3					_ROUseSprite2:
.c1a3	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c1a6					_ROUseSprite:
.c1a6	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1a9	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1ac	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1ae	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1b1					_RONotLeft:
.c1b1	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1b3	20 2d c2	jsr $c22d			jsr 	SendObjectMessage
.c1b6	90 03		bcc $c1bb			bcc 	_1
.c1b8	20 63 c2	jsr $c263			jsr 	DefaultHandler
.c1bb					_1:
.c1bb	a9 02		lda #$02			lda 	#2  						; and draw it.
.c1bd	8d 01 ff	sta $ff01			sta 	APIFunction
.c1c0	a9 06		lda #$06			lda 	#6
.c1c2	8d 00 ff	sta $ff00			sta 	APICommand
.c1c5	60		rts				rts
.c1c6					ChooseRandomDirection:
.c1c6	20 15 c2	jsr $c215			jsr 	Random8Bit 					; get valid random direction
.c1c9	29 0f		and #$0f			and 	#15
.c1cb	f0 f9		beq $c1c6			beq 	ChooseRandomDirection 		; stationary (0)
.c1cd	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1d0	29 03		and #$03			and 	#3 							; check LR not both on.
.c1d2	c9 03		cmp #$03			cmp 	#3
.c1d4	f0 f0		beq $c1c6			beq 	ChooseRandomDirection
.c1d6	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c1d9	29 0c		and #$0c			and 	#12
.c1db	c9 0c		cmp #$0c			cmp 	#12
.c1dd	f0 e7		beq $c1c6			beq 	ChooseRandomDirection
.c1df	60		rts				rts
.c1e0					NoControlEffect:
.c1e0	60		rts				rts
.c1e1					ChaseObject:
.c1e1	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c1e4	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c1e7	20 00 c2	jsr $c200			jsr 	_ChaseCalculate
.c1ea	8d ff c1	sta $c1ff			sta 	_ChaseTemp
.c1ed	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c1f0	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c1f3	20 00 c2	jsr $c200			jsr 	_ChaseCalculate
.c1f6	0a		asl a				asl 	a
.c1f7	0a		asl a				asl 	a
.c1f8	0d ff c1	ora $c1ff			ora 	_ChaseTemp
.c1fb	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c1fe	60		rts				rts
.c1ff					_ChaseTemp:
>c1ff	00						.byte 	0
.c200					_ChaseCalculate:
.c200	f0 08		beq $c20a			beq 	_CCNoMove
.c202	90 03		bcc $c207			bcc 	_CCMoveRight
.c204	a9 02		lda #$02			lda 	#2
.c206	60		rts				rts
.c207					_CCMoveRight:
.c207	a9 01		lda #$01			lda 	#1
.c209	60		rts				rts
.c20a					_CCNoMove:
.c20a	a9 00		lda #$00			lda 	#0
.c20c	60		rts				rts
.c20d					ChasePlayer:
.c20d	5a		phy				phy
.c20e	a0 00		ldy #$00			ldy 	#0
.c210	20 e1 c1	jsr $c1e1			jsr 	ChaseObject
.c213	7a		ply				ply
.c214	60		rts				rts
.c215					Random8Bit:
.c215	5a		phy				phy
.c216	a0 08		ldy #$08			ldy 	#8
.c218	ad 2b c2	lda $c22b			lda 	_R8SeedValue+0
.c21b					_R8RandomLoop
.c21b	0a		asl a				asl     a
.c21c	2e 2c c2	rol $c22c			rol 	_R8SeedValue+1
.c21f	90 02		bcc $c223			bcc 	_R8NotSet
.c221	49 39		eor #$39			eor 	#$39
.c223					_R8NotSet:
.c223	88		dey				dey
.c224	d0 f5		bne $c21b			bne 	_R8RandomLoop
.c226	8d 2b c2	sta $c22b			sta 	_R8SeedValue+0
.c229	7a		ply				ply
.c22a	60		rts				rts
.c22b					_R8SeedValue
>c22b	cd ab						.word 	$ABCD
.c22d					SendObjectMessage:
.c22d	48		pha				pha
.c22e	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c231	8d 3c c2	sta $c23c			sta 	_SMCall+1
.c234	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c237	8d 3d c2	sta $c23d			sta 	_SMCall+2
.c23a	68		pla				pla
.c23b					_SMCall:
.c23b	4c 00 00	jmp $0000			jmp 	$0000
.c23e					SetObjectGraphic:
.c23e	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c241	1a		inc a				inc 	a
.c242	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c245	60		rts				rts
.c246					CreateSingleObject:
.c246	da		phx				phx 								; create player missile object.
.c247	5a		phy				phy
.c248	20 18 c0	jsr $c018			jsr 	CreateObject
.c24b	7a		ply				ply
.c24c	fa		plx				plx
.c24d	60		rts				rts
.c24e					CopyStartPosition:
.c24e	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c251	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c254	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c257	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c25a	60		rts				rts
.c25b					ChasePlayerY:
.c25b	da		phx				phx
.c25c	98		tya				tya
.c25d	aa		tax				tax
.c25e	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c261	fa		plx				plx
.c262	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c263					DefaultHandler:
.c263	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c265	d0 05		bne $c26c			bne 	_1
.c267	20 77 c2	jsr $c277			jsr 	DefaultControl
.c26a	18		clc				clc
.c26b	60		rts				rts
.c26c					_1:
.c26c	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c26e	d0 05		bne $c275			bne 	_1
.c270	20 7a c2	jsr $c27a			jsr 	DefaultHitWall
.c273	18		clc				clc
.c274	60		rts				rts
.c275					_1:
.c275	38		sec				sec
.c276	60		rts				rts
.c277					DefaultControl:
.c277	4c c6 c1	jmp $c1c6			jmp 	ChooseRandomDirection
.c27a					DefaultHitWall:
.c27a	4c c6 c1	jmp $c1c6			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c27d					OHPlayer:
.c27d	c9 01		cmp #$01			cmp 	#MSG_INIT
.c27f	d0 05		bne $c286			bne 	_1
.c281	20 9a c2	jsr $c29a			jsr 	OHPInitHandler
.c284	18		clc				clc
.c285	60		rts				rts
.c286					_1:
.c286	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c288	d0 05		bne $c28f			bne 	_1
.c28a	20 af c2	jsr $c2af			jsr 	OHPRepaintHandler
.c28d	18		clc				clc
.c28e	60		rts				rts
.c28f					_1:
.c28f	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c291	d0 05		bne $c298			bne 	_1
.c293	20 de c2	jsr $c2de			jsr 	OHPControlHandler
.c296	18		clc				clc
.c297	60		rts				rts
.c298					_1:
.c298	38		sec				sec
.c299	60		rts				rts
.c29a					OHPInitHandler:
.c29a	a9 50		lda #$50			lda 	#160/2
.c29c	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c29f	a9 40		lda #$40			lda 	#128/2
.c2a1	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2a4	a9 02		lda #$02			lda 	#2
.c2a6	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c2a9	a9 01		lda #$01			lda 	#1
.c2ab	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c2ae	60		rts				rts
.c2af					OHPRepaintHandler:
.c2af	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c2b2	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c2b5	29 03		and #$03			and 	#3
.c2b7	d0 03		bne $c2bc			bne 	_OHPUseVertical
.c2b9	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c2bc					_OHPUseVertical:
.c2bc	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c2bf	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c2c2	98		tya				tya
.c2c3	29 10		and #$10			and 	#16
.c2c5	f0 03		beq $c2ca			beq 	_OHPNoAlternate
.c2c7	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c2ca					_OHPNoAlternate:
.c2ca	60		rts				rts
.c2cb					OHPSetGraphic:
.c2cb	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c2ce	29 03		and #$03			and 	#3
.c2d0	d0 06		bne $c2d8			bne 	_OHPRHorizontal
.c2d2	a9 02		lda #$02			lda 	#GR_PLAYERV
.c2d4	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c2d7	60		rts				rts
.c2d8					_OHPRHorizontal:
.c2d8	a9 00		lda #$00			lda 	#GR_PLAYERH
.c2da	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c2dd	60		rts				rts
.c2de					OHPControlHandler:
.c2de	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c2e1	d0 fb		bne $c2de			bne 	OHPControlHandler
.c2e3	a9 01		lda #$01			lda 	#1  						; and draw it.
.c2e5	8d 01 ff	sta $ff01			sta 	APIFunction
.c2e8	a9 07		lda #$07			lda 	#7
.c2ea	8d 00 ff	sta $ff00			sta 	APICommand
.c2ed					_OHPWait
.c2ed	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c2f0	d0 fb		bne $c2ed			bne 	_OHPWait
.c2f2	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c2f5	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c2f7	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c2fa	f0 0d		beq $c309			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c2fc	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c2ff	29 f0		and #$f0			and 	#$F0
.c301	d0 06		bne $c309			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c303	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c306	8d 1c c3	sta $c31c			sta 	OHPLastDirection
.c309					_OHPNoSetLast:
.c309	ee 1d c3	inc $c31d			inc 	OHPFireCount 				; fire one time in 15
.c30c	ad 1d c3	lda $c31d			lda 	OHPFireCount
.c30f	29 0f		and #$0f			and 	#15
.c311	d0 05		bne $c318			bne 	_OHPNoFire
.c313	a9 01		lda #$01			lda 	#1
.c315	20 46 c2	jsr $c246			jsr 	CreateSingleObject
.c318					_OHPNoFire:
.c318	20 cb c2	jsr $c2cb			jsr 	OHPSetGraphic
.c31b	60		rts				rts
.c31c					OHPLastDirection:
>c31c	02						.byte 	2
.c31d					OHPFireCount:
>c31d	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c31e					OHMissile:
.c31e	c9 01		cmp #$01			cmp 	#MSG_INIT
.c320	d0 05		bne $c327			bne 	_1
.c322	20 44 c3	jsr $c344			jsr 	OHMInitHandler
.c325	18		clc				clc
.c326	60		rts				rts
.c327					_1:
.c327	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c329	d0 05		bne $c330			bne 	_1
.c32b	20 5c c3	jsr $c35c			jsr 	OHMRepaintHandler
.c32e	18		clc				clc
.c32f	60		rts				rts
.c330					_1:
.c330	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c332	d0 05		bne $c339			bne 	_1
.c334	20 7c c3	jsr $c37c			jsr 	OHMControl
.c337	18		clc				clc
.c338	60		rts				rts
.c339					_1:
.c339	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c33b	d0 05		bne $c342			bne 	_1
.c33d	20 7d c3	jsr $c37d			jsr 	OHMHitWall
.c340	18		clc				clc
.c341	60		rts				rts
.c342					_1:
.c342	38		sec				sec
.c343	60		rts				rts
.c344					OHMInitHandler:
.c344	a9 01		lda #$01			lda 	#1
.c346	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c349	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c34c	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c34f	ad d8 e0	lda $e0d8			lda 	OBYPos
.c352	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c355	ad 1c c3	lda $c31c			lda 	OHPLastDirection 			; copy direction
.c358	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c35b	60		rts				rts
.c35c					OHMRepaintHandler:
.c35c	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c35f	b9 6c c3	lda $c36c,y			lda 	OHMGraphic,y 				; set graphic.
.c362	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c365	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c368	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c36b	60		rts				rts
.c36c					OHMGraphic:
>c36c	00 16 16 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c370	17 19 18 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c374	17 18 19 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c378	00 00 00 00					.byte 	0,0,0,0
.c37c					OHMControl:
.c37c	60		rts				rts
.c37d					OHMHitWall:
.c37d	20 52 c1	jsr $c152			jsr 	KillObject
.c380	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c381					OHHuman1:
.c381	c9 01		cmp #$01			cmp 	#MSG_INIT
.c383	d0 05		bne $c38a			bne 	_1
.c385	20 ad c3	jsr $c3ad			jsr 	OHHInitHandler1
.c388	18		clc				clc
.c389	60		rts				rts
.c38a					_1:
.c38a	38		sec				sec
.c38b	60		rts				rts
.c38c					OHHuman2:
.c38c	c9 01		cmp #$01			cmp 	#MSG_INIT
.c38e	d0 05		bne $c395			bne 	_1
.c390	20 b4 c3	jsr $c3b4			jsr 	OHHInitHandler2
.c393	18		clc				clc
.c394	60		rts				rts
.c395					_1:
.c395	38		sec				sec
.c396	60		rts				rts
.c397					OHHuman3:
.c397	c9 01		cmp #$01			cmp 	#MSG_INIT
.c399	d0 05		bne $c3a0			bne 	_1
.c39b	20 bb c3	jsr $c3bb			jsr 	OHHInitHandler3
.c39e	18		clc				clc
.c39f	60		rts				rts
.c3a0					_1:
.c3a0	38		sec				sec
.c3a1	60		rts				rts
.c3a2					OHHInitHandlerMain:
.c3a2	a9 1e		lda #$1e			lda 	#30
.c3a4	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3a7	a9 0f		lda #$0f			lda 	#15
.c3a9	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3ac	60		rts				rts
.c3ad					OHHInitHandler1:
.c3ad	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c3af	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c3b2	80 ee		bra $c3a2			bra 	OHHInitHandlerMain
.c3b4					OHHInitHandler2:
.c3b4	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c3b6	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c3b9	80 e7		bra $c3a2			bra 	OHHInitHandlerMain
.c3bb					OHHInitHandler3:
.c3bb	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c3bd	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c3c0	80 e0		bra $c3a2			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c3c2					OHGrunt:
.c3c2	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3c4	d0 05		bne $c3cb			bne 	_1
.c3c6	20 d6 c3	jsr $c3d6			jsr 	OHGInitHandler
.c3c9	18		clc				clc
.c3ca	60		rts				rts
.c3cb					_1:
.c3cb	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3cd	d0 05		bne $c3d4			bne 	_1
.c3cf	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c3d2	18		clc				clc
.c3d3	60		rts				rts
.c3d4					_1:
.c3d4	38		sec				sec
.c3d5	60		rts				rts
.c3d6					OHGInitHandler:
.c3d6	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c3d8	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c3db	a9 20		lda #$20			lda 	#32
.c3dd	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3e0	a9 01		lda #$01			lda 	#1
.c3e2	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c3e5	a9 00		lda #$00			lda 	#($100 & 255)
.c3e7	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c3ea	a9 01		lda #$01			lda 	#($100 >> 8)
.c3ec	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c3ef	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c3f0					OHHulk:
.c3f0	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3f2	d0 05		bne $c3f9			bne 	_1
.c3f4	20 04 c4	jsr $c404			jsr 	OHHUInitHandler
.c3f7	18		clc				clc
.c3f8	60		rts				rts
.c3f9					_1:
.c3f9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3fb	d0 05		bne $c402			bne 	_1
.c3fd	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c400	18		clc				clc
.c401	60		rts				rts
.c402					_1:
.c402	38		sec				sec
.c403	60		rts				rts
.c404					OHHUInitHandler:
.c404	a9 0a		lda #$0a			lda 	#GR_HULK
.c406	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c409	a9 40		lda #$40			lda 	#64
.c40b	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c40e	a9 01		lda #$01			lda 	#1
.c410	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c413	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c414					OHSphere:
.c414	c9 01		cmp #$01			cmp 	#MSG_INIT
.c416	d0 05		bne $c41d			bne 	_1
.c418	20 3a c4	jsr $c43a			jsr 	OHSInitHandler
.c41b	18		clc				clc
.c41c	60		rts				rts
.c41d					_1:
.c41d	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c41f	d0 05		bne $c426			bne 	_1
.c421	20 5c c4	jsr $c45c			jsr 	OHSControl
.c424	18		clc				clc
.c425	60		rts				rts
.c426					_1:
.c426	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c428	d0 05		bne $c42f			bne 	_1
.c42a	20 69 c4	jsr $c469			jsr 	OHSCheckFire
.c42d	18		clc				clc
.c42e	60		rts				rts
.c42f					_1:
.c42f	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c431	d0 05		bne $c438			bne 	_1
.c433	20 7d c4	jsr $c47d			jsr 	OHSRepaint
.c436	18		clc				clc
.c437	60		rts				rts
.c438					_1:
.c438	38		sec				sec
.c439	60		rts				rts
.c43a					OHSInitHandler:
.c43a	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c43c	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c43f	a9 08		lda #$08			lda 	#8
.c441	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c444	a9 28		lda #$28			lda 	#40
.c446	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c449	a9 00		lda #$00			lda 	#($1000 & 255)
.c44b	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c44e	a9 10		lda #$10			lda 	#($1000 >> 8)
.c450	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c453	20 15 c2	jsr $c215			jsr 	Random8Bit
.c456	29 3f		and #$3f			and 	#63
.c458	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c45b	60		rts				rts
.c45c					OHSControl:
.c45c	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c45f	d0 04		bne $c465			bne 	_OHSNoMove
.c461	20 c6 c1	jsr $c1c6			jsr		ChooseRandomDirection
.c464	60		rts				rts
.c465					_OHSNoMove:
.c465	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c468	60		rts				rts
.c469					OHSCheckFire:
.c469	20 15 c2	jsr $c215			jsr 	Random8Bit
.c46c	29 1f		and #$1f			and 	#31
.c46e	d0 0c		bne $c47c			bne 	_OHSCFExit
.c470	a9 08		lda #$08			lda 	#TP_ENFORCER
.c472	20 46 c2	jsr $c246			jsr 	CreateSingleObject
.c475	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c478	20 4e c2	jsr $c24e			jsr 	CopyStartPosition
.c47b	60		rts				rts
.c47c					_OHSCFExit:
.c47c	60		rts				rts
.c47d					OHSRepaint:
.c47d	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c480	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c483	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c486	4a		lsr a				lsr 	a
.c487	2e 09 ff	rol $ff09			rol 	APIParams+5
.c48a	60		rts				rts
.c48b					OHEnforcer:
.c48b	c9 01		cmp #$01			cmp 	#MSG_INIT
.c48d	d0 05		bne $c494			bne 	_1
.c48f	20 a8 c4	jsr $c4a8			jsr 	OHENInitHandler
.c492	18		clc				clc
.c493	60		rts				rts
.c494					_1:
.c494	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c496	d0 05		bne $c49d			bne 	_1
.c498	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c49b	18		clc				clc
.c49c	60		rts				rts
.c49d					_1:
.c49d	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c49f	d0 05		bne $c4a6			bne 	_1
.c4a1	20 c5 c4	jsr $c4c5			jsr 	OHENCheckFire
.c4a4	18		clc				clc
.c4a5	60		rts				rts
.c4a6					_1:
.c4a6	38		sec				sec
.c4a7	60		rts				rts
.c4a8					OHENInitHandler:
.c4a8	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c4aa	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c4ad	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c4b0	a9 0f		lda #$0f			lda 	#15
.c4b2	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c4b5	a9 1e		lda #$1e			lda 	#30
.c4b7	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c4ba	a9 50		lda #$50			lda 	#($150 & 255)
.c4bc	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c4bf	a9 01		lda #$01			lda 	#($150 >> 8)
.c4c1	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c4c4	60		rts				rts
.c4c5					OHENCheckFire:
.c4c5	20 15 c2	jsr $c215			jsr 	Random8Bit
.c4c8	29 1f		and #$1f			and 	#31
.c4ca	d0 0f		bne $c4db			bne 	_OHENCFExit
.c4cc	a9 07		lda #$07			lda 	#TP_ESPARK
.c4ce	20 46 c2	jsr $c246			jsr 	CreateSingleObject
.c4d1	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c4d4	20 4e c2	jsr $c24e			jsr 	CopyStartPosition
.c4d7	20 5b c2	jsr $c25b			jsr 	ChasePlayerY
.c4da	60		rts				rts
.c4db					_OHENCFExit:
.c4db	60		rts				rts
.c4dc					OHESpark:
.c4dc	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4de	d0 05		bne $c4e5			bne 	_1
.c4e0	20 f9 c4	jsr $c4f9			jsr 	OHESInitHandler
.c4e3	18		clc				clc
.c4e4	60		rts				rts
.c4e5					_1:
.c4e5	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c4e7	d0 05		bne $c4ee			bne 	_1
.c4e9	20 52 c1	jsr $c152			jsr 	KillObject
.c4ec	18		clc				clc
.c4ed	60		rts				rts
.c4ee					_1:
.c4ee	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c4f0	d0 05		bne $c4f7			bne 	_1
.c4f2	20 e0 c1	jsr $c1e0			jsr 	NoControlEffect
.c4f5	18		clc				clc
.c4f6	60		rts				rts
.c4f7					_1:
.c4f7	38		sec				sec
.c4f8	60		rts				rts
.c4f9					OHESInitHandler:
.c4f9	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c4fc	a9 1f		lda #$1f			lda 	#GR1_MISSILE2
.c4fe	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c501	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c504	a9 07		lda #$07			lda 	#7
.c506	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c509	a9 ff		lda #$ff			lda 	#255
.c50b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c50e	a9 25		lda #$25			lda 	#($25 & 255)
.c510	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c513	a9 00		lda #$00			lda 	#($25 >> 8)
.c515	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c518	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c519					OHQuark:
.c519	c9 01		cmp #$01			cmp 	#MSG_INIT
.c51b	d0 05		bne $c522			bne 	_1
.c51d	20 2d c5	jsr $c52d			jsr 	OHQInitHandler
.c520	18		clc				clc
.c521	60		rts				rts
.c522					_1:
.c522	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c524	d0 05		bne $c52b			bne 	_1
.c526	20 52 c5	jsr $c552			jsr 	OHQCheckFire
.c529	18		clc				clc
.c52a	60		rts				rts
.c52b					_1:
.c52b	38		sec				sec
.c52c	60		rts				rts
.c52d					OHQInitHandler:
.c52d	a9 11		lda #$11			lda 	#GR1_QUARK
.c52f	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c532	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c535	a9 0a		lda #$0a			lda 	#10
.c537	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c53a	a9 1e		lda #$1e			lda 	#30
.c53c	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c53f	a9 00		lda #$00			lda 	#($1000 & 255)
.c541	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c544	a9 10		lda #$10			lda 	#($1000 >> 8)
.c546	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c549	20 15 c2	jsr $c215			jsr 	Random8Bit
.c54c	29 3f		and #$3f			and 	#63
.c54e	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c551	60		rts				rts
.c552					OHQCheckFire:
.c552	20 15 c2	jsr $c215			jsr 	Random8Bit
.c555	29 1f		and #$1f			and 	#31
.c557	d0 0c		bne $c565			bne 	_OHQCFExit
.c559	a9 0b		lda #$0b			lda 	#TP_TANK
.c55b	20 46 c2	jsr $c246			jsr 	CreateSingleObject
.c55e	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c561	20 4e c2	jsr $c24e			jsr 	CopyStartPosition
.c564	60		rts				rts
.c565					_OHQCFExit:
.c565	60		rts				rts
.c566					OHTank:
.c566	c9 01		cmp #$01			cmp 	#MSG_INIT
.c568	d0 05		bne $c56f			bne 	_1
.c56a	20 7a c5	jsr $c57a			jsr 	OHTNInitHandler
.c56d	18		clc				clc
.c56e	60		rts				rts
.c56f					_1:
.c56f	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c571	d0 05		bne $c578			bne 	_1
.c573	20 94 c5	jsr $c594			jsr 	OHTNCheckFire
.c576	18		clc				clc
.c577	60		rts				rts
.c578					_1:
.c578	38		sec				sec
.c579	60		rts				rts
.c57a					OHTNInitHandler:
.c57a	a9 12		lda #$12			lda 	#GR_TANK
.c57c	20 3e c2	jsr $c23e			jsr 	SetObjectGraphic
.c57f	a9 0f		lda #$0f			lda 	#15
.c581	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c584	a9 1e		lda #$1e			lda 	#30
.c586	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c589	a9 00		lda #$00			lda 	#($200 & 255)
.c58b	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c58e	a9 02		lda #$02			lda 	#($200 >> 8)
.c590	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c593	60		rts				rts
.c594					OHTNCheckFire:
.c594	20 15 c2	jsr $c215			jsr 	Random8Bit
.c597	29 1f		and #$1f			and 	#31
.c599	d0 0f		bne $c5aa			bne 	_OHTNCFExit
.c59b	a9 0a		lda #$0a			lda 	#TP_SHELL
.c59d	20 46 c2	jsr $c246			jsr 	CreateSingleObject
.c5a0	ac c0 c0	ldy $c0c0			ldy 	NewObject
.c5a3	20 4e c2	jsr $c24e			jsr 	CopyStartPosition
.c5a6	20 5b c2	jsr $c25b			jsr 	ChasePlayerY
.c5a9	60		rts				rts
.c5aa					_OHTNCFExit:
.c5aa	60		rts				rts
.c5ab					OHShell:
.c5ab	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5ad	d0 05		bne $c5b4			bne 	_1
.c5af	20 da c5	jsr $c5da			jsr 	OHSHInitHandler
.c5b2	18		clc				clc
.c5b3	60		rts				rts
.c5b4					_1:
.c5b4	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c5b6	d0 05		bne $c5bd			bne 	_1
.c5b8	20 ff c5	jsr $c5ff			jsr 	OHSHHitWall
.c5bb	18		clc				clc
.c5bc	60		rts				rts
.c5bd					_1:
.c5bd	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c5bf	d0 05		bne $c5c6			bne 	_1
.c5c1	20 e0 c1	jsr $c1e0			jsr 	NoControlEffect
.c5c4	18		clc				clc
.c5c5	60		rts				rts
.c5c6					_1:
.c5c6	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c5c8	d0 05		bne $c5cf			bne 	_1
.c5ca	20 d1 c5	jsr $c5d1			jsr 	OHSHCheckLife
.c5cd	18		clc				clc
.c5ce	60		rts				rts
.c5cf					_1:
.c5cf	38		sec				sec
.c5d0	60		rts				rts
.c5d1					OHSHCheckLife:
.c5d1	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c5d4	d0 03		bne $c5d9			bne 	_OHSHCLExit
.c5d6	20 52 c1	jsr $c152			jsr 	KillObject
.c5d9					_OHSHCLExit:
.c5d9	60		rts				rts
.c5da					OHSHInitHandler:
.c5da	20 0d c2	jsr $c20d			jsr 	ChasePlayer
.c5dd	a9 1f		lda #$1f			lda 	#GR1_MISSILE2
.c5df	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c5e2	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c5e5	a9 05		lda #$05			lda 	#5
.c5e7	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c5ea	a9 ff		lda #$ff			lda 	#255
.c5ec	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c5ef	a9 50		lda #$50			lda 	#($50 & 255)
.c5f1	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c5f4	a9 00		lda #$00			lda 	#($50 >> 8)
.c5f6	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c5f9	a9 c8		lda #$c8			lda 	#200
.c5fb	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c5fe	60		rts				rts
.c5ff					OHSHHitWall:
.c5ff	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c602	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c604	90 04		bcc $c60a			bcc 	_OHSH1
.c606	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c608	90 08		bcc $c612			bcc 	_OHSHCheckVertical
.c60a					_OHSH1:
.c60a	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c60d	49 03		eor #$03			eor 	#3
.c60f	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c612					_OHSHCheckVertical:
.c612	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c615	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c617	90 04		bcc $c61d			bcc 	_OHSH2
.c619	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c61b	90 08		bcc $c625			bcc 	_OHSHExit
.c61d					_OHSH2:
.c61d	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c620	49 0c		eor #$0c			eor 	#12
.c622	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c625					_OHSHExit:
.c625	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c626					OHElectrode:
.c626	c9 01		cmp #$01			cmp 	#MSG_INIT
.c628	d0 05		bne $c62f			bne 	_1
.c62a	20 3a c6	jsr $c63a			jsr 	OHELInitHandler
.c62d	18		clc				clc
.c62e	60		rts				rts
.c62f					_1:
.c62f	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c631	d0 05		bne $c638			bne 	_1
.c633	20 56 c6	jsr $c656			jsr 	OHELFreeze
.c636	18		clc				clc
.c637	60		rts				rts
.c638					_1:
.c638	38		sec				sec
.c639	60		rts				rts
.c63a					OHELInitHandler:
.c63a	a9 1a		lda #$1a			lda 	#GR4_ELECTRODES
.c63c	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c63f	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c642	a9 00		lda #$00			lda 	#0
.c644	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c647	a9 00		lda #$00			lda 	#0
.c649	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c64c	a9 00		lda #$00			lda 	#($0 & 255)
.c64e	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c651	a9 00		lda #$00			lda 	#($0 >> 8)
.c653	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c656					OHELFreeze:
.c656	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c659	60		rts				rts

;******  Return to file: main.asm

.c65a					HandlerTable:
>c65a	7d c2						.word 		OHPlayer 				; type 0, player object
>c65c	1e c3						.word 		OHMissile 				; type 1, player missile object
>c65e	81 c3						.word 		OHHuman1 				; type 2-4 humans
>c660	8c c3						.word 		OHHuman2
>c662	97 c3						.word 		OHHuman3
>c664	c2 c3						.word 		OHGrunt 				; type 5 grunt
>c666	f0 c3						.word 		OHHulk 					; type 6 hulk
>c668	dc c4						.word 		OHESpark 				; type 7 Enforcer Sparks.
>c66a	8b c4						.word 		OHEnforcer 				; type 8 Enforcer
>c66c	14 c4						.word 		OHSphere 				; type 9 Sphere
>c66e	ab c5						.word 		OHShell 				; type 10 shell
>c670	66 c5						.word 		OHTank 					; type 11 tank
>c672	19 c5						.word 		OHQuark 				; type 12 quark
>c674	26 c6						.word 		OHElectrode 			; type 13 electrode

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
