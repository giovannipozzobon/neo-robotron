
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Wed Apr 24 13:43:46 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_GRUNT = 2
=3					TP_ELECTRODE = 3
=4					TP_MUM = 4
=5					TP_DAD = 5
=6					TP_CHILD = 6
=7					TP_HULK = 7
=8					TP_BRAIN = 8
=9					TP_SPHERE = 9
=10					TP_QUARK = 10
=11					TP_PROG = 11
=12					TP_ESPARK = 12
=13					TP_ENFORCER = 13
=14					TP_SHELL = 14
=15					TP_TANK = 15
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=7					OBH_RANDOM_MASK = 7 						; reduce random to mask
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=4					PF_LEFT = 4
=156					PF_RIGHT = 156
=4					PF_TOP = 4
=108					PF_BOTTOM = 108
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_ENFORCER= 16  							; Enforcer graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR1_PROG = 22 								; Prog (mutated human)
=23					GR1_HORIZFIRE = 23  						; Horizontal fire
=24					GR1_VERTFIRE = 24  							; Vertical fire
=25					GR1_SWNEFIRE = 25   						; / fire
=26					GR1_NWSEFIRE = 26  							; \ fire
=27					GR4_ELECTRODES = 27  						; Set of 3 electrode graphics
=31					GR1_MISSILE1 = 31  							; Robotron missiles
=32					GR1_MISSILE2 = 32
=63					GR_HIDE = 63 								; stops drawing
=108					OBJ_COUNT = 108 							; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink
=$04					MSG_HITWALL = $04 							; Hit wall.
=$05					MSG_ONMOVE = $05 							; On movement.

;******  Return to file: main.asm

.c000	4c 91 c1	jmp $c191			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 0f c0	jmp $c00f			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c 70 c8	jmp $c870			jmp 	MainLoop 					; $C006 main loop code.
.c009	4c fe c2	jmp $c2fe			jmp 	ResetScore 					; $C009 reset the score.
.c00c	4c d2 c2	jmp $c2d2			jmp 	SetWave 					; $C00C New Wave A

;******  Processing file: create.asm

.c00f					CreateObjects:
.c00f	e0 00		cpx #$00			cpx 	#0
.c011	f0 0a		beq $c01d			beq 	_COExit
.c013	da		phx				phx
.c014	48		pha				pha
.c015	20 1e c0	jsr $c01e			jsr 	CreateObject
.c018	68		pla				pla
.c019	fa		plx				plx
.c01a	ca		dex				dex
.c01b	d0 f2		bne $c00f			bne 	CreateObjects
.c01d					_COExit:
.c01d	60		rts				rts
.c01e					CreateObject:
.c01e	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c020	a0 01		ldy #$01			ldy 	#1
.c022	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c024	f0 18		beq $c03e			beq 	_COLoop
.c026	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c028	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c02a	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c02c	f0 10		beq $c03e			beq 	_COLoop
.c02e	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c030	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c032	c9 07		cmp #$07			cmp 	#TP_CHILD+1
.c034	b0 04		bcs $c03a			bcs 	_CONotHuman
.c036	c9 04		cmp #$04			cmp 	#TP_MUM
.c038	b0 04		bcs $c03e			bcs 	_COLoop
.c03a					_CONotHuman:
.c03a	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c03c	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c03e					_COLoop:
.c03e	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c041	30 05		bmi $c048			bmi 	_COFound
.c043	e8		inx				inx
.c044	88		dey				dey
.c045	d0 f7		bne $c03e			bne 	_COLoop
.c047	60		rts				rts  								; cannot create, exit.
.c048					_COFound:
.c048	8e cd c0	stx $c0cd			stx 	NewObject 					; remember the new object
.c04b	9e e8 e5	stz $e5e8,x			stz 	OBObjectData1,x 			; zero object OBObjectData1
.c04e	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c051	0a		asl a				asl 	a 							; double -> Y
.c052	a8		tay				tay
.c053	b9 7e c8	lda $c87e,y			lda 	HandlerTable,y  			; put the handler address in.
.c056	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c059	b9 7f c8	lda $c87f,y			lda 	HandlerTable+1,y
.c05c	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c05f					_COPos1:
.c05f	20 61 c2	jsr $c261			jsr 	Random8Bit  				; value is 0-151
.c062	c9 98		cmp #$98			cmp 	#PF_RIGHT-PF_LEFT
.c064	b0 f9		bcs $c05f			bcs 	_COPos1
.c066	69 04		adc #$04			adc 	#PF_LEFT
.c068	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c06b					_COPos2:
.c06b	20 61 c2	jsr $c261			jsr 	Random8Bit 					; value is 0-103
.c06e	29 7f		and #$7f			and 	#$7F
.c070	c9 68		cmp #$68			cmp 	#PF_BOTTOM-PF_TOP
.c072	b0 f7		bcs $c06b			bcs 	_COPos2
.c074	69 04		adc #$04			adc 	#PF_TOP
.c076	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c079	38		sec				sec   								; check Y centre offset
.c07a	e9 34		sbc #$34			sbc 	#52
.c07c	20 c5 c0	jsr $c0c5			jsr 	_COAbsolute
.c07f	c9 27		cmp #$27			cmp 	#39
.c081	b0 0d		bcs $c090			bcs 	_COIsOkay
.c083	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c086	38		sec				sec
.c087	e9 4b		sbc #$4b			sbc 	#75
.c089	20 c5 c0	jsr $c0c5			jsr 	_COAbsolute
.c08c	c9 37		cmp #$37			cmp 	#55
.c08e	90 cf		bcc $c05f			bcc 	_COPos1
.c090					_COIsOkay:
.c090	a9 3f		lda #$3f			lda 	#GR_HIDE 					; not visible
.c092	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c095	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c098	a9 ff		lda #$ff			lda 	#$FF
.c09a	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x 				; set default score, not shootable.
.c09d	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c0a0	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c0a1	29 07		and #$07			and 	#7
.c0a3	1a		inc a				inc 	a
.c0a4	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c0a7	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0aa	a9 01		lda #$01			lda 	#1
.c0ac	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c0af	a9 0a		lda #$0a			lda 	#10
.c0b1	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c0b4	20 12 c2	jsr $c212			jsr 	ChooseRandomDirection
.c0b7	a9 01		lda #$01			lda 	#MSG_INIT
.c0b9	20 79 c2	jsr $c279			jsr 	SendObjectMessage
.c0bc	90 03		bcc $c0c1			bcc 	_1
.c0be	20 b5 c3	jsr $c3b5			jsr 	DefaultHandler
.c0c1					_1:
.c0c1	20 b6 c1	jsr $c1b6			jsr 	RedrawObject
.c0c4	60		rts				rts
.c0c5					_COAbsolute:
.c0c5	c9 00		cmp #$00			cmp 	#0
.c0c7	10 03		bpl $c0cc			bpl 	_COAExit
.c0c9	49 ff		eor #$ff			eor 	#$FF
.c0cb	1a		inc a				inc 	a
.c0cc					_COAExit:
.c0cc	60		rts				rts
.c0cd					NewObject:
>c0cd	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0ce					MoveObjects:
.c0ce	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0d0					_MOLoop:
.c0d0	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0d3	30 03		bmi $c0d8			bmi 	_MONoObject
.c0d5	20 de c0	jsr $c0de			jsr 	_MoveOneObject
.c0d8					_MONoObject:
.c0d8	e8		inx				inx
.c0d9	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0db	d0 f3		bne $c0d0			bne 	_MOLoop
.c0dd	60		rts				rts  								; cannot create, exit.
.c0de					_MoveOneObject:
.c0de	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0e1	d0 5f		bne $c142			bne 	_MONotMove
.c0e3	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0e6	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0e9	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0ec	d0 10		bne $c0fe			bne 	_MONoProcess
.c0ee	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0f1	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0f4	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0f6	20 79 c2	jsr $c279			jsr 	SendObjectMessage
.c0f9	90 03		bcc $c0fe			bcc 	_1
.c0fb	20 b5 c3	jsr $c3b5			jsr 	DefaultHandler
.c0fe					_1:
.c0fe					_MONoProcess:
.c0fe	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c101	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c104	4a		lsr a				lsr 	a
.c105	90 01		bcc $c108			bcc 	_MONotLeft
.c107	88		dey				dey
.c108					_MONotLeft:
.c108	4a		lsr a				lsr 	a
.c109	90 01		bcc $c10c			bcc 	_MONotRight
.c10b	c8		iny				iny
.c10c					_MONotRight:
.c10c	5a		phy				phy 								; new Y position on stack
.c10d	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c110	4a		lsr a				lsr 	a
.c111	90 01		bcc $c114			bcc 	_MONotUp
.c113	88		dey				dey
.c114					_MONotUp:
.c114	4a		lsr a				lsr 	a
.c115	90 01		bcc $c118			bcc 	_MONotDown
.c117	c8		iny				iny
.c118					_MONotDown:
.c118	68		pla				pla 								; (A,Y) are new coordinates.
.c119	c9 04		cmp #$04			cmp 	#PF_LEFT					; check out of bounds.
.c11b	90 26		bcc $c143			bcc 	_MOHitWall
.c11d	c9 9c		cmp #$9c			cmp 	#PF_RIGHT
.c11f	b0 22		bcs $c143			bcs 	_MOHitWall
.c121	c0 04		cpy #$04			cpy 	#PF_TOP
.c123	90 1e		bcc $c143			bcc 	_MOHitWall
.c125	c0 6c		cpy #$6c			cpy 	#PF_BOTTOM
.c127	b0 1a		bcs $c143			bcs 	_MOHitWall
.c129	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c12c	98		tya				tya
.c12d	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c130	a9 05		lda #$05			lda 	#MSG_ONMOVE
.c132	20 79 c2	jsr $c279			jsr 	SendObjectMessage
.c135	90 03		bcc $c13a			bcc 	_1
.c137	20 b5 c3	jsr $c3b5			jsr 	DefaultHandler
.c13a					_1:
.c13a	3c 00 e0	bit $e000,x			bit 	OBFlags,x 					; killed.
.c13d	30 03		bmi $c142			bmi 	_MONotMove
.c13f	20 b6 c1	jsr $c1b6			jsr 	RedrawObject 				; repaint.
.c142					_MONotMove:
.c142	60		rts				rts
.c143					_MOHitWall:
.c143	a9 04		lda #$04			lda 	#MSG_HITWALL
.c145	20 79 c2	jsr $c279			jsr 	SendObjectMessage
.c148	90 03		bcc $c14d			bcc 	_1
.c14a	20 b5 c3	jsr $c3b5			jsr 	DefaultHandler
.c14d					_1:
.c14d	60		rts				rts
.c14e					ClockDelay:
.c14e	da		phx				phx
.c14f	5a		phy				phy
.c150	ae 5c c1	ldx $c15c			ldx 	MoveSpeed
.c153					_MLDelay:
.c153	88		dey				dey
.c154	d0 fd		bne $c153			bne 	_MLDelay
.c156	ca		dex				dex
.c157	d0 fa		bne $c153			bne 	_MLDelay
.c159	7a		ply				ply
.c15a	fa		plx				plx
.c15b	60		rts				rts
.c15c					MoveSpeed:
>c15c	28						.byte 	40

;******  Return to file: main.asm


;******  Processing file: palette.asm

.c15d					AnimatePalette:
.c15d	ad 00 ff	lda $ff00			lda 	APICommand
.c160	d0 fb		bne $c15d			bne 	AnimatePalette
.c162	ee 90 c1	inc $c190			inc 	_APCount
.c165	ad 90 c1	lda $c190			lda 	_APCount
.c168	4a		lsr a				lsr 	a
.c169	a0 01		ldy #$01			ldy 	#1
.c16b	20 84 c1	jsr $c184			jsr 	_APBit
.c16e	20 84 c1	jsr $c184			jsr 	_APBit
.c171	20 84 c1	jsr $c184			jsr 	_APBit
.c174	a9 e0		lda #$e0			lda 	#14*16
.c176	8d 04 ff	sta $ff04			sta 	APIParams
.c179	a9 20		lda #$20			lda 	#32
.c17b	8d 01 ff	sta $ff01			sta 	APIFunction
.c17e	a9 05		lda #$05			lda 	#5
.c180	8d 00 ff	sta $ff00			sta 	APICommand
.c183	60		rts				rts
.c184					_APBit:
.c184	4a		lsr a				lsr 	a
.c185	48		pha				pha
.c186	a9 00		lda #$00			lda 	#0
.c188	e9 00		sbc #$00			sbc 	#0
.c18a	99 04 ff	sta $ff04,y			sta 	APIParams,y
.c18d	c8		iny				iny
.c18e	68		pla				pla
.c18f	60		rts				rts
.c190					_APCount:
>c190	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c191					ResetObjects:
.c191	a2 00		ldx #$00			ldx 	#0
.c193					_RSLoop:
.c193	a9 ff		lda #$ff			lda 	#$FF
.c195	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c198	e8		inx				inx
.c199	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c19b	d0 f6		bne $c193			bne 	_RSLoop
.c19d	60		rts				rts
.c19e					KillObject:
.c19e	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1a1	d0 fb		bne $c19e			bne 	KillObject
.c1a3	a9 ff		lda #$ff			lda 	#$FF 						; mark not in use
.c1a5	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c1a8	8e 04 ff	stx $ff04			stx 	APIParams					; sprite ID
.c1ab	a9 03		lda #$03			lda 	#3  						; and hide it.
.c1ad	8d 01 ff	sta $ff01			sta 	APIFunction
.c1b0	a9 06		lda #$06			lda 	#6
.c1b2	8d 00 ff	sta $ff00			sta 	APICommand
.c1b5	60		rts				rts
.c1b6					RedrawObject:
.c1b6	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c1b9	d0 fb		bne $c1b6			bne 	RedrawObject
.c1bb	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c1be	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c1c1	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c1c4	0a		asl a				asl 	a
.c1c5	8d 05 ff	sta $ff05			sta 	APIParams+1
.c1c8	2e 06 ff	rol $ff06			rol 	APIParams+2
.c1cb	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c1ce	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c1d1	0a		asl a				asl 	a
.c1d2	69 08		adc #$08			adc 	#8 							; allow for top area
.c1d4	8d 07 ff	sta $ff07			sta 	APIParams+3
.c1d7	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; use Y to animate
.c1da	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; get direction.
.c1dd	29 0f		and #$0f			and 	#15 						; if 0 do not animate at all.
.c1df	f0 0e		beq $c1ef			beq 	_ROUseSprite2
.c1e1	29 03		and #$03			and 	#3  						; if a L/R component use X Pos
.c1e3	d0 03		bne $c1e8			bne 	_ROHasHorizonMovement
.c1e5	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; otherwise use Y Pos
.c1e8					_ROHasHorizonMovement:
.c1e8	98		tya				tya 								; put bit 1 into carry.
.c1e9	4a		lsr a				lsr 	a
.c1ea	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic according to carry.
.c1ed	90 03		bcc $c1f2			bcc 	_ROUseSprite
.c1ef					_ROUseSprite2:
.c1ef	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c1f2					_ROUseSprite:
.c1f2	8d 09 ff	sta $ff09			sta 	APIParams+5
.c1f5	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c1f8	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c1fa	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c1fd					_RONotLeft:
.c1fd	a9 02		lda #$02			lda 	#MSG_REPAINT
.c1ff	20 79 c2	jsr $c279			jsr 	SendObjectMessage
.c202	90 03		bcc $c207			bcc 	_1
.c204	20 b5 c3	jsr $c3b5			jsr 	DefaultHandler
.c207					_1:
.c207	a9 02		lda #$02			lda 	#2  						; and draw it.
.c209	8d 01 ff	sta $ff01			sta 	APIFunction
.c20c	a9 06		lda #$06			lda 	#6
.c20e	8d 00 ff	sta $ff00			sta 	APICommand
.c211	60		rts				rts
.c212					ChooseRandomDirection:
.c212	20 61 c2	jsr $c261			jsr 	Random8Bit 					; get valid random direction
.c215	29 0f		and #$0f			and 	#15
.c217	f0 f9		beq $c212			beq 	ChooseRandomDirection 		; stationary (0)
.c219	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c21c	29 03		and #$03			and 	#3 							; check LR not both on.
.c21e	c9 03		cmp #$03			cmp 	#3
.c220	f0 f0		beq $c212			beq 	ChooseRandomDirection
.c222	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c225	29 0c		and #$0c			and 	#12
.c227	c9 0c		cmp #$0c			cmp 	#12
.c229	f0 e7		beq $c212			beq 	ChooseRandomDirection
.c22b	60		rts				rts
.c22c					NoControlEffect:
.c22c	60		rts				rts
.c22d					ChaseObject:
.c22d	b9 6c e0	lda $e06c,y			lda 	OBXPos,y
.c230	dd 6c e0	cmp $e06c,x			cmp 	OBXPos,x
.c233	20 4c c2	jsr $c24c			jsr 	_ChaseCalculate
.c236	8d 4b c2	sta $c24b			sta 	_ChaseTemp
.c239	b9 d8 e0	lda $e0d8,y			lda 	OBYPos,y
.c23c	dd d8 e0	cmp $e0d8,x			cmp 	OBYPos,x
.c23f	20 4c c2	jsr $c24c			jsr 	_ChaseCalculate
.c242	0a		asl a				asl 	a
.c243	0a		asl a				asl 	a
.c244	0d 4b c2	ora $c24b			ora 	_ChaseTemp
.c247	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c24a	60		rts				rts
.c24b					_ChaseTemp:
>c24b	00						.byte 	0
.c24c					_ChaseCalculate:
.c24c	f0 08		beq $c256			beq 	_CCNoMove
.c24e	90 03		bcc $c253			bcc 	_CCMoveRight
.c250	a9 02		lda #$02			lda 	#2
.c252	60		rts				rts
.c253					_CCMoveRight:
.c253	a9 01		lda #$01			lda 	#1
.c255	60		rts				rts
.c256					_CCNoMove:
.c256	a9 00		lda #$00			lda 	#0
.c258	60		rts				rts
.c259					ChasePlayer:
.c259	5a		phy				phy
.c25a	a0 00		ldy #$00			ldy 	#0
.c25c	20 2d c2	jsr $c22d			jsr 	ChaseObject
.c25f	7a		ply				ply
.c260	60		rts				rts
.c261					Random8Bit:
.c261	5a		phy				phy
.c262	a0 08		ldy #$08			ldy 	#8
.c264	ad 77 c2	lda $c277			lda 	_R8SeedValue+0
.c267					_R8RandomLoop
.c267	0a		asl a				asl     a
.c268	2e 78 c2	rol $c278			rol 	_R8SeedValue+1
.c26b	90 02		bcc $c26f			bcc 	_R8NotSet
.c26d	49 39		eor #$39			eor 	#$39
.c26f					_R8NotSet:
.c26f	88		dey				dey
.c270	d0 f5		bne $c267			bne 	_R8RandomLoop
.c272	8d 77 c2	sta $c277			sta 	_R8SeedValue+0
.c275	7a		ply				ply
.c276	60		rts				rts
.c277					_R8SeedValue
>c277	cd ab						.word 	$ABCD
.c279					SendObjectMessage:
.c279	48		pha				pha
.c27a	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c27d	8d 88 c2	sta $c288			sta 	_SMCall+1
.c280	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c283	8d 89 c2	sta $c289			sta 	_SMCall+2
.c286	68		pla				pla
.c287					_SMCall:
.c287	4c 00 00	jmp $0000			jmp 	$0000
.c28a					SetObjectGraphic:
.c28a	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c28d	1a		inc a				inc 	a
.c28e	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c291	60		rts				rts
.c292					CreateSingleObject:
.c292	da		phx				phx 								; create player missile object.
.c293	5a		phy				phy
.c294	20 1e c0	jsr $c01e			jsr 	CreateObject
.c297	7a		ply				ply
.c298	fa		plx				plx
.c299	60		rts				rts
.c29a					CopyStartPosition:
.c29a	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c29d	99 6c e0	sta $e06c,y			sta 	OBXPos,y
.c2a0	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2a3	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c2a6	60		rts				rts
.c2a7					ChasePlayerY:
.c2a7	da		phx				phx
.c2a8	98		tya				tya
.c2a9	aa		tax				tax
.c2aa	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c2ad	fa		plx				plx
.c2ae	60		rts				rts
.c2af					CheckCollision:
.c2af	38		sec				sec
.c2b0	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c2b3	f9 6c e0	sbc $e06c,y			sbc 	OBXPos,y
.c2b6	10 03		bpl $c2bb			bpl 	_1
.c2b8	49 ff		eor #$ff			eor 	#$FF
.c2ba	1a		inc a				inc 	a
.c2bb					_1
.c2bb	c9 04		cmp #$04			cmp 	#4
.c2bd	b0 11		bcs $c2d0			bcs 	_CCFail
.c2bf	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c2c2	f9 d8 e0	sbc $e0d8,y			sbc 	OBYPos,y
.c2c5	10 03		bpl $c2ca			bpl 	_1
.c2c7	49 ff		eor #$ff			eor 	#$FF
.c2c9	1a		inc a				inc 	a
.c2ca					_1
.c2ca	c9 04		cmp #$04			cmp 	#4
.c2cc	b0 02		bcs $c2d0			bcs 	_CCFail
.c2ce	38		sec				sec
.c2cf	60		rts				rts
.c2d0					_CCFail:
.c2d0	18		clc				clc
.c2d1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: score.asm

.c2d2					SetWave:
.c2d2	8d b3 c3	sta $c3b3			sta 	Wave
.c2d5	60		rts				rts
.c2d6					AddYAToScore:
.c2d6	18		clc				clc
.c2d7	f8		sed				sed
.c2d8	6d af c3	adc $c3af			adc 	DScore+0
.c2db	8d af c3	sta $c3af			sta 	DScore+0
.c2de	98		tya				tya
.c2df	6d b0 c3	adc $c3b0			adc 	DScore+1
.c2e2	8d b0 c3	sta $c3b0			sta 	DScore+1
.c2e5	a9 00		lda #$00			lda 	#0
.c2e7	6d b1 c3	adc $c3b1			adc 	DScore+2
.c2ea	8d b1 c3	sta $c3b1			sta 	DScore+2
.c2ed	d8		cld				cld
.c2ee	4a		lsr a				lsr 	a 							; every 20k it's easier. So sue me.
.c2ef	cd b4 c3	cmp $c3b4			cmp 	LastScore20k
.c2f2	8d b4 c3	sta $c3b4			sta 	LastScore20k
.c2f5	f0 03		beq $c2fa			beq 	_NoExtraLife
.c2f7	ee b2 c3	inc $c3b2			inc 	Lives
.c2fa					_NoExtraLife:
.c2fa	20 43 c3	jsr $c343			jsr 	DrawScore
.c2fd	60		rts				rts
.c2fe					ResetScore:
.c2fe	9c af c3	stz $c3af			stz 	DScore+0
.c301	9c b0 c3	stz $c3b0			stz 	DScore+1
.c304	9c b1 c3	stz $c3b1			stz 	DScore+2
.c307	9c b4 c3	stz $c3b4			stz 	LastScore20k
.c30a	a9 03		lda #$03			lda 	#3
.c30c	8d b2 c3	sta $c3b2			sta 	Lives
.c30f	20 43 c3	jsr $c343			jsr 	DrawScore
.c312	a2 18		ldx #$18			ldx 	#24
.c314	a0 1d		ldy #$1d			ldy 	#29
.c316	20 79 c3	jsr $c379			jsr 	MoveCursor
.c319	a9 81		lda #$81			lda 	#$81
.c31b	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c31e	20 37 c3	jsr $c337			jsr 	RSPrintWave
.c321	a9 82		lda #$82			lda 	#$82
.c323	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c326	a9 20		lda #$20			lda 	#32
.c328	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c32b	a2 eb		ldx #$eb			ldx 	#235
.c32d					_RSPrintWave:
.c32d	8a		txa				txa
.c32e	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c331	e8		inx				inx
.c332	e0 ef		cpx #$ef			cpx 	#239
.c334	d0 f7		bne $c32d			bne 	_RSPrintWave
.c336	60		rts				rts
.c337					RSPrintWave:
.c337	ad b3 c3	lda $c3b3			lda 	Wave
.c33a	c9 10		cmp #$10			cmp 	#$10
.c33c	b0 51		bcs $c38f			bcs 	PrintByte
.c33e	80 58		bra $c398			bra 	PrintNibble
.c340	ad b3 c3	lda $c3b3			lda 	Wave
.c343					DrawScore:
.c343	a2 04		ldx #$04			ldx 	#4
.c345	a0 00		ldy #$00			ldy 	#0
.c347	20 79 c3	jsr $c379			jsr 	MoveCursor
.c34a	a9 86		lda #$86			lda 	#$86
.c34c	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c34f	ad b1 c3	lda $c3b1			lda 	DScore+2
.c352	20 8f c3	jsr $c38f			jsr 	PrintByte
.c355	ad b0 c3	lda $c3b0			lda 	DScore+1
.c358	20 8f c3	jsr $c38f			jsr 	PrintByte
.c35b	ad af c3	lda $c3af			lda 	DScore+0
.c35e	20 8f c3	jsr $c38f			jsr 	PrintByte
.c361	a9 20		lda #$20			lda 	#32
.c363	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c366	a9 83		lda #$83			lda		#$83
.c368	ae b2 c3	ldx $c3b2			ldx 	Lives
.c36b	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c36e	ca		dex		_DSLoop:dex
.c36f	f0 07		beq $c378			beq 	_DSExit
.c371	a9 ea		lda #$ea			lda 	#234
.c373	20 9c c3	jsr $c39c			jsr 	PrintCharacter
.c376	80 f6		bra $c36e			bra 	_DSLoop
.c378					_DSExit:
.c378	60		rts				rts
.c379					MoveCursor:
.c379	ad 00 ff	lda $ff00			lda 	APICommand
.c37c	d0 c5		bne $c343			bne 	DrawScore
.c37e	8c 05 ff	sty $ff05			sty 	APIParams+1
.c381	8e 04 ff	stx $ff04			stx 	APIParams+0
.c384	a9 07		lda #$07			lda 	#7
.c386	8d 01 ff	sta $ff01			sta 	APIFunction
.c389	a9 02		lda #$02			lda 	#2
.c38b	8d 00 ff	sta $ff00			sta 	APICommand
.c38e	60		rts				rts
.c38f					PrintByte:
.c38f	48		pha				pha
.c390	4a		lsr a				lsr 	a
.c391	4a		lsr a				lsr 	a
.c392	4a		lsr a				lsr 	a
.c393	4a		lsr a				lsr 	a
.c394	20 98 c3	jsr $c398			jsr 	PrintNibble
.c397	68		pla				pla
.c398					PrintNibble:
.c398	29 0f		and #$0f			and 	#15
.c39a	09 e0		ora #$e0			ora 	#224
.c39c					PrintCharacter:
.c39c	ac 00 ff	ldy $ff00			ldy 	APICommand
.c39f	d0 fb		bne $c39c			bne 	PrintCharacter
.c3a1	8d 04 ff	sta $ff04			sta 	APIParams+0
.c3a4	a9 06		lda #$06			lda 	#6
.c3a6	8d 01 ff	sta $ff01			sta 	APIFunction
.c3a9	a9 02		lda #$02			lda 	#2
.c3ab	8d 00 ff	sta $ff00			sta 	APICommand
.c3ae	60		rts				rts
.c3af					DScore:
>c3af	00 00 00					.byte 	0,0,0
.c3b2					Lives:
>c3b2	03						.byte 	3
.c3b3					Wave:
>c3b3	00						.byte 	0
.c3b4					LastScore20k:
>c3b4	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c3b5					DefaultHandler:
.c3b5	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3b7	d0 05		bne $c3be			bne 	_1
.c3b9	20 c9 c3	jsr $c3c9			jsr 	DefaultControl
.c3bc	18		clc				clc
.c3bd	60		rts				rts
.c3be					_1:
.c3be	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c3c0	d0 05		bne $c3c7			bne 	_1
.c3c2	20 cc c3	jsr $c3cc			jsr 	DefaultHitWall
.c3c5	18		clc				clc
.c3c6	60		rts				rts
.c3c7					_1:
.c3c7	38		sec				sec
.c3c8	60		rts				rts
.c3c9					DefaultControl:
.c3c9	4c 12 c2	jmp $c212			jmp 	ChooseRandomDirection
.c3cc					DefaultHitWall:
.c3cc	4c 12 c2	jmp $c212			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c3cf					OHPlayer:
.c3cf	c9 01		cmp #$01			cmp 	#MSG_INIT
.c3d1	d0 05		bne $c3d8			bne 	_1
.c3d3	20 ec c3	jsr $c3ec			jsr 	OHPInitHandler
.c3d6	18		clc				clc
.c3d7	60		rts				rts
.c3d8					_1:
.c3d8	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c3da	d0 05		bne $c3e1			bne 	_1
.c3dc	20 01 c4	jsr $c401			jsr 	OHPRepaintHandler
.c3df	18		clc				clc
.c3e0	60		rts				rts
.c3e1					_1:
.c3e1	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c3e3	d0 05		bne $c3ea			bne 	_1
.c3e5	20 30 c4	jsr $c430			jsr 	OHPControlHandler
.c3e8	18		clc				clc
.c3e9	60		rts				rts
.c3ea					_1:
.c3ea	38		sec				sec
.c3eb	60		rts				rts
.c3ec					OHPInitHandler:
.c3ec	a9 50		lda #$50			lda 	#160/2
.c3ee	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c3f1	a9 40		lda #$40			lda 	#128/2
.c3f3	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c3f6	a9 02		lda #$02			lda 	#2
.c3f8	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c3fb	a9 01		lda #$01			lda 	#1
.c3fd	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c400	60		rts				rts
.c401					OHPRepaintHandler:
.c401	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x
.c404	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c407	29 03		and #$03			and 	#3
.c409	d0 03		bne $c40e			bne 	_OHPUseVertical
.c40b	bc d8 e0	ldy $e0d8,x			ldy		OBYPos,x
.c40e					_OHPUseVertical:
.c40e	5e 09 ff	lsr $ff09,x			lsr 	APIParams+5,x
.c411	1e 09 ff	asl $ff09,x			asl 	APIParams+5,x
.c414	98		tya				tya
.c415	29 10		and #$10			and 	#16
.c417	f0 03		beq $c41c			beq 	_OHPNoAlternate
.c419	fe 09 ff	inc $ff09,x			inc 	APIParams+5,x
.c41c					_OHPNoAlternate:
.c41c	60		rts				rts
.c41d					OHPSetGraphic:
.c41d	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; is movement purely vertical
.c420	29 03		and #$03			and 	#3
.c422	d0 06		bne $c42a			bne 	_OHPRHorizontal
.c424	a9 02		lda #$02			lda 	#GR_PLAYERV
.c426	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c429	60		rts				rts
.c42a					_OHPRHorizontal:
.c42a	a9 00		lda #$00			lda 	#GR_PLAYERH
.c42c	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c42f	60		rts				rts
.c430					OHPControlHandler:
.c430	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c433	d0 fb		bne $c430			bne 	OHPControlHandler
.c435	a9 01		lda #$01			lda 	#1  						; and draw it.
.c437	8d 01 ff	sta $ff01			sta 	APIFunction
.c43a	a9 07		lda #$07			lda 	#7
.c43c	8d 00 ff	sta $ff00			sta 	APICommand
.c43f					_OHPWait
.c43f	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c442	d0 fb		bne $c43f			bne 	_OHPWait
.c444	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c447	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c449	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c44c	f0 0d		beq $c45b			beq 	_OHPNoSetLast 				; don't set last if no direction.
.c44e	ad 04 ff	lda $ff04			lda 	APIParams 					; any fire button pressed, if zero, set direction
.c451	29 f0		and #$f0			and 	#$F0
.c453	d0 06		bne $c45b			bne 	_OHPNoSetLast 				; don't set last direction if non zero
.c455	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c458	8d 6e c4	sta $c46e			sta 	OHPLastDirection
.c45b					_OHPNoSetLast:
.c45b	ee 6f c4	inc $c46f			inc 	OHPFireCount 				; fire one time in 15
.c45e	ad 6f c4	lda $c46f			lda 	OHPFireCount
.c461	29 0f		and #$0f			and 	#15
.c463	d0 05		bne $c46a			bne 	_OHPNoFire
.c465	a9 01		lda #$01			lda 	#1
.c467	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c46a					_OHPNoFire:
.c46a	20 1d c4	jsr $c41d			jsr 	OHPSetGraphic
.c46d	60		rts				rts
.c46e					OHPLastDirection:
>c46e	02						.byte 	2
.c46f					OHPFireCount:
>c46f	00						.byte 	0

;******  Return to file: main.asm


;******  Processing file: classes/pmissile.asm

.c470					OHMissile:
.c470	c9 01		cmp #$01			cmp 	#MSG_INIT
.c472	d0 05		bne $c479			bne 	_1
.c474	20 96 c4	jsr $c496			jsr 	OHMInitHandler
.c477	18		clc				clc
.c478	60		rts				rts
.c479					_1:
.c479	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c47b	d0 05		bne $c482			bne 	_1
.c47d	20 ae c4	jsr $c4ae			jsr 	OHMRepaintHandler
.c480	18		clc				clc
.c481	60		rts				rts
.c482					_1:
.c482	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c484	d0 05		bne $c48b			bne 	_1
.c486	20 ce c4	jsr $c4ce			jsr 	OHMControl
.c489	18		clc				clc
.c48a	60		rts				rts
.c48b					_1:
.c48b	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c48d	d0 05		bne $c494			bne 	_1
.c48f	20 cf c4	jsr $c4cf			jsr 	OHMHitWall
.c492	18		clc				clc
.c493	60		rts				rts
.c494					_1:
.c494	38		sec				sec
.c495	60		rts				rts
.c496					OHMInitHandler:
.c496	a9 01		lda #$01			lda 	#1
.c498	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c49b	ad 6c e0	lda $e06c			lda 	OBXPos 						; copy position
.c49e	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c4a1	ad d8 e0	lda $e0d8			lda 	OBYPos
.c4a4	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c4a7	ad 6e c4	lda $c46e			lda 	OHPLastDirection 			; copy direction
.c4aa	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c4ad	60		rts				rts
.c4ae					OHMRepaintHandler:
.c4ae	bc 1c e2	ldy $e21c,x			ldy 	OBDirection,x
.c4b1	b9 be c4	lda $c4be,y			lda 	OHMGraphic,y 				; set graphic.
.c4b4	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c4b7	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c4ba	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; disables the flip.
.c4bd	60		rts				rts
.c4be					OHMGraphic:
>c4be	00 17 17 00					.byte 	0,GR1_HORIZFIRE,GR1_HORIZFIRE,0
>c4c2	18 1a 19 00					.byte 	GR1_VERTFIRE,GR1_NWSEFIRE,GR1_SWNEFIRE,0
>c4c6	18 19 1a 00					.byte 	GR1_VERTFIRE,GR1_SWNEFIRE,GR1_NWSEFIRE,0
>c4ca	00 00 00 00					.byte 	0,0,0,0
.c4ce					OHMControl:
.c4ce	60		rts				rts
.c4cf					OHMHitWall:
.c4cf	20 9e c1	jsr $c19e			jsr 	KillObject
.c4d2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/human.asm

.c4d3					OHHuman1:
.c4d3	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4d5	d0 05		bne $c4dc			bne 	_1
.c4d7	20 ff c4	jsr $c4ff			jsr 	OHHInitHandler1
.c4da	18		clc				clc
.c4db	60		rts				rts
.c4dc					_1:
.c4dc	38		sec				sec
.c4dd	60		rts				rts
.c4de					OHHuman2:
.c4de	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4e0	d0 05		bne $c4e7			bne 	_1
.c4e2	20 06 c5	jsr $c506			jsr 	OHHInitHandler2
.c4e5	18		clc				clc
.c4e6	60		rts				rts
.c4e7					_1:
.c4e7	38		sec				sec
.c4e8	60		rts				rts
.c4e9					OHHuman3:
.c4e9	c9 01		cmp #$01			cmp 	#MSG_INIT
.c4eb	d0 05		bne $c4f2			bne 	_1
.c4ed	20 0d c5	jsr $c50d			jsr 	OHHInitHandler3
.c4f0	18		clc				clc
.c4f1	60		rts				rts
.c4f2					_1:
.c4f2	38		sec				sec
.c4f3	60		rts				rts
.c4f4					OHHInitHandlerMain:
.c4f4	a9 1e		lda #$1e			lda 	#30
.c4f6	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c4f9	a9 0f		lda #$0f			lda 	#15
.c4fb	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c4fe	60		rts				rts
.c4ff					OHHInitHandler1:
.c4ff	a9 04		lda #$04			lda 	#GR_HUMANS+0
.c501	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c504	80 ee		bra $c4f4			bra 	OHHInitHandlerMain
.c506					OHHInitHandler2:
.c506	a9 06		lda #$06			lda 	#GR_HUMANS+2
.c508	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c50b	80 e7		bra $c4f4			bra 	OHHInitHandlerMain
.c50d					OHHInitHandler3:
.c50d	a9 08		lda #$08			lda 	#GR_HUMANS+4
.c50f	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c512	80 e0		bra $c4f4			bra 	OHHInitHandlerMain

;******  Return to file: main.asm


;******  Processing file: classes/grunt.asm

.c514					OHGrunt:
.c514	c9 01		cmp #$01			cmp 	#MSG_INIT
.c516	d0 05		bne $c51d			bne 	_1
.c518	20 28 c5	jsr $c528			jsr 	OHGInitHandler
.c51b	18		clc				clc
.c51c	60		rts				rts
.c51d					_1:
.c51d	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c51f	d0 05		bne $c526			bne 	_1
.c521	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c524	18		clc				clc
.c525	60		rts				rts
.c526					_1:
.c526	38		sec				sec
.c527	60		rts				rts
.c528					OHGInitHandler:
.c528	a9 0c		lda #$0c			lda 	#GR_GRUNT
.c52a	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c52d	a9 20		lda #$20			lda 	#32
.c52f	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c532	a9 01		lda #$01			lda 	#1
.c534	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c537	a9 00		lda #$00			lda 	#($100 & 255)
.c539	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c53c	a9 01		lda #$01			lda 	#($100 >> 8)
.c53e	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c541	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/hulk.asm

.c542					OHHulk:
.c542	c9 01		cmp #$01			cmp 	#MSG_INIT
.c544	d0 05		bne $c54b			bne 	_1
.c546	20 56 c5	jsr $c556			jsr 	OHHUInitHandler
.c549	18		clc				clc
.c54a	60		rts				rts
.c54b					_1:
.c54b	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c54d	d0 05		bne $c554			bne 	_1
.c54f	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c552	18		clc				clc
.c553	60		rts				rts
.c554					_1:
.c554	38		sec				sec
.c555	60		rts				rts
.c556					OHHUInitHandler:
.c556	a9 0a		lda #$0a			lda 	#GR_HULK
.c558	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c55b	a9 40		lda #$40			lda 	#64
.c55d	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c560	a9 01		lda #$01			lda 	#1
.c562	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c565	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/sphere.asm

.c566					OHSphere:
.c566	c9 01		cmp #$01			cmp 	#MSG_INIT
.c568	d0 05		bne $c56f			bne 	_1
.c56a	20 8c c5	jsr $c58c			jsr 	OHSInitHandler
.c56d	18		clc				clc
.c56e	60		rts				rts
.c56f					_1:
.c56f	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c571	d0 05		bne $c578			bne 	_1
.c573	20 ae c5	jsr $c5ae			jsr 	OHSControl
.c576	18		clc				clc
.c577	60		rts				rts
.c578					_1:
.c578	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c57a	d0 05		bne $c581			bne 	_1
.c57c	20 bb c5	jsr $c5bb			jsr 	OHSCheckFire
.c57f	18		clc				clc
.c580	60		rts				rts
.c581					_1:
.c581	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c583	d0 05		bne $c58a			bne 	_1
.c585	20 cf c5	jsr $c5cf			jsr 	OHSRepaint
.c588	18		clc				clc
.c589	60		rts				rts
.c58a					_1:
.c58a	38		sec				sec
.c58b	60		rts				rts
.c58c					OHSInitHandler:
.c58c	a9 0e		lda #$0e			lda 	#GR_SPHEROID
.c58e	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c591	a9 08		lda #$08			lda 	#8
.c593	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c596	a9 28		lda #$28			lda 	#40
.c598	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c59b	a9 00		lda #$00			lda 	#($1000 & 255)
.c59d	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c5a0	a9 10		lda #$10			lda 	#($1000 >> 8)
.c5a2	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c5a5	20 61 c2	jsr $c261			jsr 	Random8Bit
.c5a8	29 3f		and #$3f			and 	#63
.c5aa	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c5ad	60		rts				rts
.c5ae					OHSControl:
.c5ae	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c5b1	d0 04		bne $c5b7			bne 	_OHSNoMove
.c5b3	20 12 c2	jsr $c212			jsr		ChooseRandomDirection
.c5b6	60		rts				rts
.c5b7					_OHSNoMove:
.c5b7	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c5ba	60		rts				rts
.c5bb					OHSCheckFire:
.c5bb	20 61 c2	jsr $c261			jsr 	Random8Bit
.c5be	29 1f		and #$1f			and 	#31
.c5c0	d0 0c		bne $c5ce			bne 	_OHSCFExit
.c5c2	a9 0d		lda #$0d			lda 	#TP_ENFORCER
.c5c4	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c5c7	ac cd c0	ldy $c0cd			ldy 	NewObject
.c5ca	20 9a c2	jsr $c29a			jsr 	CopyStartPosition
.c5cd	60		rts				rts
.c5ce					_OHSCFExit:
.c5ce	60		rts				rts
.c5cf					OHSRepaint:
.c5cf	4e 09 ff	lsr $ff09			lsr 	APIParams+5
.c5d2	fe e8 e5	inc $e5e8,x			inc 	OBObjectData1,x
.c5d5	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x
.c5d8	4a		lsr a				lsr 	a
.c5d9	2e 09 ff	rol $ff09			rol 	APIParams+5
.c5dc	60		rts				rts
.c5dd					OHEnforcer:
.c5dd	c9 01		cmp #$01			cmp 	#MSG_INIT
.c5df	d0 05		bne $c5e6			bne 	_1
.c5e1	20 fa c5	jsr $c5fa			jsr 	OHENInitHandler
.c5e4	18		clc				clc
.c5e5	60		rts				rts
.c5e6					_1:
.c5e6	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c5e8	d0 05		bne $c5ef			bne 	_1
.c5ea	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c5ed	18		clc				clc
.c5ee	60		rts				rts
.c5ef					_1:
.c5ef	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c5f1	d0 05		bne $c5f8			bne 	_1
.c5f3	20 17 c6	jsr $c617			jsr 	OHENCheckFire
.c5f6	18		clc				clc
.c5f7	60		rts				rts
.c5f8					_1:
.c5f8	38		sec				sec
.c5f9	60		rts				rts
.c5fa					OHENInitHandler:
.c5fa	a9 10		lda #$10			lda 	#GR1_ENFORCER
.c5fc	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c5ff	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c602	a9 0f		lda #$0f			lda 	#15
.c604	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c607	a9 1e		lda #$1e			lda 	#30
.c609	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c60c	a9 50		lda #$50			lda 	#($150 & 255)
.c60e	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c611	a9 01		lda #$01			lda 	#($150 >> 8)
.c613	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c616	60		rts				rts
.c617					OHENCheckFire:
.c617	20 61 c2	jsr $c261			jsr 	Random8Bit
.c61a	29 1f		and #$1f			and 	#31
.c61c	d0 0f		bne $c62d			bne 	_OHENCFExit
.c61e	a9 0c		lda #$0c			lda 	#TP_ESPARK
.c620	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c623	ac cd c0	ldy $c0cd			ldy 	NewObject
.c626	20 9a c2	jsr $c29a			jsr 	CopyStartPosition
.c629	20 a7 c2	jsr $c2a7			jsr 	ChasePlayerY
.c62c	60		rts				rts
.c62d					_OHENCFExit:
.c62d	60		rts				rts
.c62e					OHESpark:
.c62e	c9 01		cmp #$01			cmp 	#MSG_INIT
.c630	d0 05		bne $c637			bne 	_1
.c632	20 4b c6	jsr $c64b			jsr 	OHESInitHandler
.c635	18		clc				clc
.c636	60		rts				rts
.c637					_1:
.c637	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c639	d0 05		bne $c640			bne 	_1
.c63b	20 9e c1	jsr $c19e			jsr 	KillObject
.c63e	18		clc				clc
.c63f	60		rts				rts
.c640					_1:
.c640	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c642	d0 05		bne $c649			bne 	_1
.c644	20 2c c2	jsr $c22c			jsr 	NoControlEffect
.c647	18		clc				clc
.c648	60		rts				rts
.c649					_1:
.c649	38		sec				sec
.c64a	60		rts				rts
.c64b					OHESInitHandler:
.c64b	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c64e	a9 20		lda #$20			lda 	#GR1_MISSILE2
.c650	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c653	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c656	a9 07		lda #$07			lda 	#7
.c658	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c65b	a9 ff		lda #$ff			lda 	#255
.c65d	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c660	a9 25		lda #$25			lda 	#($25 & 255)
.c662	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c665	a9 00		lda #$00			lda 	#($25 >> 8)
.c667	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c66a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/quarks.asm

.c66b					OHQuark:
.c66b	c9 01		cmp #$01			cmp 	#MSG_INIT
.c66d	d0 05		bne $c674			bne 	_1
.c66f	20 7f c6	jsr $c67f			jsr 	OHQInitHandler
.c672	18		clc				clc
.c673	60		rts				rts
.c674					_1:
.c674	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c676	d0 05		bne $c67d			bne 	_1
.c678	20 a4 c6	jsr $c6a4			jsr 	OHQCheckFire
.c67b	18		clc				clc
.c67c	60		rts				rts
.c67d					_1:
.c67d	38		sec				sec
.c67e	60		rts				rts
.c67f					OHQInitHandler:
.c67f	a9 11		lda #$11			lda 	#GR1_QUARK
.c681	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c684	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c687	a9 0a		lda #$0a			lda 	#10
.c689	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c68c	a9 1e		lda #$1e			lda 	#30
.c68e	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c691	a9 00		lda #$00			lda 	#($1000 & 255)
.c693	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c696	a9 10		lda #$10			lda 	#($1000 >> 8)
.c698	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c69b	20 61 c2	jsr $c261			jsr 	Random8Bit
.c69e	29 3f		and #$3f			and 	#63
.c6a0	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c6a3	60		rts				rts
.c6a4					OHQCheckFire:
.c6a4	20 61 c2	jsr $c261			jsr 	Random8Bit
.c6a7	29 1f		and #$1f			and 	#31
.c6a9	d0 0c		bne $c6b7			bne 	_OHQCFExit
.c6ab	a9 0f		lda #$0f			lda 	#TP_TANK
.c6ad	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c6b0	ac cd c0	ldy $c0cd			ldy 	NewObject
.c6b3	20 9a c2	jsr $c29a			jsr 	CopyStartPosition
.c6b6	60		rts				rts
.c6b7					_OHQCFExit:
.c6b7	60		rts				rts
.c6b8					OHTank:
.c6b8	c9 01		cmp #$01			cmp 	#MSG_INIT
.c6ba	d0 05		bne $c6c1			bne 	_1
.c6bc	20 cc c6	jsr $c6cc			jsr 	OHTNInitHandler
.c6bf	18		clc				clc
.c6c0	60		rts				rts
.c6c1					_1:
.c6c1	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c6c3	d0 05		bne $c6ca			bne 	_1
.c6c5	20 e6 c6	jsr $c6e6			jsr 	OHTNCheckFire
.c6c8	18		clc				clc
.c6c9	60		rts				rts
.c6ca					_1:
.c6ca	38		sec				sec
.c6cb	60		rts				rts
.c6cc					OHTNInitHandler:
.c6cc	a9 12		lda #$12			lda 	#GR_TANK
.c6ce	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c6d1	a9 0f		lda #$0f			lda 	#15
.c6d3	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c6d6	a9 1e		lda #$1e			lda 	#30
.c6d8	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c6db	a9 00		lda #$00			lda 	#($200 & 255)
.c6dd	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c6e0	a9 02		lda #$02			lda 	#($200 >> 8)
.c6e2	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c6e5	60		rts				rts
.c6e6					OHTNCheckFire:
.c6e6	20 61 c2	jsr $c261			jsr 	Random8Bit
.c6e9	29 1f		and #$1f			and 	#31
.c6eb	d0 0f		bne $c6fc			bne 	_OHTNCFExit
.c6ed	a9 0e		lda #$0e			lda 	#TP_SHELL
.c6ef	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c6f2	ac cd c0	ldy $c0cd			ldy 	NewObject
.c6f5	20 9a c2	jsr $c29a			jsr 	CopyStartPosition
.c6f8	20 a7 c2	jsr $c2a7			jsr 	ChasePlayerY
.c6fb	60		rts				rts
.c6fc					_OHTNCFExit:
.c6fc	60		rts				rts
.c6fd					OHShell:
.c6fd	c9 01		cmp #$01			cmp 	#MSG_INIT
.c6ff	d0 05		bne $c706			bne 	_1
.c701	20 2c c7	jsr $c72c			jsr 	OHSHInitHandler
.c704	18		clc				clc
.c705	60		rts				rts
.c706					_1:
.c706	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c708	d0 05		bne $c70f			bne 	_1
.c70a	20 51 c7	jsr $c751			jsr 	OHSHHitWall
.c70d	18		clc				clc
.c70e	60		rts				rts
.c70f					_1:
.c70f	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c711	d0 05		bne $c718			bne 	_1
.c713	20 2c c2	jsr $c22c			jsr 	NoControlEffect
.c716	18		clc				clc
.c717	60		rts				rts
.c718					_1:
.c718	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c71a	d0 05		bne $c721			bne 	_1
.c71c	20 23 c7	jsr $c723			jsr 	OHSHCheckLife
.c71f	18		clc				clc
.c720	60		rts				rts
.c721					_1:
.c721	38		sec				sec
.c722	60		rts				rts
.c723					OHSHCheckLife:
.c723	de e8 e5	dec $e5e8,x			dec 	OBObjectData1,x
.c726	d0 03		bne $c72b			bne 	_OHSHCLExit
.c728	20 9e c1	jsr $c19e			jsr 	KillObject
.c72b					_OHSHCLExit:
.c72b	60		rts				rts
.c72c					OHSHInitHandler:
.c72c	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c72f	a9 1f		lda #$1f			lda 	#GR1_MISSILE1
.c731	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c734	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c737	a9 05		lda #$05			lda 	#5
.c739	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c73c	a9 ff		lda #$ff			lda 	#255
.c73e	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c741	a9 50		lda #$50			lda 	#($50 & 255)
.c743	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c746	a9 00		lda #$00			lda 	#($50 >> 8)
.c748	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c74b	a9 c8		lda #$c8			lda 	#200
.c74d	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c750	60		rts				rts
.c751					OHSHHitWall:
.c751	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c754	c9 05		cmp #$05			cmp 	#PF_LEFT+1
.c756	90 04		bcc $c75c			bcc 	_OHSH1
.c758	c9 9b		cmp #$9b			cmp 	#PF_RIGHT-1
.c75a	90 08		bcc $c764			bcc 	_OHSHCheckVertical
.c75c					_OHSH1:
.c75c	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c75f	49 03		eor #$03			eor 	#3
.c761	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c764					_OHSHCheckVertical:
.c764	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c767	c9 05		cmp #$05			cmp 	#PF_TOP+1
.c769	90 04		bcc $c76f			bcc 	_OHSH2
.c76b	c9 6b		cmp #$6b			cmp 	#PF_BOTTOM-1
.c76d	90 08		bcc $c777			bcc 	_OHSHExit
.c76f					_OHSH2:
.c76f	bd 1c e2	lda $e21c,x			lda 	OBDirection,x
.c772	49 0c		eor #$0c			eor 	#12
.c774	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c777					_OHSHExit:
.c777	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/electrode.asm

.c778					OHElectrode:
.c778	c9 01		cmp #$01			cmp 	#MSG_INIT
.c77a	d0 05		bne $c781			bne 	_1
.c77c	20 8c c7	jsr $c78c			jsr 	OHELInitHandler
.c77f	18		clc				clc
.c780	60		rts				rts
.c781					_1:
.c781	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c783	d0 05		bne $c78a			bne 	_1
.c785	20 a8 c7	jsr $c7a8			jsr 	OHELFreeze
.c788	18		clc				clc
.c789	60		rts				rts
.c78a					_1:
.c78a	38		sec				sec
.c78b	60		rts				rts
.c78c					OHELInitHandler:
.c78c	a9 1b		lda #$1b			lda 	#GR4_ELECTRODES
.c78e	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c791	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c794	a9 00		lda #$00			lda 	#0
.c796	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c799	a9 00		lda #$00			lda 	#0
.c79b	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c79e	a9 00		lda #$00			lda 	#($0 & 255)
.c7a0	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c7a3	a9 00		lda #$00			lda 	#($0 >> 8)
.c7a5	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c7a8					OHELFreeze:
.c7a8	9e 1c e2	stz $e21c,x			stz 	OBDirection,x
.c7ab	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/brains.asm

.c7ac					OHBrain:
.c7ac	c9 01		cmp #$01			cmp 	#MSG_INIT
.c7ae	d0 05		bne $c7b5			bne 	_1
.c7b0	20 d2 c7	jsr $c7d2			jsr 	OHBInitHandler
.c7b3	18		clc				clc
.c7b4	60		rts				rts
.c7b5					_1:
.c7b5	c9 05		cmp #$05			cmp 	#MSG_ONMOVE
.c7b7	d0 05		bne $c7be			bne 	_1
.c7b9	20 ef c7	jsr $c7ef			jsr 	OHBCheckEat
.c7bc	18		clc				clc
.c7bd	60		rts				rts
.c7be					_1:
.c7be	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c7c0	d0 05		bne $c7c7			bne 	_1
.c7c2	20 18 c8	jsr $c818			jsr 	OHBChaseHuman
.c7c5	18		clc				clc
.c7c6	60		rts				rts
.c7c7					_1:
.c7c7	c9 04		cmp #$04			cmp 	#MSG_HITWALL
.c7c9	d0 05		bne $c7d0			bne 	_1
.c7cb	20 12 c2	jsr $c212			jsr 	ChooseRandomDirection
.c7ce	18		clc				clc
.c7cf	60		rts				rts
.c7d0					_1:
.c7d0	38		sec				sec
.c7d1	60		rts				rts
.c7d2					OHBInitHandler:
.c7d2	a9 14		lda #$14			lda 	#GR_BRAIN
.c7d4	20 8a c2	jsr $c28a			jsr 	SetObjectGraphic
.c7d7	a9 18		lda #$18			lda 	#24
.c7d9	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c7dc	a9 01		lda #$01			lda 	#1
.c7de	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c7e1	a9 00		lda #$00			lda 	#($500 & 255)
.c7e3	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c7e6	a9 05		lda #$05			lda 	#($500 >> 8)
.c7e8	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c7eb	20 12 c2	jsr $c212			jsr 	ChooseRandomDirection
.c7ee	60		rts				rts
.c7ef					OHBCheckEat:
.c7ef	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; object being chased.
.c7f2	f0 23		beq $c817			beq 	_OHBCEExit 					; none
.c7f4	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; actual object
.c7f7	30 1e		bmi $c817			bmi 	_OHBCEExit 					; not existing.
.c7f9	20 af c2	jsr $c2af			jsr 	CheckCollision 				; are Y/X colliding ?
.c7fc	90 19		bcc $c817			bcc 	_OHBCEExit
.c7fe	da		phx				phx
.c7ff	a9 0b		lda #$0b			lda 	#TP_PROG 					; create a PROG here
.c801	20 92 c2	jsr $c292			jsr 	CreateSingleObject
.c804	ac cd c0	ldy $c0cd			ldy 	NewObject
.c807	20 9a c2	jsr $c29a			jsr 	CopyStartPosition
.c80a	fa		plx				plx
.c80b	da		phx				phx
.c80c	20 9e c1	jsr $c19e			jsr 	KillObject	 				; kill the parent object
.c80f	bd e8 e5	lda $e5e8,x			lda 	OBObjectData1,x 			; and the thing it collided with, the human.
.c812	aa		tax				tax
.c813	20 9e c1	jsr $c19e			jsr 	KillObject
.c816	fa		plx				plx
.c817					_OHBCEExit:
.c817	60		rts				rts
.c818					OHBChaseHuman:
.c818	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x 			; check chase
.c81b	f0 05		beq $c822			beq 	_OHBNewChoose
.c81d	b9 00 e0	lda $e000,y			lda 	OBFlags,y 					; chased still alive ?
.c820	10 16		bpl $c838			bpl 	_OHBChaseIt
.c822					_OHBNewChoose:
.c822	20 61 c2	jsr $c261			jsr 	Random8Bit 					; no, keep randomly trying till found a live one.
.c825	29 07		and #$07			and 	#OBH_RANDOM_MASK
.c827	c9 06		cmp #$06			cmp 	#OBC_HUMANS
.c829	b0 f7		bcs $c822			bcs 	_OHBNewChoose
.c82b	69 05		adc #$05			adc 	#OB_HUMANS
.c82d	a8		tay				tay
.c82e	b9 e8 e5	lda $e5e8,y			lda 	OBObjectData1,y
.c831	30 0b		bmi $c83e			bmi 	_OHBExit
.c833	98		tya				tya
.c834	9d e8 e5	sta $e5e8,x			sta 	OBObjectData1,x
.c837	60		rts				rts
.c838					_OHBChaseIt:
.c838	bc e8 e5	ldy $e5e8,x			ldy 	OBObjectData1,x
.c83b	20 2d c2	jsr $c22d			jsr 	ChaseObject
.c83e					_OHBExit:
.c83e	60		rts				rts
.c83f					OHProg:
.c83f	c9 01		cmp #$01			cmp 	#MSG_INIT
.c841	d0 05		bne $c848			bne 	_1
.c843	20 53 c8	jsr $c853			jsr 	OHPRInitHandler
.c846	18		clc				clc
.c847	60		rts				rts
.c848					_1:
.c848	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c84a	d0 05		bne $c851			bne 	_1
.c84c	20 59 c2	jsr $c259			jsr 	ChasePlayer
.c84f	18		clc				clc
.c850	60		rts				rts
.c851					_1:
.c851	38		sec				sec
.c852	60		rts				rts
.c853					OHPRInitHandler:
.c853	a9 16		lda #$16			lda 	#GR1_PROG
.c855	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c858	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c85b	a9 04		lda #$04			lda 	#4
.c85d	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c860	a9 01		lda #$01			lda 	#1
.c862	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c865	a9 00		lda #$00			lda 	#($100 & 255)
.c867	9d 10 e5	sta $e510,x			sta 	OBScoreLow,x
.c86a	a9 01		lda #$01			lda 	#($100 >> 8)
.c86c	9d 7c e5	sta $e57c,x			sta 	OBScoreHigh,x
.c86f	60		rts				rts

;******  Return to file: main.asm

.c870					MainLoop:
.c870	ee 7d c8	inc $c87d			inc 	FrameCount
.c873	20 5d c1	jsr $c15d			jsr 	AnimatePalette 				; causes flashing effects
.c876	20 ce c0	jsr $c0ce			jsr 	MoveObjects 				; move all objects
.c879	20 4e c1	jsr $c14e			jsr 	ClockDelay 					; delay to stop it being insanely fast.
.c87c	60		rts				rts
.c87d					FrameCount:
>c87d	00						.byte 	0
.c87e					HandlerTable:
>c87e	cf c3						.word 		OHPlayer 				; type 0 Player
>c880	70 c4						.word 		OHMissile 				; type 1 Player missile
>c882	14 c5						.word 		OHGrunt 				; type 2 Grunt
>c884	78 c7						.word 		OHElectrode 			; type 3 Electrode
>c886	d3 c4						.word 		OHHuman1 				; type 4-6 Humans
>c888	de c4						.word 		OHHuman2
>c88a	e9 c4						.word 		OHHuman3
>c88c	42 c5						.word 		OHHulk 					; type 7 Hulk
>c88e	ac c7						.word 		OHBrain 				; type 8 Brain
>c890	66 c5						.word 		OHSphere 				; type 9 Sphere
>c892	6b c6						.word 		OHQuark 				; type 10 Quark
>c894	3f c8						.word 		OHProg 					; type 11 Prog
>c896	2e c6						.word 		OHESpark 				; type 12 Enforcer Sparks.
>c898	dd c5						.word 		OHEnforcer 				; type 13 Enforcer
>c89a	fd c6						.word 		OHShell 				; type 14 Shell
>c89c	b8 c6						.word 		OHTank 					; type 15 Tank

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT
=$e510					OBScoreLow = OBBase + 12*OBJ_COUNT
=$e57c					OBScoreHigh = OBBase + 13*OBJ_COUNT
=$e5e8					OBObjectData1 = OBBase + 14*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
