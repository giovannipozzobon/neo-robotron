
; 64tass Turbo Assembler Macro V1.59. listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Sun Apr 14 10:27:05 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_EMBRYO	= 16  							; Embryo graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR8_ELECTRODES = 22  						; Set of 8 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=32					GR1_HORIZFIRE = 32  						; Horizontal fire
=33					GR1_VERTFIRE = 33  							; Vertical fire
=34					GR1_SWNEFIRE = 34   						; / fire
=35					GR1_NWSEFIRE = 35  							; \ fire
=108					OBJ_COUNT = 108 								; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04

;******  Return to file: main.asm

.c000	4c 5c c0	jmp $c05c			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 06 c0	jmp $c006			jmp 	CreateObject 				; $C003 create object of type A.

;******  Processing file: create.asm

.c006					CreateObject:
.c006	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c008					_COLoop:
.c008	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c00b	30 06		bmi $c013			bmi 	_COFound
.c00d	e8		inx				inx
.c00e	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c010	d0 f6		bne $c008			bne 	_COLoop
.c012	60		rts				rts  								; cannot create, exit.
.c013					_COFound:
.c013	9e 00 e0	stz $e000,x			stz 	OBFlags,x 					; clear unused flag
.c016					_COPos1:
.c016	20 9e c0	jsr $c09e			jsr 	Random8Bit  				; value is 0-150
.c019	c9 96		cmp #$96			cmp 	#150
.c01b	b0 f9		bcs $c016			bcs 	_COPos1
.c01d	69 04		adc #$04			adc 	#4
.c01f	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c022					_COPos2:
.c022	20 9e c0	jsr $c09e			jsr 	Random8Bit 					; value is 0-103
.c025	29 7f		and #$7f			and 	#$7F
.c027	c9 68		cmp #$68			cmp 	#104
.c029	b0 f7		bcs $c022			bcs 	_COPos2
.c02b	69 04		adc #$04			adc 	#4
.c02d	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c030	38		sec				sec   								; check Y centre offset
.c031	e9 34		sbc #$34			sbc 	#52
.c033	20 54 c0	jsr $c054			jsr 	_COAbsolute
.c036	c9 27		cmp #$27			cmp 	#39
.c038	b0 0d		bcs $c047			bcs 	_COIsOkay
.c03a	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c03d	38		sec				sec
.c03e	e9 4b		sbc #$4b			sbc 	#75
.c040	20 54 c0	jsr $c054			jsr 	_COAbsolute
.c043	c9 37		cmp #$37			cmp 	#55
.c045	90 cf		bcc $c016			bcc 	_COPos1
.c047					_COIsOkay:
.c047	a9 0a		lda #$0a			lda 	#GR_HULK
.c049	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c04c	1a		inc a				inc 	a
.c04d	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c050	20 69 c0	jsr $c069			jsr 	RedrawObject
.c053	60		rts				rts
.c054					_COAbsolute:
.c054	c9 00		cmp #$00			cmp 	#0
.c056	10 03		bpl $c05b			bpl 	_COAExit
.c058	49 ff		eor #$ff			eor 	#$FF
.c05a	1a		inc a				inc 	a
.c05b					_COAExit:
.c05b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c05c					ResetObjects:
.c05c	a2 00		ldx #$00			ldx 	#0
.c05e					_RSLoop:
.c05e	a9 ff		lda #$ff			lda 	#$FF
.c060	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c063	e8		inx				inx
.c064	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c066	d0 f6		bne $c05e			bne 	_RSLoop
.c068	60		rts				rts
.c069					RedrawObject:
.c069	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c06c	d0 fb		bne $c069			bne 	RedrawObject
.c06e	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c071	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c074	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c077	0a		asl a				asl 	a
.c078	8d 05 ff	sta $ff05			sta 	APIParams+1
.c07b	2e 06 ff	rol $ff06			rol 	APIParams+2
.c07e	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c081	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c084	0a		asl a				asl 	a
.c085	69 10		adc #$10			adc 	#16 						; allow for top area
.c087	8d 07 ff	sta $ff07			sta 	APIParams+3
.c08a	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic
.c08d	8d 09 ff	sta $ff09			sta 	APIParams+5
.c090	9c 0a ff	stz $ff0a			stz 	APIParams+6 				; set flip
.c093	a9 02		lda #$02			lda 	#2  						; and draw it.
.c095	8d 01 ff	sta $ff01			sta 	APIFunction
.c098	a9 06		lda #$06			lda 	#6
.c09a	8d 00 ff	sta $ff00			sta 	APICommand
.c09d	60		rts				rts
.c09e					Random8Bit:
.c09e	5a		phy				phy
.c09f	a0 08		ldy #$08			ldy 	#8
.c0a1	ad b4 c0	lda $c0b4			lda 	_R8SeedValue+0
.c0a4					_R8RandomLoop
.c0a4	0a		asl a				asl     a
.c0a5	2e b5 c0	rol $c0b5			rol 	_R8SeedValue+1
.c0a8	90 02		bcc $c0ac			bcc 	_R8NotSet
.c0aa	49 39		eor #$39			eor 	#$39
.c0ac					_R8NotSet:
.c0ac	88		dey				dey
.c0ad	d0 f5		bne $c0a4			bne 	_R8RandomLoop
.c0af	8d b4 c0	sta $c0b4			sta 	_R8SeedValue+0
.c0b2	7a		ply				ply
.c0b3	60		rts				rts
.c0b4					_R8SeedValue
>c0b4	cd ab						.word 	$ABCD

;******  Return to file: main.asm


;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
