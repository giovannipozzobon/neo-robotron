
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -b -c -Wall -o ../storage/robotron.bin -L ../build/robotron.lst main.asm
; Thu Apr 18 16:21:56 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: constants.inc

=0					TP_PLAYER = 0
=1					TP_PLAYERMISSILE = 1
=2					TP_MUM = 2
=3					TP_DAD = 3
=4					TP_CHILD = 4
=0					OB_PLAYER = 0 								; player object (1)
=1					OB_PLAYERMISSILE = 1 						; player missile (4)
=5					OB_HUMANS = 5 								; humans (6)
=11					OB_ENEMIES = 11 							; enemies (everything else)
=4					OBC_PLAYERMISSILES = OB_HUMANS-OB_PLAYERMISSILE
=6					OBC_HUMANS = OB_ENEMIES-OB_HUMANS
=97					OBC_ENEMIES = OBJ_COUNT - OB_ENEMIES
=0					GR_PLAYERH = 0 								; horizontal player
=2					GR_PLAYERV = 2  							; vertical player
=4					GR_HUMANS = 4  								; 3 sets of human graphics
=10					GR_HULK = 10  								; Hulk graphic
=12					GR_GRUNT = 12  								; Grunt graphic
=14					GR_SPHEROID = 14   							; Spheroid graphic
=16					GR1_EMBRYO	= 16  							; Embryo graphic (1 only)
=17					GR1_QUARK = 17   							; Quark graphic (1 only)
=18					GR_TANK = 18  								; Tank graphic
=20					GR_BRAIN = 20  								; Brain graphic
=22					GR8_ELECTRODES = 22  						; Set of 8 electrode graphics
=30					GR1_MISSILE1 = 30  							; Robotron missiles
=31					GR1_MISSILE2 = 31
=32					GR1_HORIZFIRE = 32  						; Horizontal fire
=33					GR1_VERTFIRE = 33  							; Vertical fire
=34					GR1_SWNEFIRE = 34   						; / fire
=35					GR1_NWSEFIRE = 35  							; \ fire
=108					OBJ_COUNT = 108 								; maximum number of supported objects
=$ff00					APICommand = $FF00
=$ff01					APIFunction = $FF01
=$ff04					APIParams = $FF04
=$01					MSG_INIT = $01 								; Initialise object
=$02					MSG_REPAINT = $02 							; About to repaint
=$03					MSG_CONTROL = $03 							; Time for a rethink

;******  Return to file: main.asm

.c000	4c 3f c1	jmp $c13f			jmp 	ResetObjects 				; $C000 reset all sprites.
.c003	4c 09 c0	jmp $c009			jmp 	CreateObjects 				; $C003 create X objects of type A.
.c006	4c d0 c0	jmp $c0d0			jmp 	MoveObjects 				; $C006 move all objects

;******  Processing file: create.asm

.c009					CreateObjects:
.c009	e0 00		cpx #$00			cpx 	#0
.c00b	f0 0a		beq $c017			beq 	_COExit
.c00d	da		phx				phx
.c00e	48		pha				pha
.c00f	20 18 c0	jsr $c018			jsr 	CreateObject
.c012	68		pla				pla
.c013	fa		plx				plx
.c014	ca		dex				dex
.c015	d0 f2		bne $c009			bne 	CreateObjects
.c017					_COExit:
.c017	60		rts				rts
.c018					CreateObject:
.c018	a2 00		ldx #$00			ldx 	#OB_PLAYER 					; player object (1st one)
.c01a	a0 01		ldy #$01			ldy 	#1
.c01c	c9 00		cmp #$00			cmp 	#TP_PLAYER
.c01e	f0 14		beq $c034			beq 	_COLoop
.c020	a2 01		ldx #$01			ldx 	#OB_PLAYERMISSILE 			; player missiles (next 4)
.c022	a0 04		ldy #$04			ldy 	#OBC_PLAYERMISSILES
.c024	c9 01		cmp #$01			cmp 	#TP_PLAYERMISSILE
.c026	f0 0c		beq $c034			beq 	_COLoop
.c028	a2 05		ldx #$05			ldx 	#OB_HUMANS 					; humans (next 6)
.c02a	a0 06		ldy #$06			ldy 	#OBC_HUMANS
.c02c	c9 05		cmp #$05			cmp 	#TP_CHILD+1
.c02e	90 04		bcc $c034			bcc 	_COLoop
.c030	a2 0b		ldx #$0b			ldx 	#OB_ENEMIES 				; check everything else
.c032	a0 61		ldy #$61			ldy 	#OBC_ENEMIES
.c034					_COLoop:
.c034	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c037	30 05		bmi $c03e			bmi 	_COFound
.c039	e8		inx				inx
.c03a	88		dey				dey
.c03b	d0 f7		bne $c034			bne 	_COLoop
.c03d	60		rts				rts  								; cannot create, exit.
.c03e					_COFound:
.c03e	9d 00 e0	sta $e000,x			sta 	OBFlags,x 					; clear unused flag, set type.
.c041	0a		asl a				asl 	a 							; double -> Y
.c042	a8		tay				tay
.c043	b9 2c c2	lda $c22c,y			lda 	HandlerTable,y  			; put the handler address in.
.c046	9d 60 e3	sta $e360,x			sta 	OBHandlerLow,x
.c049	b9 2d c2	lda $c22d,y			lda 	HandlerTable+1,y
.c04c	9d cc e3	sta $e3cc,x			sta 	OBHandlerHigh,x
.c04f					_COPos1:
.c04f	20 98 c1	jsr $c198			jsr 	Random8Bit  				; value is 0-151
.c052	c9 98		cmp #$98			cmp 	#152
.c054	b0 f9		bcs $c04f			bcs 	_COPos1
.c056	69 04		adc #$04			adc 	#4
.c058	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c05b					_COPos2:
.c05b	20 98 c1	jsr $c198			jsr 	Random8Bit 					; value is 0-103
.c05e	29 7f		and #$7f			and 	#$7F
.c060	c9 68		cmp #$68			cmp 	#104
.c062	b0 f7		bcs $c05b			bcs 	_COPos2
.c064	69 04		adc #$04			adc 	#4
.c066	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c069	38		sec				sec   								; check Y centre offset
.c06a	e9 34		sbc #$34			sbc 	#52
.c06c	20 ae c0	jsr $c0ae			jsr 	_COAbsolute
.c06f	c9 27		cmp #$27			cmp 	#39
.c071	b0 0d		bcs $c080			bcs 	_COIsOkay
.c073	bd 6c e0	lda $e06c,x			lda 	OBXPos,x 					; same for X
.c076	38		sec				sec
.c077	e9 4b		sbc #$4b			sbc 	#75
.c079	20 ae c0	jsr $c0ae			jsr 	_COAbsolute
.c07c	c9 37		cmp #$37			cmp 	#55
.c07e	90 cf		bcc $c04f			bcc 	_COPos1
.c080					_COIsOkay:
.c080	a9 0a		lda #$0a			lda 	#GR_HULK 					; temporary value.
.c082	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c085	1a		inc a				inc 	a
.c086	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c089	8a		txa				txa  								; set intelligence, speed & counter defaults.
.c08a	29 07		and #$07			and 	#7
.c08c	1a		inc a				inc 	a
.c08d	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x 			; init counter derived from index so they don't all move in sync.
.c090	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c093	a9 01		lda #$01			lda 	#1
.c095	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c098	a9 0a		lda #$0a			lda 	#10
.c09a	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c09d	20 b6 c0	jsr $c0b6			jsr 	ChooseRandomDirection
.c0a0	a9 01		lda #$01			lda 	#MSG_INIT
.c0a2	20 b0 c1	jsr $c1b0			jsr 	SendObjectMessage
.c0a5	90 03		bcc $c0aa			bcc 	_1
.c0a7	20 c9 c1	jsr $c1c9			jsr 	DefaultHandler
.c0aa					_1:
.c0aa	20 4c c1	jsr $c14c			jsr 	RedrawObject
.c0ad	60		rts				rts
.c0ae					_COAbsolute:
.c0ae	c9 00		cmp #$00			cmp 	#0
.c0b0	10 03		bpl $c0b5			bpl 	_COAExit
.c0b2	49 ff		eor #$ff			eor 	#$FF
.c0b4	1a		inc a				inc 	a
.c0b5					_COAExit:
.c0b5	60		rts				rts
.c0b6					ChooseRandomDirection:
.c0b6	20 98 c1	jsr $c198			jsr 	Random8Bit 					; get valid random direction
.c0b9	29 0f		and #$0f			and 	#15
.c0bb	f0 f9		beq $c0b6			beq 	ChooseRandomDirection 				; stationary (0)
.c0bd	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c0c0	29 03		and #$03			and 	#3 							; check LR not both on.
.c0c2	c9 03		cmp #$03			cmp 	#3
.c0c4	f0 f0		beq $c0b6			beq 	ChooseRandomDirection
.c0c6	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check UD not both on
.c0c9	29 0c		and #$0c			and 	#12
.c0cb	c9 0c		cmp #$0c			cmp 	#12
.c0cd	f0 e7		beq $c0b6			beq 	ChooseRandomDirection
.c0cf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: move.asm

.c0d0					MoveObjects:
.c0d0	a2 00		ldx #$00			ldx 	#0  						; look for an unused object
.c0d2					_MOLoop:
.c0d2	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c0d5	30 03		bmi $c0da			bmi 	_MONoObject
.c0d7	20 e0 c0	jsr $c0e0			jsr 	_MoveOneObject
.c0da					_MONoObject:
.c0da	e8		inx				inx
.c0db	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c0dd	d0 f3		bne $c0d2			bne 	_MOLoop
.c0df	60		rts				rts  								; cannot create, exit.
.c0e0					_MoveOneObject:
.c0e0	de f4 e2	dec $e2f4,x			dec 	OBSpeedCounter,x 			; speed counter down to zero.
.c0e3	d0 58		bne $c13d			bne 	_MONotMove
.c0e5	bd 88 e2	lda $e288,x			lda 	OBSpeed,x 					; reset speed counter
.c0e8	9d f4 e2	sta $e2f4,x			sta 	OBSpeedCounter,x
.c0eb	de a4 e4	dec $e4a4,x			dec 	OBIntelligenceCount,x 		; time for a rethink
.c0ee	d0 10		bne $c100			bne 	_MONoProcess
.c0f0	bd 38 e4	lda $e438,x			lda 	OBIntelligence,x 			; reset the counter
.c0f3	9d a4 e4	sta $e4a4,x			sta 	OBIntelligenceCount,x
.c0f6	a9 03		lda #$03			lda 	#MSG_CONTROL
.c0f8	20 b0 c1	jsr $c1b0			jsr 	SendObjectMessage
.c0fb	90 03		bcc $c100			bcc 	_1
.c0fd	20 c9 c1	jsr $c1c9			jsr 	DefaultHandler
.c100					_1:
.c100					_MONoProcess:
.c100	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; current direction.
.c103	bc 6c e0	ldy $e06c,x			ldy 	OBXPos,x 					; new X position => Y
.c106	4a		lsr a				lsr 	a
.c107	90 01		bcc $c10a			bcc 	_MONotLeft
.c109	88		dey				dey
.c10a					_MONotLeft:
.c10a	4a		lsr a				lsr 	a
.c10b	90 01		bcc $c10e			bcc 	_MONotRight
.c10d	c8		iny				iny
.c10e					_MONotRight:
.c10e	5a		phy				phy 								; new Y position on stack
.c10f	bc d8 e0	ldy $e0d8,x			ldy 	OBYPos,x 					; new Y position => Y
.c112	4a		lsr a				lsr 	a
.c113	90 01		bcc $c116			bcc 	_MONotUp
.c115	88		dey				dey
.c116					_MONotUp:
.c116	4a		lsr a				lsr 	a
.c117	90 01		bcc $c11a			bcc 	_MONotDown
.c119	c8		iny				iny
.c11a					_MONotDown:
.c11a	68		pla				pla 								; (A,Y) are new coordinates.
.c11b	c9 04		cmp #$04			cmp 	#4  						; check out of bounds.
.c11d	90 1f		bcc $c13e			bcc 	_MOHitWall
.c11f	c9 9c		cmp #$9c			cmp 	#156
.c121	b0 1b		bcs $c13e			bcs 	_MOHitWall
.c123	c0 04		cpy #$04			cpy 	#4
.c125	90 17		bcc $c13e			bcc 	_MOHitWall
.c127	c0 6c		cpy #$6c			cpy 	#108
.c129	b0 13		bcs $c13e			bcs 	_MOHitWall
.c12b	9d 6c e0	sta $e06c,x			sta 	OBXPos,x 					; update position.
.c12e	98		tya				tya
.c12f	9d d8 e0	sta $e0d8,x			sta 	OBYPos,x
.c132	20 4c c1	jsr $c14c			jsr 	RedrawObject 				; repaint.
.c135	bd 00 e0	lda $e000,x			lda 	OBFlags,x 					; toggle animation flag
.c138	49 40		eor #$40			eor 	#$40
.c13a	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c13d					_MONotMove:
.c13d	60		rts				rts
.c13e					_MOHitWall:
.c13e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility.asm

.c13f					ResetObjects:
.c13f	a2 00		ldx #$00			ldx 	#0
.c141					_RSLoop:
.c141	a9 ff		lda #$ff			lda 	#$FF
.c143	9d 00 e0	sta $e000,x			sta 	OBFlags,x
.c146	e8		inx				inx
.c147	e0 6c		cpx #$6c			cpx 	#OBJ_COUNT
.c149	d0 f6		bne $c141			bne 	_RSLoop
.c14b	60		rts				rts
.c14c					RedrawObject:
.c14c	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API to be available
.c14f	d0 fb		bne $c14c			bne 	RedrawObject
.c151	8e 04 ff	stx $ff04			stx 	APIParams+0 				; sprite # same as object #
.c154	9c 06 ff	stz $ff06			stz 	APIParams+2 				; shift X left into X position
.c157	bd 6c e0	lda $e06c,x			lda 	OBXPos,x
.c15a	0a		asl a				asl 	a
.c15b	8d 05 ff	sta $ff05			sta 	APIParams+1
.c15e	2e 06 ff	rol $ff06			rol 	APIParams+2
.c161	9c 08 ff	stz $ff08			stz 	APIParams+4  				; shift Y left into Y position
.c164	bd d8 e0	lda $e0d8,x			lda 	OBYPos,x
.c167	0a		asl a				asl 	a
.c168	69 10		adc #$10			adc 	#16 						; allow for top area
.c16a	8d 07 ff	sta $ff07			sta 	APIParams+3
.c16d	bd 44 e1	lda $e144,x			lda 	OBSprite1,x 				; set graphic
.c170	3c 00 e0	bit $e000,x			bit 	OBFlags,x
.c173	50 03		bvc $c178			bvc 	_ROUseSprite1
.c175	bd b0 e1	lda $e1b0,x			lda 	OBSprite2,x
.c178					_ROUseSprite1:
.c178	8d 09 ff	sta $ff09			sta 	APIParams+5
.c17b	bd 1c e2	lda $e21c,x			lda 	OBDirection,x 				; check moving left
.c17e	29 01		and #$01			and 	#1 							; bit 0 of direction sets xflip
.c180	8d 0a ff	sta $ff0a			sta 	APIParams+6 				; set flip
.c183					_RONotLeft:
.c183	a9 02		lda #$02			lda 	#MSG_REPAINT
.c185	20 b0 c1	jsr $c1b0			jsr 	SendObjectMessage
.c188	90 03		bcc $c18d			bcc 	_1
.c18a	20 c9 c1	jsr $c1c9			jsr 	DefaultHandler
.c18d					_1:
.c18d	a9 02		lda #$02			lda 	#2  						; and draw it.
.c18f	8d 01 ff	sta $ff01			sta 	APIFunction
.c192	a9 06		lda #$06			lda 	#6
.c194	8d 00 ff	sta $ff00			sta 	APICommand
.c197	60		rts				rts
.c198					Random8Bit:
.c198	5a		phy				phy
.c199	a0 08		ldy #$08			ldy 	#8
.c19b	ad ae c1	lda $c1ae			lda 	_R8SeedValue+0
.c19e					_R8RandomLoop
.c19e	0a		asl a				asl     a
.c19f	2e af c1	rol $c1af			rol 	_R8SeedValue+1
.c1a2	90 02		bcc $c1a6			bcc 	_R8NotSet
.c1a4	49 39		eor #$39			eor 	#$39
.c1a6					_R8NotSet:
.c1a6	88		dey				dey
.c1a7	d0 f5		bne $c19e			bne 	_R8RandomLoop
.c1a9	8d ae c1	sta $c1ae			sta 	_R8SeedValue+0
.c1ac	7a		ply				ply
.c1ad	60		rts				rts
.c1ae					_R8SeedValue
>c1ae	cd ab						.word 	$ABCD
.c1b0					SendObjectMessage:
.c1b0	48		pha				pha
.c1b1	bd 60 e3	lda $e360,x			lda 	OBHandlerLow,x
.c1b4	8d bf c1	sta $c1bf			sta 	_SMCall+1
.c1b7	bd cc e3	lda $e3cc,x			lda 	OBHandlerHigh,x
.c1ba	8d c0 c1	sta $c1c0			sta 	_SMCall+2
.c1bd	68		pla				pla
.c1be					_SMCall:
.c1be	4c 00 00	jmp $0000			jmp 	$0000
.c1c1					SetObjectGraphic:
.c1c1	9d 44 e1	sta $e144,x			sta 	OBSprite1,x
.c1c4	1a		inc a				inc 	a
.c1c5	9d b0 e1	sta $e1b0,x			sta 	OBSprite2,x
.c1c8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: classes/default.asm

.c1c9					DefaultHandler:
.c1c9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c1cb	d0 05		bne $c1d2			bne 	_1
.c1cd	20 d4 c1	jsr $c1d4			jsr 	DefaultControl
.c1d0	18		clc				clc
.c1d1	60		rts				rts
.c1d2					_1:
.c1d2	38		sec				sec
.c1d3	60		rts				rts
.c1d4					DefaultControl:
.c1d4	4c b6 c0	jmp $c0b6			jmp 	ChooseRandomDirection

;******  Return to file: main.asm


;******  Processing file: classes/player.asm

.c1d7					OHPlayer:
.c1d7	c9 01		cmp #$01			cmp 	#MSG_INIT
.c1d9	d0 05		bne $c1e0			bne 	_1
.c1db	20 f4 c1	jsr $c1f4			jsr 	OHPInitHandler
.c1de	18		clc				clc
.c1df	60		rts				rts
.c1e0					_1:
.c1e0	c9 02		cmp #$02			cmp 	#MSG_REPAINT
.c1e2	d0 05		bne $c1e9			bne 	_1
.c1e4	20 09 c2	jsr $c209			jsr 	OHPRepaintHandler
.c1e7	18		clc				clc
.c1e8	60		rts				rts
.c1e9					_1:
.c1e9	c9 03		cmp #$03			cmp 	#MSG_CONTROL
.c1eb	d0 05		bne $c1f2			bne 	_1
.c1ed	20 0f c2	jsr $c20f			jsr 	OHPControlHandler
.c1f0	18		clc				clc
.c1f1	60		rts				rts
.c1f2					_1:
.c1f2	38		sec				sec
.c1f3	60		rts				rts
.c1f4					OHPInitHandler:
.c1f4	a9 50		lda #$50			lda 	#160/2
.c1f6	9d 6c e0	sta $e06c,x			sta 	OBXPos,x
.c1f9	a9 40		lda #$40			lda 	#128/2
.c1fb	99 d8 e0	sta $e0d8,y			sta 	OBYPos,y
.c1fe	a9 02		lda #$02			lda 	#2
.c200	9d 88 e2	sta $e288,x			sta 	OBSpeed,x
.c203	a9 01		lda #$01			lda 	#1
.c205	9d 38 e4	sta $e438,x			sta 	OBIntelligence,x
.c208	60		rts				rts
.c209					OHPRepaintHandler:
.c209	a9 00		lda #$00			lda 	#GR_PLAYERH
.c20b	20 c1 c1	jsr $c1c1			jsr 	SetObjectGraphic
.c20e	60		rts				rts
.c20f					OHPControlHandler:
.c20f	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for API
.c212	d0 fb		bne $c20f			bne 	OHPControlHandler
.c214	a9 01		lda #$01			lda 	#1  						; and draw it.
.c216	8d 01 ff	sta $ff01			sta 	APIFunction
.c219	a9 07		lda #$07			lda 	#7
.c21b	8d 00 ff	sta $ff00			sta 	APICommand
.c21e					_OHPWait
.c21e	ad 00 ff	lda $ff00			lda 	APICommand 					; wait for result
.c221	d0 fb		bne $c21e			bne 	_OHPWait
.c223	ad 04 ff	lda $ff04			lda 	APIParams 					; put the controller dpad bits into the direction.
.c226	29 0f		and #$0f			and 	#15  						; (made the same for this reason)
.c228	9d 1c e2	sta $e21c,x			sta 	OBDirection,x
.c22b	60		rts				rts

;******  Return to file: main.asm

.c22c					HandlerTable:
>c22c	d7 c1						.word 		OHPlayer 				; type 0, player object

;******  Processing file: data.asm

=$e000					OBBase = *
=$e000					OBFlags = OBBase + 0*OBJ_COUNT
=$e06c					OBXPos = OBBase + 1*OBJ_COUNT
=$e0d8					OBYPos = OBBase + 2*OBJ_COUNT
=$e144					OBSprite1 = OBBase + 3*OBJ_COUNT
=$e1b0					OBSprite2 = OBBase + 4*OBJ_COUNT
=$e21c					OBDirection = OBBase + 5*OBJ_COUNT
=$e288					OBSpeed = OBBase + 6*OBJ_COUNT
=$e2f4					OBSpeedCounter = OBBase + 7*OBJ_COUNT
=$e360					OBHandlerLow = OBBase + 8*OBJ_COUNT
=$e3cc					OBHandlerHigh = OBBase + 9*OBJ_COUNT
=$e438					OBIntelligence = OBBase + 10*OBJ_COUNT
=$e4a4					OBIntelligenceCount = OBBase + 11*OBJ_COUNT

;******  Return to file: main.asm


;******  End of listing
